
MY_DRIVERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000047ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  000047ce  00004862  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008000ea  008000ea  000048ec  2**0
                  ALLOC
  3 .stab         00004c8c  00000000  00000000  000048ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ccc  00000000  00000000  00009578  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b384  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000d13d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000e028  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000edd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ef38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000f1c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f993  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__vector_6>
      1c:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__vector_7>
      20:	0c 94 27 08 	jmp	0x104e	; 0x104e <__vector_8>
      24:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__vector_9>
      28:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <__vector_10>
      2c:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ee       	ldi	r26, 0xEA	; 234
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3f       	cpi	r26, 0xFF	; 255
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <main>
      8a:	0c 94 e5 23 	jmp	0x47ca	; 0x47ca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ae 23 	jmp	0x475c	; 0x475c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e9       	ldi	r26, 0x96	; 150
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ca 23 	jmp	0x4794	; 0x4794 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ba 23 	jmp	0x4774	; 0x4774 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d6 23 	jmp	0x47ac	; 0x47ac <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ba 23 	jmp	0x4774	; 0x4774 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d6 23 	jmp	0x47ac	; 0x47ac <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ae 23 	jmp	0x475c	; 0x475c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e9       	ldi	r24, 0x96	; 150
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ca 23 	jmp	0x4794	; 0x4794 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ba 23 	jmp	0x4774	; 0x4774 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d6 23 	jmp	0x47ac	; 0x47ac <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ba 23 	jmp	0x4774	; 0x4774 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d6 23 	jmp	0x47ac	; 0x47ac <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ba 23 	jmp	0x4774	; 0x4774 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d6 23 	jmp	0x47ac	; 0x47ac <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 be 23 	jmp	0x477c	; 0x477c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 da 23 	jmp	0x47b4	; 0x47b4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <WTD_voidEnable>:

#include "WDT_Interface.h"
#include "WDT_Private.h"

void WTD_voidEnable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= (1<<3);
     b4e:	a1 e4       	ldi	r26, 0x41	; 65
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e1 e4       	ldi	r30, 0x41	; 65
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <WTD_voidDisable>:

void WTD_voidDisable(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= (1<<3) | (1<<4);  //0b00011000
     b6a:	a1 e4       	ldi	r26, 0x41	; 65
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e1 e4       	ldi	r30, 0x41	; 65
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	88 61       	ori	r24, 0x18	; 24
     b76:	8c 93       	st	X, r24
	WDTCR = 0x00; //a logic 0 to WDE
     b78:	e1 e4       	ldi	r30, 0x41	; 65
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	10 82       	st	Z, r1
}
     b7e:	cf 91       	pop	r28
     b80:	df 91       	pop	r29
     b82:	08 95       	ret

00000b84 <WTD_u8Sleep>:

void WTD_u8Sleep(uint8 u8SleepTime)
{
     b84:	df 93       	push	r29
     b86:	cf 93       	push	r28
     b88:	0f 92       	push	r0
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	89 83       	std	Y+1, r24	; 0x01
	WDTCR &= 0b11111000;
     b90:	a1 e4       	ldi	r26, 0x41	; 65
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	e1 e4       	ldi	r30, 0x41	; 65
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	88 7f       	andi	r24, 0xF8	; 248
     b9c:	8c 93       	st	X, r24
	WDTCR |= u8SleepTime;
     b9e:	a1 e4       	ldi	r26, 0x41	; 65
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e1 e4       	ldi	r30, 0x41	; 65
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	90 81       	ld	r25, Z
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	89 2b       	or	r24, r25
     bac:	8c 93       	st	X, r24
}
     bae:	0f 90       	pop	r0
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <TIM1_voidInit>:
pf  TIM1_pfCmpBCallBack;
pf  TIM1_pfIcuCallBack;


void TIM1_voidInit(void)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TCCR1A , 0);
	SET_BIT(TCCR1A , 1);
	SET_BIT(TCCR1B , 3);
	CLR_BIT(TCCR1B , 4);
#elif TIM1_MODE ==  TIM1_F_PWM_TO_ICR1
    CLR_BIT(TCCR1A , 0);
     bbe:	af e4       	ldi	r26, 0x4F	; 79
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	ef e4       	ldi	r30, 0x4F	; 79
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8e 7f       	andi	r24, 0xFE	; 254
     bca:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 1);
     bcc:	af e4       	ldi	r26, 0x4F	; 79
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ef e4       	ldi	r30, 0x4F	; 79
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	82 60       	ori	r24, 0x02	; 2
     bd8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 3);
     bda:	ae e4       	ldi	r26, 0x4E	; 78
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ee e4       	ldi	r30, 0x4E	; 78
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	88 60       	ori	r24, 0x08	; 8
     be6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 4);
     be8:	ae e4       	ldi	r26, 0x4E	; 78
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	ee e4       	ldi	r30, 0x4E	; 78
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	80 61       	ori	r24, 0x10	; 16
     bf4:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 7);
#elif TIM1_OUTFORM_comA == TIM1_SET_OC1A 
    SET_BIT(TCCR1A , 6);
	SET_BIT(TCCR1A , 7);
#elif TIM1_OUTFORM_comA == TIM1_F_NON_INVERT_OC1A 
    CLR_BIT(TCCR1A , 6);
     bf6:	af e4       	ldi	r26, 0x4F	; 79
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	ef e4       	ldi	r30, 0x4F	; 79
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	8f 7b       	andi	r24, 0xBF	; 191
     c02:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 7);
     c04:	af e4       	ldi	r26, 0x4F	; 79
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	ef e4       	ldi	r30, 0x4F	; 79
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	80 68       	ori	r24, 0x80	; 128
     c10:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 5);
#elif TIM1_OUTFORM_comB == TIM1_SET_OC1B 
    SET_BIT(TCCR1A , 4);
	SET_BIT(TCCR1A , 5);
#elif TIM1_OUTFORM_comB == TIM1_F_NON_INVERT_OC1B 
    CLR_BIT(TCCR1A , 4);
     c12:	af e4       	ldi	r26, 0x4F	; 79
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	ef e4       	ldi	r30, 0x4F	; 79
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	8f 7e       	andi	r24, 0xEF	; 239
     c1e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 5);
     c20:	af e4       	ldi	r26, 0x4F	; 79
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	ef e4       	ldi	r30, 0x4F	; 79
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	80 62       	ori	r24, 0x20	; 32
     c2c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , 4);
	CLR_BIT(TCCR1A , 5);

#endif
  /*Disable timer*/
  TCCR1B &= 0b11111000;
     c2e:	ae e4       	ldi	r26, 0x4E	; 78
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	ee e4       	ldi	r30, 0x4E	; 78
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	88 7f       	andi	r24, 0xF8	; 248
     c3a:	8c 93       	st	X, r24
  /*Disable Int OVF-CMPA,B ICU*/
  CLR_BIT(TIMSK , 2 );
     c3c:	a9 e5       	ldi	r26, 0x59	; 89
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e9 e5       	ldi	r30, 0x59	; 89
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	8b 7f       	andi	r24, 0xFB	; 251
     c48:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 3);
     c4a:	a9 e5       	ldi	r26, 0x59	; 89
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e9 e5       	ldi	r30, 0x59	; 89
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	87 7f       	andi	r24, 0xF7	; 247
     c56:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 4 );
     c58:	a9 e5       	ldi	r26, 0x59	; 89
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e9 e5       	ldi	r30, 0x59	; 89
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	8f 7e       	andi	r24, 0xEF	; 239
     c64:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 5);
     c66:	a9 e5       	ldi	r26, 0x59	; 89
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e9 e5       	ldi	r30, 0x59	; 89
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	8f 7d       	andi	r24, 0xDF	; 223
     c72:	8c 93       	st	X, r24
  /*Clear Int OVF-CMP flags*/
  SET_BIT(TIFR , 2 );
     c74:	a8 e5       	ldi	r26, 0x58	; 88
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e8 e5       	ldi	r30, 0x58	; 88
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	84 60       	ori	r24, 0x04	; 4
     c80:	8c 93       	st	X, r24
  SET_BIT(TIFR , 3 );
     c82:	a8 e5       	ldi	r26, 0x58	; 88
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	e8 e5       	ldi	r30, 0x58	; 88
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	88 60       	ori	r24, 0x08	; 8
     c8e:	8c 93       	st	X, r24
  SET_BIT(TIFR , 4 );
     c90:	a8 e5       	ldi	r26, 0x58	; 88
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	e8 e5       	ldi	r30, 0x58	; 88
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	80 61       	ori	r24, 0x10	; 16
     c9c:	8c 93       	st	X, r24
  SET_BIT(TIFR , 5 );
     c9e:	a8 e5       	ldi	r26, 0x58	; 88
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e8 e5       	ldi	r30, 0x58	; 88
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	80 62       	ori	r24, 0x20	; 32
     caa:	8c 93       	st	X, r24
  
  /*Clear TCNT,OCE1A,B,ICR*/
  OCR1AL = 0 ;
     cac:	ea e4       	ldi	r30, 0x4A	; 74
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	10 82       	st	Z, r1
  OCR1AH = 0 ;
     cb2:	eb e4       	ldi	r30, 0x4B	; 75
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	10 82       	st	Z, r1
  OCR1BL = 0 ;
     cb8:	e8 e4       	ldi	r30, 0x48	; 72
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	10 82       	st	Z, r1
  OCR1BH = 0 ;
     cbe:	e9 e4       	ldi	r30, 0x49	; 73
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	10 82       	st	Z, r1
  TCNT1L = 0 ;
     cc4:	ec e4       	ldi	r30, 0x4C	; 76
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	10 82       	st	Z, r1
  TCNT1H = 0 ;
     cca:	ed e4       	ldi	r30, 0x4D	; 77
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	10 82       	st	Z, r1
  ICR1L  = 0 ;
     cd0:	e6 e4       	ldi	r30, 0x46	; 70
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	10 82       	st	Z, r1
  ICR1H  = 0 ;
     cd6:	e7 e4       	ldi	r30, 0x47	; 71
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	10 82       	st	Z, r1
  
}
     cdc:	cf 91       	pop	r28
     cde:	df 91       	pop	r29
     ce0:	08 95       	ret

00000ce2 <TIM1_voidEnable>:
void TIM1_voidEnable(uint8 u8PrescalValCpy)
{
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	0f 92       	push	r0
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B &= 0b11111000;
     cee:	ae e4       	ldi	r26, 0x4E	; 78
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	ee e4       	ldi	r30, 0x4E	; 78
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	88 7f       	andi	r24, 0xF8	; 248
     cfa:	8c 93       	st	X, r24
	TCCR1B |= u8PrescalValCpy & 0x07 ;// 0b00000111
     cfc:	ae e4       	ldi	r26, 0x4E	; 78
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	ee e4       	ldi	r30, 0x4E	; 78
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	98 2f       	mov	r25, r24
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	87 70       	andi	r24, 0x07	; 7
     d0c:	89 2b       	or	r24, r25
     d0e:	8c 93       	st	X, r24
	
}
     d10:	0f 90       	pop	r0
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <TIM1_voidDisable>:
void TIM1_voidDisable(void)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000;
     d20:	ae e4       	ldi	r26, 0x4E	; 78
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	ee e4       	ldi	r30, 0x4E	; 78
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	88 7f       	andi	r24, 0xF8	; 248
     d2c:	8c 93       	st	X, r24
	
}
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	08 95       	ret

00000d34 <TIM1_voidEnableOvfInt>:
void TIM1_voidEnableOvfInt(void)
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 2 );
     d3c:	a9 e5       	ldi	r26, 0x59	; 89
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e9 e5       	ldi	r30, 0x59	; 89
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	84 60       	ori	r24, 0x04	; 4
     d48:	8c 93       	st	X, r24
	
}
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	08 95       	ret

00000d50 <TIM1_voidDisableOvfInt>:
void TIM1_voidDisableOvfInt(void)
{
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 2 );
     d58:	a9 e5       	ldi	r26, 0x59	; 89
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e9 e5       	ldi	r30, 0x59	; 89
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	8b 7f       	andi	r24, 0xFB	; 251
     d64:	8c 93       	st	X, r24
	
}
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <TIM1_voidEnableCmpAInt>:
void TIM1_voidEnableCmpAInt(void)
{
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 4 );
     d74:	a9 e5       	ldi	r26, 0x59	; 89
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e9 e5       	ldi	r30, 0x59	; 89
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	80 61       	ori	r24, 0x10	; 16
     d80:	8c 93       	st	X, r24
	
}
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <TIM1_voidDisableCmpAInt>:
void TIM1_voidDisableCmpAInt(void)
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 4 );
     d90:	a9 e5       	ldi	r26, 0x59	; 89
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e9 e5       	ldi	r30, 0x59	; 89
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	8f 7e       	andi	r24, 0xEF	; 239
     d9c:	8c 93       	st	X, r24
	
}
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <TIM1_voidEnableCmpBInt>:
void TIM1_voidEnableCmpBInt(void)
{
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 3 );
     dac:	a9 e5       	ldi	r26, 0x59	; 89
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e9 e5       	ldi	r30, 0x59	; 89
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	88 60       	ori	r24, 0x08	; 8
     db8:	8c 93       	st	X, r24
	
}
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <TIM1_voidDisableCmpBInt>:
void TIM1_voidDisableCmpBInt(void)
{
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 3);
     dc8:	a9 e5       	ldi	r26, 0x59	; 89
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e9 e5       	ldi	r30, 0x59	; 89
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	87 7f       	andi	r24, 0xF7	; 247
     dd4:	8c 93       	st	X, r24
	
}
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <TIM1_voidEnableIcuInt>:
void TIM1_voidEnableIcuInt(void)
{
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 5 );
     de4:	a9 e5       	ldi	r26, 0x59	; 89
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e9 e5       	ldi	r30, 0x59	; 89
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	80 62       	ori	r24, 0x20	; 32
     df0:	8c 93       	st	X, r24
}
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <TIM1_voidDisableIcuInt>:
void TIM1_voidDisableIcuInt(void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 5);
     e00:	a9 e5       	ldi	r26, 0x59	; 89
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e9 e5       	ldi	r30, 0x59	; 89
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	8f 7d       	andi	r24, 0xDF	; 223
     e0c:	8c 93       	st	X, r24
}
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	08 95       	ret

00000e14 <TIM1_voidSetCallbackOvfInt>:

void TIM1_voidSetCallbackOvfInt(pf pfOvfCalbckCpy)
{
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	00 d0       	rcall	.+0      	; 0xe1a <TIM1_voidSetCallbackOvfInt+0x6>
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	9a 83       	std	Y+2, r25	; 0x02
     e20:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfOvfCallBack = pfOvfCalbckCpy;
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	9a 81       	ldd	r25, Y+2	; 0x02
     e26:	90 93 f4 00 	sts	0x00F4, r25
     e2a:	80 93 f3 00 	sts	0x00F3, r24
}
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <TIM1_voidSetCallbackCompAInt>:
void TIM1_voidSetCallbackCompAInt(pf pfCompACalbckCpy)
{
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <TIM1_voidSetCallbackCompAInt+0x6>
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	9a 83       	std	Y+2, r25	; 0x02
     e44:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpACallBack = pfCompACalbckCpy;
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	9a 81       	ldd	r25, Y+2	; 0x02
     e4a:	90 93 f6 00 	sts	0x00F6, r25
     e4e:	80 93 f5 00 	sts	0x00F5, r24
}
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <TIM1_voidSetCallbackCompBInt>:
void TIM1_voidSetCallbackCompBInt(pf pfCompBCalbckCpy)
{
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	00 d0       	rcall	.+0      	; 0xe62 <TIM1_voidSetCallbackCompBInt+0x6>
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	9a 83       	std	Y+2, r25	; 0x02
     e68:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpBCallBack = pfCompBCalbckCpy;
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	9a 81       	ldd	r25, Y+2	; 0x02
     e6e:	90 93 f0 00 	sts	0x00F0, r25
     e72:	80 93 ef 00 	sts	0x00EF, r24
}
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <TIM1_voidSetCallbackIcuInt>:
void TIM1_voidSetCallbackIcuInt(pf pfIcuCalbckCpy)
{
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	00 d0       	rcall	.+0      	; 0xe86 <TIM1_voidSetCallbackIcuInt+0x6>
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	9a 83       	std	Y+2, r25	; 0x02
     e8c:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfIcuCallBack = pfIcuCalbckCpy;
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	9a 81       	ldd	r25, Y+2	; 0x02
     e92:	90 93 f2 00 	sts	0x00F2, r25
     e96:	80 93 f1 00 	sts	0x00F1, r24
}
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <TIM1_voidSetTimerValue>:
void TIM1_voidSetTimerValue(uint16 u16TimValCpy)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <TIM1_voidSetTimerValue+0x6>
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	9a 83       	std	Y+2, r25	; 0x02
     eb0:	89 83       	std	Y+1, r24	; 0x01
	TCNT1L =(uint8) u16TimValCpy;
     eb2:	ec e4       	ldi	r30, 0x4C	; 76
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	80 83       	st	Z, r24
	TCNT1H =(uint8) (u16TimValCpy>>8);
     eba:	ed e4       	ldi	r30, 0x4D	; 77
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	9a 81       	ldd	r25, Y+2	; 0x02
     ec2:	89 2f       	mov	r24, r25
     ec4:	99 27       	eor	r25, r25
     ec6:	80 83       	st	Z, r24
}
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <TIM1_voidSetCmpARegValue>:
void TIM1_voidSetCmpARegValue(uint16 u16CmpAValCpy)
{
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <TIM1_voidSetCmpARegValue+0x6>
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	9a 83       	std	Y+2, r25	; 0x02
     ede:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL= (uint8)u16CmpAValCpy;
     ee0:	ea e4       	ldi	r30, 0x4A	; 74
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	80 83       	st	Z, r24
	OCR1AH= (uint8)(u16CmpAValCpy>>8);
     ee8:	eb e4       	ldi	r30, 0x4B	; 75
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	9a 81       	ldd	r25, Y+2	; 0x02
     ef0:	89 2f       	mov	r24, r25
     ef2:	99 27       	eor	r25, r25
     ef4:	80 83       	st	Z, r24
	
}
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <TIM1_voidSetCmpBRegValue>:
void TIM1_voidSetCmpBRegValue(uint16 u16CmpBValCpy)
{
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	00 d0       	rcall	.+0      	; 0xf06 <TIM1_voidSetCmpBRegValue+0x6>
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	89 83       	std	Y+1, r24	; 0x01
	OCR1BL= (uint8)u16CmpBValCpy;
     f0e:	e8 e4       	ldi	r30, 0x48	; 72
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	80 83       	st	Z, r24
	OCR1BH= (uint8)(u16CmpBValCpy>>8);
     f16:	e9 e4       	ldi	r30, 0x49	; 73
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	9a 81       	ldd	r25, Y+2	; 0x02
     f1e:	89 2f       	mov	r24, r25
     f20:	99 27       	eor	r25, r25
     f22:	80 83       	st	Z, r24
	
}
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <TIM1_voidSetIcuRegValue>:
void TIM1_voidSetIcuRegValue(uint16 u16IcuValCpy)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	00 d0       	rcall	.+0      	; 0xf34 <TIM1_voidSetIcuRegValue+0x6>
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	9a 83       	std	Y+2, r25	; 0x02
     f3a:	89 83       	std	Y+1, r24	; 0x01
	ICR1=u16IcuValCpy;
     f3c:	e6 e4       	ldi	r30, 0x46	; 70
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	9a 81       	ldd	r25, Y+2	; 0x02
     f44:	91 83       	std	Z+1, r25	; 0x01
     f46:	80 83       	st	Z, r24

}
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <TIM1_u8ReadTimerValue>:
uint16 TIM1_u8ReadTimerValue(void)
{
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	00 d0       	rcall	.+0      	; 0xf58 <TIM1_u8ReadTimerValue+0x6>
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
	uint16 u16TcntValueLoc;
	u16TcntValueLoc   = TCNT1H;
     f5c:	ed e4       	ldi	r30, 0x4D	; 77
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	9a 83       	std	Y+2, r25	; 0x02
     f68:	89 83       	std	Y+1, r24	; 0x01
	u16TcntValueLoc   = (u16TcntValueLoc<<8);
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	9a 81       	ldd	r25, Y+2	; 0x02
     f6e:	98 2f       	mov	r25, r24
     f70:	88 27       	eor	r24, r24
     f72:	9a 83       	std	Y+2, r25	; 0x02
     f74:	89 83       	std	Y+1, r24	; 0x01
	u16TcntValueLoc |= TCNT1L;
     f76:	ec e4       	ldi	r30, 0x4C	; 76
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	9a 81       	ldd	r25, Y+2	; 0x02
     f84:	82 2b       	or	r24, r18
     f86:	93 2b       	or	r25, r19
     f88:	9a 83       	std	Y+2, r25	; 0x02
     f8a:	89 83       	std	Y+1, r24	; 0x01
	return u16TcntValueLoc;
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <__vector_9>:
/* ISR for overflow*/
void __vector_9(void) __attribute__ ((signal,used));
void __vector_9 (void)
{
     f9a:	1f 92       	push	r1
     f9c:	0f 92       	push	r0
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	0f 92       	push	r0
     fa2:	11 24       	eor	r1, r1
     fa4:	2f 93       	push	r18
     fa6:	3f 93       	push	r19
     fa8:	4f 93       	push	r20
     faa:	5f 93       	push	r21
     fac:	6f 93       	push	r22
     fae:	7f 93       	push	r23
     fb0:	8f 93       	push	r24
     fb2:	9f 93       	push	r25
     fb4:	af 93       	push	r26
     fb6:	bf 93       	push	r27
     fb8:	ef 93       	push	r30
     fba:	ff 93       	push	r31
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfOvfCallBack();
     fc4:	e0 91 f3 00 	lds	r30, 0x00F3
     fc8:	f0 91 f4 00 	lds	r31, 0x00F4
     fcc:	09 95       	icall
	
}
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	ff 91       	pop	r31
     fd4:	ef 91       	pop	r30
     fd6:	bf 91       	pop	r27
     fd8:	af 91       	pop	r26
     fda:	9f 91       	pop	r25
     fdc:	8f 91       	pop	r24
     fde:	7f 91       	pop	r23
     fe0:	6f 91       	pop	r22
     fe2:	5f 91       	pop	r21
     fe4:	4f 91       	pop	r20
     fe6:	3f 91       	pop	r19
     fe8:	2f 91       	pop	r18
     fea:	0f 90       	pop	r0
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	0f 90       	pop	r0
     ff0:	1f 90       	pop	r1
     ff2:	18 95       	reti

00000ff4 <__vector_7>:
/* ISR for compaA*/

void __vector_7 (void) __attribute__ ((signal,used));
void __vector_7 (void)
{
     ff4:	1f 92       	push	r1
     ff6:	0f 92       	push	r0
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	0f 92       	push	r0
     ffc:	11 24       	eor	r1, r1
     ffe:	2f 93       	push	r18
    1000:	3f 93       	push	r19
    1002:	4f 93       	push	r20
    1004:	5f 93       	push	r21
    1006:	6f 93       	push	r22
    1008:	7f 93       	push	r23
    100a:	8f 93       	push	r24
    100c:	9f 93       	push	r25
    100e:	af 93       	push	r26
    1010:	bf 93       	push	r27
    1012:	ef 93       	push	r30
    1014:	ff 93       	push	r31
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCmpACallBack();
    101e:	e0 91 f5 00 	lds	r30, 0x00F5
    1022:	f0 91 f6 00 	lds	r31, 0x00F6
    1026:	09 95       	icall
}
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	ff 91       	pop	r31
    102e:	ef 91       	pop	r30
    1030:	bf 91       	pop	r27
    1032:	af 91       	pop	r26
    1034:	9f 91       	pop	r25
    1036:	8f 91       	pop	r24
    1038:	7f 91       	pop	r23
    103a:	6f 91       	pop	r22
    103c:	5f 91       	pop	r21
    103e:	4f 91       	pop	r20
    1040:	3f 91       	pop	r19
    1042:	2f 91       	pop	r18
    1044:	0f 90       	pop	r0
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	0f 90       	pop	r0
    104a:	1f 90       	pop	r1
    104c:	18 95       	reti

0000104e <__vector_8>:
/* ISR for compaB*/

void __vector_8 (void) __attribute__ ((signal,used));
void __vector_8 (void)
{
    104e:	1f 92       	push	r1
    1050:	0f 92       	push	r0
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	0f 92       	push	r0
    1056:	11 24       	eor	r1, r1
    1058:	2f 93       	push	r18
    105a:	3f 93       	push	r19
    105c:	4f 93       	push	r20
    105e:	5f 93       	push	r21
    1060:	6f 93       	push	r22
    1062:	7f 93       	push	r23
    1064:	8f 93       	push	r24
    1066:	9f 93       	push	r25
    1068:	af 93       	push	r26
    106a:	bf 93       	push	r27
    106c:	ef 93       	push	r30
    106e:	ff 93       	push	r31
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCmpBCallBack();
    1078:	e0 91 ef 00 	lds	r30, 0x00EF
    107c:	f0 91 f0 00 	lds	r31, 0x00F0
    1080:	09 95       	icall
}
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	ff 91       	pop	r31
    1088:	ef 91       	pop	r30
    108a:	bf 91       	pop	r27
    108c:	af 91       	pop	r26
    108e:	9f 91       	pop	r25
    1090:	8f 91       	pop	r24
    1092:	7f 91       	pop	r23
    1094:	6f 91       	pop	r22
    1096:	5f 91       	pop	r21
    1098:	4f 91       	pop	r20
    109a:	3f 91       	pop	r19
    109c:	2f 91       	pop	r18
    109e:	0f 90       	pop	r0
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	0f 90       	pop	r0
    10a4:	1f 90       	pop	r1
    10a6:	18 95       	reti

000010a8 <__vector_6>:
/* ISR for ICU*/

void __vector_6 (void) __attribute__ ((signal,used));
void __vector_6 (void)
{
    10a8:	1f 92       	push	r1
    10aa:	0f 92       	push	r0
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	0f 92       	push	r0
    10b0:	11 24       	eor	r1, r1
    10b2:	2f 93       	push	r18
    10b4:	3f 93       	push	r19
    10b6:	4f 93       	push	r20
    10b8:	5f 93       	push	r21
    10ba:	6f 93       	push	r22
    10bc:	7f 93       	push	r23
    10be:	8f 93       	push	r24
    10c0:	9f 93       	push	r25
    10c2:	af 93       	push	r26
    10c4:	bf 93       	push	r27
    10c6:	ef 93       	push	r30
    10c8:	ff 93       	push	r31
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfIcuCallBack();
    10d2:	e0 91 f1 00 	lds	r30, 0x00F1
    10d6:	f0 91 f2 00 	lds	r31, 0x00F2
    10da:	09 95       	icall
}
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	ff 91       	pop	r31
    10e2:	ef 91       	pop	r30
    10e4:	bf 91       	pop	r27
    10e6:	af 91       	pop	r26
    10e8:	9f 91       	pop	r25
    10ea:	8f 91       	pop	r24
    10ec:	7f 91       	pop	r23
    10ee:	6f 91       	pop	r22
    10f0:	5f 91       	pop	r21
    10f2:	4f 91       	pop	r20
    10f4:	3f 91       	pop	r19
    10f6:	2f 91       	pop	r18
    10f8:	0f 90       	pop	r0
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	0f 90       	pop	r0
    10fe:	1f 90       	pop	r1
    1100:	18 95       	reti

00001102 <TIM1_u16GetIcuValue>:

/*ICU*/


uint16 TIM1_u16GetIcuValue(void)
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    110a:	e6 e4       	ldi	r30, 0x46	; 70
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	91 81       	ldd	r25, Z+1	; 0x01
}
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <ICU_voidRisingEdge>:
void ICU_voidRisingEdge(void)
 {
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B , 6);
    1120:	ae e4       	ldi	r26, 0x4E	; 78
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	ee e4       	ldi	r30, 0x4E	; 78
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	80 64       	ori	r24, 0x40	; 64
    112c:	8c 93       	st	X, r24
 }
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <ICU_voidFallenEdge>:
 
 void ICU_voidFallenEdge(void)
 {
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B , 6);
    113c:	ae e4       	ldi	r26, 0x4E	; 78
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	ee e4       	ldi	r30, 0x4E	; 78
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	8f 7b       	andi	r24, 0xBF	; 191
    1148:	8c 93       	st	X, r24
 }
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	08 95       	ret

00001150 <TIM0_voidInit>:

pf TIM0_pfOVFCallBack;
pf TIM0_pfCompareCallBack;

void TIM0_voidInit(void)
{
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
#elif TIM0_MODE == TIM0_CTC
	CLR_BIT(TCCR0,6);
	SET_BIT(TCCR0,3);

#elif TIM0_MODE == TIM0_FAST_PWM
	SET_BIT(TCCR0,6);
    1158:	a3 e5       	ldi	r26, 0x53	; 83
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e3 e5       	ldi	r30, 0x53	; 83
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	80 64       	ori	r24, 0x40	; 64
    1164:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
    1166:	a3 e5       	ldi	r26, 0x53	; 83
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e3 e5       	ldi	r30, 0x53	; 83
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	88 60       	ori	r24, 0x08	; 8
    1172:	8c 93       	st	X, r24
#elif TIM0_WAVE == TIM0_SET_OC0
	SET_BIT(TCCR0,4);
	SET_BIT(TCCR0,5);

#elif TIM0_WAVE == TIM0_CLR_OC0
	CLR_BIT(TCCR0,4);
    1174:	a3 e5       	ldi	r26, 0x53	; 83
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e3 e5       	ldi	r30, 0x53	; 83
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	8f 7e       	andi	r24, 0xEF	; 239
    1180:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
    1182:	a3 e5       	ldi	r26, 0x53	; 83
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e3 e5       	ldi	r30, 0x53	; 83
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	80 62       	ori	r24, 0x20	; 32
    118e:	8c 93       	st	X, r24
#else
	CLR_BIT(TCCR0,4);
	CLR_BIT(TCCR0,5);

#endif
}
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <TIM0_voidEnable>:
void TIM0_voidEnable(uint8 u8PreScaler)
{
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	0f 92       	push	r0
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &=0b11111000;
    11a2:	a3 e5       	ldi	r26, 0x53	; 83
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e3 e5       	ldi	r30, 0x53	; 83
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	88 7f       	andi	r24, 0xF8	; 248
    11ae:	8c 93       	st	X, r24
	TCCR0 |= (u8PreScaler & 0b00000111); //& 0b00000111 --> to prevent last 5 bits of TCCR0 Reg
    11b0:	a3 e5       	ldi	r26, 0x53	; 83
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e3 e5       	ldi	r30, 0x53	; 83
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	98 2f       	mov	r25, r24
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	87 70       	andi	r24, 0x07	; 7
    11c0:	89 2b       	or	r24, r25
    11c2:	8c 93       	st	X, r24
}
    11c4:	0f 90       	pop	r0
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <TIM0_voidDisable>:
void TIM0_voidDisable(void)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &=0b11111000;
    11d4:	a3 e5       	ldi	r26, 0x53	; 83
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e3 e5       	ldi	r30, 0x53	; 83
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	88 7f       	andi	r24, 0xF8	; 248
    11e0:	8c 93       	st	X, r24
}
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <TIM0_voidEnableOvfInt>:
void TIM0_voidEnableOvfInt(void)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,0);
    11f0:	a9 e5       	ldi	r26, 0x59	; 89
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e9 e5       	ldi	r30, 0x59	; 89
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	81 60       	ori	r24, 0x01	; 1
    11fc:	8c 93       	st	X, r24
}
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <TIM0_voidDisableOvfInt>:
void TIM0_voidDisableOvfInt(void)
{
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,0);
    120c:	a9 e5       	ldi	r26, 0x59	; 89
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e9 e5       	ldi	r30, 0x59	; 89
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	8e 7f       	andi	r24, 0xFE	; 254
    1218:	8c 93       	st	X, r24
}
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <TIM0_voidEnableCompareInt>:
void TIM0_voidEnableCompareInt(void)
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
    1228:	a9 e5       	ldi	r26, 0x59	; 89
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e9 e5       	ldi	r30, 0x59	; 89
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	82 60       	ori	r24, 0x02	; 2
    1234:	8c 93       	st	X, r24
}
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <TIM0_voidDisableCompareInt>:
void TIM0_voidDisableCompareInt(void)
{
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,1);
    1244:	a9 e5       	ldi	r26, 0x59	; 89
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e9 e5       	ldi	r30, 0x59	; 89
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	8d 7f       	andi	r24, 0xFD	; 253
    1250:	8c 93       	st	X, r24
}
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <TIM0_voidSetCallBackOvfInt>:
void TIM0_voidSetCallBackOvfInt(pf pfOvfCallBack)
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	00 d0       	rcall	.+0      	; 0x125e <TIM0_voidSetCallBackOvfInt+0x6>
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	9a 83       	std	Y+2, r25	; 0x02
    1264:	89 83       	std	Y+1, r24	; 0x01
	TIM0_pfOVFCallBack = pfOvfCallBack;
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	9a 81       	ldd	r25, Y+2	; 0x02
    126a:	90 93 f8 00 	sts	0x00F8, r25
    126e:	80 93 f7 00 	sts	0x00F7, r24
}
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <TIM0_voidSetCallBackCompareInt>:
void TIM0_voidSetCallBackCompareInt(pf pfCompareCallBack)
{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	00 d0       	rcall	.+0      	; 0x1282 <TIM0_voidSetCallBackCompareInt+0x6>
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	9a 83       	std	Y+2, r25	; 0x02
    1288:	89 83       	std	Y+1, r24	; 0x01
	TIM0_pfCompareCallBack = pfCompareCallBack;
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	9a 81       	ldd	r25, Y+2	; 0x02
    128e:	90 93 fa 00 	sts	0x00FA, r25
    1292:	80 93 f9 00 	sts	0x00F9, r24
}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <TIM0_voidSetTCNTValue>:
void TIM0_voidSetTCNTValue(uint8 u8TcntReg)
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	0f 92       	push	r0
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8TcntReg;
    12ac:	e2 e5       	ldi	r30, 0x52	; 82
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	80 83       	st	Z, r24
}
    12b4:	0f 90       	pop	r0
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <TIM0_voidSetOCRValue>:
void TIM0_voidSetOCRValue(uint8 u8OcrReg)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	0f 92       	push	r0
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = u8OcrReg;
    12c8:	ec e5       	ldi	r30, 0x5C	; 92
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	80 83       	st	Z, r24
}
    12d0:	0f 90       	pop	r0
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <Tim0_u8ReadTcntReg>:
uint8 Tim0_u8ReadTcntReg(void)
{
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    12e0:	e2 e5       	ldi	r30, 0x52	; 82
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
}
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	08 95       	ret

000012ec <Tim0_u8ReadOcrReg>:

uint8 Tim0_u8ReadOcrReg(void)
{
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
	return OCR0;
    12f4:	ec e5       	ldi	r30, 0x5C	; 92
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
}
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <TIM0_voidChangeMode>:

void TIM0_voidChangeMode(uint8 u8Mode)
{
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	0f 92       	push	r0
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	89 83       	std	Y+1, r24	; 0x01
	if (u8Mode == TIM0_NORMAL_MODE)
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	79 f4       	brne	.+30     	; 0x1330 <TIM0_voidChangeMode+0x30>
	{CLR_BIT(TCCR0,6);
    1312:	a3 e5       	ldi	r26, 0x53	; 83
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e3 e5       	ldi	r30, 0x53	; 83
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	8f 7b       	andi	r24, 0xBF	; 191
    131e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);}
    1320:	a3 e5       	ldi	r26, 0x53	; 83
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e3 e5       	ldi	r30, 0x53	; 83
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	87 7f       	andi	r24, 0xF7	; 247
    132c:	8c 93       	st	X, r24
    132e:	35 c0       	rjmp	.+106    	; 0x139a <TIM0_voidChangeMode+0x9a>

	else if (u8Mode == TIM0_CTC_MODE)
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	82 30       	cpi	r24, 0x02	; 2
    1334:	79 f4       	brne	.+30     	; 0x1354 <TIM0_voidChangeMode+0x54>
	{CLR_BIT(TCCR0,6);
    1336:	a3 e5       	ldi	r26, 0x53	; 83
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e3 e5       	ldi	r30, 0x53	; 83
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	8f 7b       	andi	r24, 0xBF	; 191
    1342:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);}
    1344:	a3 e5       	ldi	r26, 0x53	; 83
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e3 e5       	ldi	r30, 0x53	; 83
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	88 60       	ori	r24, 0x08	; 8
    1350:	8c 93       	st	X, r24
    1352:	23 c0       	rjmp	.+70     	; 0x139a <TIM0_voidChangeMode+0x9a>

	else if (u8Mode == TIM0_FAST_PWM_MODE)
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	83 30       	cpi	r24, 0x03	; 3
    1358:	79 f4       	brne	.+30     	; 0x1378 <TIM0_voidChangeMode+0x78>
	{SET_BIT(TCCR0,6);
    135a:	a3 e5       	ldi	r26, 0x53	; 83
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e3 e5       	ldi	r30, 0x53	; 83
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	80 64       	ori	r24, 0x40	; 64
    1366:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);}
    1368:	a3 e5       	ldi	r26, 0x53	; 83
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e3 e5       	ldi	r30, 0x53	; 83
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	88 60       	ori	r24, 0x08	; 8
    1374:	8c 93       	st	X, r24
    1376:	11 c0       	rjmp	.+34     	; 0x139a <TIM0_voidChangeMode+0x9a>

	else if (u8Mode == TIM0_PHASE_PWM_MODE)
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	84 30       	cpi	r24, 0x04	; 4
    137c:	71 f4       	brne	.+28     	; 0x139a <TIM0_voidChangeMode+0x9a>
	{SET_BIT(TCCR0,6);
    137e:	a3 e5       	ldi	r26, 0x53	; 83
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e3 e5       	ldi	r30, 0x53	; 83
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	80 64       	ori	r24, 0x40	; 64
    138a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);}
    138c:	a3 e5       	ldi	r26, 0x53	; 83
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e3 e5       	ldi	r30, 0x53	; 83
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	87 7f       	andi	r24, 0xF7	; 247
    1398:	8c 93       	st	X, r24
	else
	{
		/* Nothing */
	}
}
    139a:	0f 90       	pop	r0
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <__vector_11>:

/* Overflow ISR */

void __vector_11 (void)  __attribute__ ((signal,used));
void __vector_11 (void)
{
    13a2:	1f 92       	push	r1
    13a4:	0f 92       	push	r0
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	0f 92       	push	r0
    13aa:	11 24       	eor	r1, r1
    13ac:	2f 93       	push	r18
    13ae:	3f 93       	push	r19
    13b0:	4f 93       	push	r20
    13b2:	5f 93       	push	r21
    13b4:	6f 93       	push	r22
    13b6:	7f 93       	push	r23
    13b8:	8f 93       	push	r24
    13ba:	9f 93       	push	r25
    13bc:	af 93       	push	r26
    13be:	bf 93       	push	r27
    13c0:	ef 93       	push	r30
    13c2:	ff 93       	push	r31
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
	TIM0_pfOVFCallBack();
    13cc:	e0 91 f7 00 	lds	r30, 0x00F7
    13d0:	f0 91 f8 00 	lds	r31, 0x00F8
    13d4:	09 95       	icall
}
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	ff 91       	pop	r31
    13dc:	ef 91       	pop	r30
    13de:	bf 91       	pop	r27
    13e0:	af 91       	pop	r26
    13e2:	9f 91       	pop	r25
    13e4:	8f 91       	pop	r24
    13e6:	7f 91       	pop	r23
    13e8:	6f 91       	pop	r22
    13ea:	5f 91       	pop	r21
    13ec:	4f 91       	pop	r20
    13ee:	3f 91       	pop	r19
    13f0:	2f 91       	pop	r18
    13f2:	0f 90       	pop	r0
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	0f 90       	pop	r0
    13f8:	1f 90       	pop	r1
    13fa:	18 95       	reti

000013fc <__vector_10>:

/* Compare ISR */

void __vector_10 (void)  __attribute__ ((signal,used));
void __vector_10 (void)
{
    13fc:	1f 92       	push	r1
    13fe:	0f 92       	push	r0
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	0f 92       	push	r0
    1404:	11 24       	eor	r1, r1
    1406:	2f 93       	push	r18
    1408:	3f 93       	push	r19
    140a:	4f 93       	push	r20
    140c:	5f 93       	push	r21
    140e:	6f 93       	push	r22
    1410:	7f 93       	push	r23
    1412:	8f 93       	push	r24
    1414:	9f 93       	push	r25
    1416:	af 93       	push	r26
    1418:	bf 93       	push	r27
    141a:	ef 93       	push	r30
    141c:	ff 93       	push	r31
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
	TIM0_pfCompareCallBack();
    1426:	e0 91 f9 00 	lds	r30, 0x00F9
    142a:	f0 91 fa 00 	lds	r31, 0x00FA
    142e:	09 95       	icall
}
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	ff 91       	pop	r31
    1436:	ef 91       	pop	r30
    1438:	bf 91       	pop	r27
    143a:	af 91       	pop	r26
    143c:	9f 91       	pop	r25
    143e:	8f 91       	pop	r24
    1440:	7f 91       	pop	r23
    1442:	6f 91       	pop	r22
    1444:	5f 91       	pop	r21
    1446:	4f 91       	pop	r20
    1448:	3f 91       	pop	r19
    144a:	2f 91       	pop	r18
    144c:	0f 90       	pop	r0
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	0f 90       	pop	r0
    1452:	1f 90       	pop	r1
    1454:	18 95       	reti

00001456 <GIE_voidEnable>:
#include "GIE_Interface.h"
#include "GIE_Private.h"


void GIE_voidEnable(void)
{
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,INTERRUPT_PIN);
    145e:	af e5       	ldi	r26, 0x5F	; 95
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	ef e5       	ldi	r30, 0x5F	; 95
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	80 68       	ori	r24, 0x80	; 128
    146a:	8c 93       	st	X, r24
}
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,INTERRUPT_PIN);
    147a:	af e5       	ldi	r26, 0x5F	; 95
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	ef e5       	ldi	r30, 0x5F	; 95
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	8f 77       	andi	r24, 0x7F	; 127
    1486:	8c 93       	st	X, r24
}
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <EXTINTO_voidEnable>:
#include "EXTINT0_Config.h"

pf EXTINT0_pfCall;

void EXTINTO_voidEnable(void)
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,6);
    1496:	ab e5       	ldi	r26, 0x5B	; 91
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	eb e5       	ldi	r30, 0x5B	; 91
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	80 64       	ori	r24, 0x40	; 64
    14a2:	8c 93       	st	X, r24
}
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <EXTINTO_voidDisable>:

void EXTINTO_voidDisable(void)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,6);
    14b2:	ab e5       	ldi	r26, 0x5B	; 91
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	eb e5       	ldi	r30, 0x5B	; 91
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	8f 7b       	andi	r24, 0xBF	; 191
    14be:	8c 93       	st	X, r24
}
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <EXTINT0_voidInit>:

void EXTINT0_voidInit(void)
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif EXTINT0_SENSE_MODE == EXTINTO_ON_CHANGE
	SET_BIT(MCUCR,0);
	CLR_BIT(MCUCR,1);
#elif EXTINT0_SENSE_MODE == EXTINTO_FALLING_EDGE
	CLR_BIT(MCUCR,0);
    14ce:	a5 e5       	ldi	r26, 0x55	; 85
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e5 e5       	ldi	r30, 0x55	; 85
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	8e 7f       	andi	r24, 0xFE	; 254
    14da:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
    14dc:	a5 e5       	ldi	r26, 0x55	; 85
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e5 e5       	ldi	r30, 0x55	; 85
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	82 60       	ori	r24, 0x02	; 2
    14e8:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
#else //default as Falling edge
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#endif
}
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <EXTINT0_voidChangeSense>:

void EXTINT0_voidChangeSense(uint8 u8SenseStateCpy)
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <EXTINT0_voidChangeSense+0x6>
    14f6:	0f 92       	push	r0
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	89 83       	std	Y+1, r24	; 0x01
	switch(u8SenseStateCpy)
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	3b 83       	std	Y+3, r19	; 0x03
    1506:	2a 83       	std	Y+2, r18	; 0x02
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	9b 81       	ldd	r25, Y+3	; 0x03
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	91 05       	cpc	r25, r1
    1510:	21 f1       	breq	.+72     	; 0x155a <EXTINT0_voidChangeSense+0x6a>
    1512:	2a 81       	ldd	r18, Y+2	; 0x02
    1514:	3b 81       	ldd	r19, Y+3	; 0x03
    1516:	22 30       	cpi	r18, 0x02	; 2
    1518:	31 05       	cpc	r19, r1
    151a:	2c f4       	brge	.+10     	; 0x1526 <EXTINT0_voidChangeSense+0x36>
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	9b 81       	ldd	r25, Y+3	; 0x03
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	61 f0       	breq	.+24     	; 0x153c <EXTINT0_voidChangeSense+0x4c>
    1524:	47 c0       	rjmp	.+142    	; 0x15b4 <EXTINT0_voidChangeSense+0xc4>
    1526:	2a 81       	ldd	r18, Y+2	; 0x02
    1528:	3b 81       	ldd	r19, Y+3	; 0x03
    152a:	22 30       	cpi	r18, 0x02	; 2
    152c:	31 05       	cpc	r19, r1
    152e:	21 f1       	breq	.+72     	; 0x1578 <EXTINT0_voidChangeSense+0x88>
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	9b 81       	ldd	r25, Y+3	; 0x03
    1534:	83 30       	cpi	r24, 0x03	; 3
    1536:	91 05       	cpc	r25, r1
    1538:	71 f1       	breq	.+92     	; 0x1596 <EXTINT0_voidChangeSense+0xa6>
    153a:	3c c0       	rjmp	.+120    	; 0x15b4 <EXTINT0_voidChangeSense+0xc4>
	{
	case EXTINTO_LOW_LEVEL:
		CLR_BIT(MCUCR,0);
    153c:	a5 e5       	ldi	r26, 0x55	; 85
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e5 e5       	ldi	r30, 0x55	; 85
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	8e 7f       	andi	r24, 0xFE	; 254
    1548:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,1);
    154a:	a5 e5       	ldi	r26, 0x55	; 85
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e5 e5       	ldi	r30, 0x55	; 85
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	8d 7f       	andi	r24, 0xFD	; 253
    1556:	8c 93       	st	X, r24
    1558:	3b c0       	rjmp	.+118    	; 0x15d0 <EXTINT0_voidChangeSense+0xe0>
		break;
	case EXTINTO_ON_CHANGE:
		SET_BIT(MCUCR,0);
    155a:	a5 e5       	ldi	r26, 0x55	; 85
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e5 e5       	ldi	r30, 0x55	; 85
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	81 60       	ori	r24, 0x01	; 1
    1566:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,1);
    1568:	a5 e5       	ldi	r26, 0x55	; 85
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e5 e5       	ldi	r30, 0x55	; 85
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	8d 7f       	andi	r24, 0xFD	; 253
    1574:	8c 93       	st	X, r24
    1576:	2c c0       	rjmp	.+88     	; 0x15d0 <EXTINT0_voidChangeSense+0xe0>
		break;
	case EXTINTO_FALLING_EDGE:
		CLR_BIT(MCUCR,0);
    1578:	a5 e5       	ldi	r26, 0x55	; 85
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e5 e5       	ldi	r30, 0x55	; 85
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	8e 7f       	andi	r24, 0xFE	; 254
    1584:	8c 93       	st	X, r24
		SET_BIT(MCUCR,1);
    1586:	a5 e5       	ldi	r26, 0x55	; 85
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e5 e5       	ldi	r30, 0x55	; 85
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	82 60       	ori	r24, 0x02	; 2
    1592:	8c 93       	st	X, r24
    1594:	1d c0       	rjmp	.+58     	; 0x15d0 <EXTINT0_voidChangeSense+0xe0>
		break;
	case EXTINTO_RISING_EDGE:
		SET_BIT(MCUCR,0);
    1596:	a5 e5       	ldi	r26, 0x55	; 85
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e5 e5       	ldi	r30, 0x55	; 85
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	81 60       	ori	r24, 0x01	; 1
    15a2:	8c 93       	st	X, r24
		SET_BIT(MCUCR,1);
    15a4:	a5 e5       	ldi	r26, 0x55	; 85
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e5 e5       	ldi	r30, 0x55	; 85
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	82 60       	ori	r24, 0x02	; 2
    15b0:	8c 93       	st	X, r24
    15b2:	0e c0       	rjmp	.+28     	; 0x15d0 <EXTINT0_voidChangeSense+0xe0>
		break;
	default:  //default as Falling edge
		CLR_BIT(MCUCR,0);
    15b4:	a5 e5       	ldi	r26, 0x55	; 85
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e5 e5       	ldi	r30, 0x55	; 85
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	8e 7f       	andi	r24, 0xFE	; 254
    15c0:	8c 93       	st	X, r24
		SET_BIT(MCUCR,1);
    15c2:	a5 e5       	ldi	r26, 0x55	; 85
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e5 e5       	ldi	r30, 0x55	; 85
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	82 60       	ori	r24, 0x02	; 2
    15ce:	8c 93       	st	X, r24
		break;
	}
}
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <EXTINT0_voidSetCallBack>:

void EXTINT0_voidSetCallBack(pf pfCallBack)
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <EXTINT0_voidSetCallBack+0x6>
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	9a 83       	std	Y+2, r25	; 0x02
    15e8:	89 83       	std	Y+1, r24	; 0x01
	EXTINT0_pfCall =pfCallBack;
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	9a 81       	ldd	r25, Y+2	; 0x02
    15ee:	90 93 fc 00 	sts	0x00FC, r25
    15f2:	80 93 fb 00 	sts	0x00FB, r24
}
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <__vector_1>:

void __vector_1(void)  __attribute__ ((signal,used)); //for optimize

void __vector_1(void)
{
    1600:	1f 92       	push	r1
    1602:	0f 92       	push	r0
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	0f 92       	push	r0
    1608:	11 24       	eor	r1, r1
    160a:	2f 93       	push	r18
    160c:	3f 93       	push	r19
    160e:	4f 93       	push	r20
    1610:	5f 93       	push	r21
    1612:	6f 93       	push	r22
    1614:	7f 93       	push	r23
    1616:	8f 93       	push	r24
    1618:	9f 93       	push	r25
    161a:	af 93       	push	r26
    161c:	bf 93       	push	r27
    161e:	ef 93       	push	r30
    1620:	ff 93       	push	r31
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
	EXTINT0_pfCall();
    162a:	e0 91 fb 00 	lds	r30, 0x00FB
    162e:	f0 91 fc 00 	lds	r31, 0x00FC
    1632:	09 95       	icall
}
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	ff 91       	pop	r31
    163a:	ef 91       	pop	r30
    163c:	bf 91       	pop	r27
    163e:	af 91       	pop	r26
    1640:	9f 91       	pop	r25
    1642:	8f 91       	pop	r24
    1644:	7f 91       	pop	r23
    1646:	6f 91       	pop	r22
    1648:	5f 91       	pop	r21
    164a:	4f 91       	pop	r20
    164c:	3f 91       	pop	r19
    164e:	2f 91       	pop	r18
    1650:	0f 90       	pop	r0
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	0f 90       	pop	r0
    1656:	1f 90       	pop	r1
    1658:	18 95       	reti

0000165a <DIO_voidInit>:
#include "../../LIB/BIT_MATH.h"
#include "DIO_Config.h"
#include "DIO_Interface.h"
#include "DIO_Private.h"

DIO_voidInit(){
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
	DDRA=CONC(DIO_PIN_NUM_A7_DIR,DIO_PIN_NUM_A6_DIR,DIO_PIN_NUM_A5_DIR,DIO_PIN_NUM_A4_DIR,DIO_PIN_NUM_A3_DIR,DIO_PIN_NUM_A2_DIR,DIO_PIN_NUM_A1_DIR,DIO_PIN_NUM_A0_DIR);
    1662:	ea e3       	ldi	r30, 0x3A	; 58
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	8f ef       	ldi	r24, 0xFF	; 255
    1668:	80 83       	st	Z, r24
	DDRB=CONC(DIO_PIN_NUM_B7_DIR,DIO_PIN_NUM_B6_DIR,DIO_PIN_NUM_B5_DIR,DIO_PIN_NUM_B4_DIR,DIO_PIN_NUM_B3_DIR,DIO_PIN_NUM_B2_DIR,DIO_PIN_NUM_B1_DIR,DIO_PIN_NUM_B0_DIR);
    166a:	e7 e3       	ldi	r30, 0x37	; 55
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	8f ef       	ldi	r24, 0xFF	; 255
    1670:	80 83       	st	Z, r24
	DDRC=CONC(DIO_PIN_NUM_C7_DIR,DIO_PIN_NUM_C6_DIR,DIO_PIN_NUM_C5_DIR,DIO_PIN_NUM_C4_DIR,DIO_PIN_NUM_C3_DIR,DIO_PIN_NUM_C2_DIR,DIO_PIN_NUM_C1_DIR,DIO_PIN_NUM_C0_DIR);
    1672:	e4 e3       	ldi	r30, 0x34	; 52
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	8f ef       	ldi	r24, 0xFF	; 255
    1678:	80 83       	st	Z, r24
	DDRD=CONC(DIO_PIN_NUM_D7_DIR,DIO_PIN_NUM_D6_DIR,DIO_PIN_NUM_D5_DIR,DIO_PIN_NUM_D4_DIR,DIO_PIN_NUM_D3_DIR,DIO_PIN_NUM_D2_DIR,DIO_PIN_NUM_D1_DIR,DIO_PIN_NUM_D0_DIR);
    167a:	e1 e3       	ldi	r30, 0x31	; 49
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 ef       	ldi	r24, 0xF0	; 240
    1680:	80 83       	st	Z, r24
}
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <DIO_enuWritePin>:

tenuErrorStatus DIO_enuWritePin(uint8 u8PinNumCpy, uint8 u8PinValueCpy){
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	2b 97       	sbiw	r28, 0x0b	; 11
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	de bf       	out	0x3e, r29	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	cd bf       	out	0x3d, r28	; 61
    169c:	8a 83       	std	Y+2, r24	; 0x02
    169e:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnStateLoc =EOK ;
    16a0:	19 82       	std	Y+1, r1	; 0x01


		if (u8PinNumCpy>=DIO_PIN_NUM_A0  && u8PinNumCpy<= DIO_PIN_NUM_A7)
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	88 30       	cpi	r24, 0x08	; 8
    16a6:	d0 f5       	brcc	.+116    	; 0x171c <DIO_enuWritePin+0x94>
		{
			switch(u8PinValueCpy)
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	3b 87       	std	Y+11, r19	; 0x0b
    16b0:	2a 87       	std	Y+10, r18	; 0x0a
    16b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    16b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	c9 f0       	breq	.+50     	; 0x16ec <DIO_enuWritePin+0x64>
    16ba:	2a 85       	ldd	r18, Y+10	; 0x0a
    16bc:	3b 85       	ldd	r19, Y+11	; 0x0b
    16be:	21 30       	cpi	r18, 0x01	; 1
    16c0:	31 05       	cpc	r19, r1
    16c2:	49 f5       	brne	.+82     	; 0x1716 <DIO_enuWritePin+0x8e>
			{
				case DIO_HIGH :
				SET_BIT(PORTA ,u8PinNumCpy);
    16c4:	ab e3       	ldi	r26, 0x3B	; 59
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	eb e3       	ldi	r30, 0x3B	; 59
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	48 2f       	mov	r20, r24
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 2e       	mov	r0, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <DIO_enuWritePin+0x5a>
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	0a 94       	dec	r0
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <DIO_enuWritePin+0x56>
    16e6:	84 2b       	or	r24, r20
    16e8:	8c 93       	st	X, r24
    16ea:	f2 c0       	rjmp	.+484    	; 0x18d0 <DIO_enuWritePin+0x248>
				break;
				case DIO_LOW :
				CLR_BIT(PORTA,u8PinNumCpy);
    16ec:	ab e3       	ldi	r26, 0x3B	; 59
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	eb e3       	ldi	r30, 0x3B	; 59
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	48 2f       	mov	r20, r24
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	02 2e       	mov	r0, r18
    1704:	02 c0       	rjmp	.+4      	; 0x170a <DIO_enuWritePin+0x82>
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	0a 94       	dec	r0
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <DIO_enuWritePin+0x7e>
    170e:	80 95       	com	r24
    1710:	84 23       	and	r24, r20
    1712:	8c 93       	st	X, r24
    1714:	dd c0       	rjmp	.+442    	; 0x18d0 <DIO_enuWritePin+0x248>
				break;
				default :
				enuReturnStateLoc = PARAMRETER_OUT_RANGE;
    1716:	82 e0       	ldi	r24, 0x02	; 2
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	da c0       	rjmp	.+436    	; 0x18d0 <DIO_enuWritePin+0x248>
				break;

			}
		}
		else if (u8PinNumCpy>=DIO_PIN_NUM_B0 && u8PinNumCpy<=DIO_PIN_NUM_B7)
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	88 30       	cpi	r24, 0x08	; 8
    1720:	08 f4       	brcc	.+2      	; 0x1724 <DIO_enuWritePin+0x9c>
    1722:	44 c0       	rjmp	.+136    	; 0x17ac <DIO_enuWritePin+0x124>
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	80 31       	cpi	r24, 0x10	; 16
    1728:	08 f0       	brcs	.+2      	; 0x172c <DIO_enuWritePin+0xa4>
    172a:	40 c0       	rjmp	.+128    	; 0x17ac <DIO_enuWritePin+0x124>
		{
			switch(u8PinValueCpy)
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	39 87       	std	Y+9, r19	; 0x09
    1734:	28 87       	std	Y+8, r18	; 0x08
    1736:	88 85       	ldd	r24, Y+8	; 0x08
    1738:	99 85       	ldd	r25, Y+9	; 0x09
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	e1 f0       	breq	.+56     	; 0x1776 <DIO_enuWritePin+0xee>
    173e:	28 85       	ldd	r18, Y+8	; 0x08
    1740:	39 85       	ldd	r19, Y+9	; 0x09
    1742:	21 30       	cpi	r18, 0x01	; 1
    1744:	31 05       	cpc	r19, r1
    1746:	79 f5       	brne	.+94     	; 0x17a6 <DIO_enuWritePin+0x11e>
			{
				case DIO_HIGH :
				SET_BIT(PORTB ,u8PinNumCpy%8);
    1748:	a8 e3       	ldi	r26, 0x38	; 56
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e8 e3       	ldi	r30, 0x38	; 56
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	48 2f       	mov	r20, r24
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	88 2f       	mov	r24, r24
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	9c 01       	movw	r18, r24
    175c:	27 70       	andi	r18, 0x07	; 7
    175e:	30 70       	andi	r19, 0x00	; 0
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 2e       	mov	r0, r18
    1766:	02 c0       	rjmp	.+4      	; 0x176c <DIO_enuWritePin+0xe4>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	0a 94       	dec	r0
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <DIO_enuWritePin+0xe0>
    1770:	84 2b       	or	r24, r20
    1772:	8c 93       	st	X, r24
    1774:	ad c0       	rjmp	.+346    	; 0x18d0 <DIO_enuWritePin+0x248>
				break;
				case DIO_LOW :
				CLR_BIT(PORTB,u8PinNumCpy%8);  //-8
    1776:	a8 e3       	ldi	r26, 0x38	; 56
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e8 e3       	ldi	r30, 0x38	; 56
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	48 2f       	mov	r20, r24
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	88 2f       	mov	r24, r24
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9c 01       	movw	r18, r24
    178a:	27 70       	andi	r18, 0x07	; 7
    178c:	30 70       	andi	r19, 0x00	; 0
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 2e       	mov	r0, r18
    1794:	02 c0       	rjmp	.+4      	; 0x179a <DIO_enuWritePin+0x112>
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	0a 94       	dec	r0
    179c:	e2 f7       	brpl	.-8      	; 0x1796 <DIO_enuWritePin+0x10e>
    179e:	80 95       	com	r24
    17a0:	84 23       	and	r24, r20
    17a2:	8c 93       	st	X, r24
    17a4:	95 c0       	rjmp	.+298    	; 0x18d0 <DIO_enuWritePin+0x248>
				break;
				default :
				enuReturnStateLoc = PARAMRETER_OUT_RANGE;
    17a6:	82 e0       	ldi	r24, 0x02	; 2
    17a8:	89 83       	std	Y+1, r24	; 0x01
    17aa:	92 c0       	rjmp	.+292    	; 0x18d0 <DIO_enuWritePin+0x248>
				break;

			}

		}
		else if (u8PinNumCpy>=DIO_PIN_NUM_C0 && u8PinNumCpy<=DIO_PIN_NUM_C7)
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	80 31       	cpi	r24, 0x10	; 16
    17b0:	08 f4       	brcc	.+2      	; 0x17b4 <DIO_enuWritePin+0x12c>
    17b2:	44 c0       	rjmp	.+136    	; 0x183c <DIO_enuWritePin+0x1b4>
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	88 31       	cpi	r24, 0x18	; 24
    17b8:	08 f0       	brcs	.+2      	; 0x17bc <DIO_enuWritePin+0x134>
    17ba:	40 c0       	rjmp	.+128    	; 0x183c <DIO_enuWritePin+0x1b4>
		{

			switch(u8PinValueCpy)
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	3f 83       	std	Y+7, r19	; 0x07
    17c4:	2e 83       	std	Y+6, r18	; 0x06
    17c6:	8e 81       	ldd	r24, Y+6	; 0x06
    17c8:	9f 81       	ldd	r25, Y+7	; 0x07
    17ca:	00 97       	sbiw	r24, 0x00	; 0
    17cc:	e1 f0       	breq	.+56     	; 0x1806 <DIO_enuWritePin+0x17e>
    17ce:	2e 81       	ldd	r18, Y+6	; 0x06
    17d0:	3f 81       	ldd	r19, Y+7	; 0x07
    17d2:	21 30       	cpi	r18, 0x01	; 1
    17d4:	31 05       	cpc	r19, r1
    17d6:	79 f5       	brne	.+94     	; 0x1836 <DIO_enuWritePin+0x1ae>
			{
				case DIO_HIGH :
				SET_BIT(PORTC ,u8PinNumCpy%8);  //-16
    17d8:	a5 e3       	ldi	r26, 0x35	; 53
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e5 e3       	ldi	r30, 0x35	; 53
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	48 2f       	mov	r20, r24
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	88 2f       	mov	r24, r24
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	9c 01       	movw	r18, r24
    17ec:	27 70       	andi	r18, 0x07	; 7
    17ee:	30 70       	andi	r19, 0x00	; 0
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 2e       	mov	r0, r18
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <DIO_enuWritePin+0x174>
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	0a 94       	dec	r0
    17fe:	e2 f7       	brpl	.-8      	; 0x17f8 <DIO_enuWritePin+0x170>
    1800:	84 2b       	or	r24, r20
    1802:	8c 93       	st	X, r24
    1804:	65 c0       	rjmp	.+202    	; 0x18d0 <DIO_enuWritePin+0x248>
				break;
				case DIO_LOW :
				CLR_BIT(PORTC,u8PinNumCpy%8);
    1806:	a5 e3       	ldi	r26, 0x35	; 53
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e5 e3       	ldi	r30, 0x35	; 53
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	48 2f       	mov	r20, r24
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	88 2f       	mov	r24, r24
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	9c 01       	movw	r18, r24
    181a:	27 70       	andi	r18, 0x07	; 7
    181c:	30 70       	andi	r19, 0x00	; 0
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	02 2e       	mov	r0, r18
    1824:	02 c0       	rjmp	.+4      	; 0x182a <DIO_enuWritePin+0x1a2>
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	0a 94       	dec	r0
    182c:	e2 f7       	brpl	.-8      	; 0x1826 <DIO_enuWritePin+0x19e>
    182e:	80 95       	com	r24
    1830:	84 23       	and	r24, r20
    1832:	8c 93       	st	X, r24
    1834:	4d c0       	rjmp	.+154    	; 0x18d0 <DIO_enuWritePin+0x248>
				break;
				default :
				enuReturnStateLoc = PARAMRETER_OUT_RANGE;
    1836:	82 e0       	ldi	r24, 0x02	; 2
    1838:	89 83       	std	Y+1, r24	; 0x01
    183a:	4a c0       	rjmp	.+148    	; 0x18d0 <DIO_enuWritePin+0x248>

			}


		}
		else if (u8PinNumCpy>=DIO_PIN_NUM_D0 && u8PinNumCpy<=DIO_PIN_NUM_D7)
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	88 31       	cpi	r24, 0x18	; 24
    1840:	08 f4       	brcc	.+2      	; 0x1844 <DIO_enuWritePin+0x1bc>
    1842:	44 c0       	rjmp	.+136    	; 0x18cc <DIO_enuWritePin+0x244>
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	80 32       	cpi	r24, 0x20	; 32
    1848:	08 f0       	brcs	.+2      	; 0x184c <DIO_enuWritePin+0x1c4>
    184a:	40 c0       	rjmp	.+128    	; 0x18cc <DIO_enuWritePin+0x244>
		{

			switch(u8PinValueCpy)
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	3d 83       	std	Y+5, r19	; 0x05
    1854:	2c 83       	std	Y+4, r18	; 0x04
    1856:	8c 81       	ldd	r24, Y+4	; 0x04
    1858:	9d 81       	ldd	r25, Y+5	; 0x05
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	e1 f0       	breq	.+56     	; 0x1896 <DIO_enuWritePin+0x20e>
    185e:	2c 81       	ldd	r18, Y+4	; 0x04
    1860:	3d 81       	ldd	r19, Y+5	; 0x05
    1862:	21 30       	cpi	r18, 0x01	; 1
    1864:	31 05       	cpc	r19, r1
    1866:	79 f5       	brne	.+94     	; 0x18c6 <DIO_enuWritePin+0x23e>
			{
				case DIO_HIGH :
				SET_BIT(PORTD ,(u8PinNumCpy%8));  //-16
    1868:	a2 e3       	ldi	r26, 0x32	; 50
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e2 e3       	ldi	r30, 0x32	; 50
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	48 2f       	mov	r20, r24
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	88 2f       	mov	r24, r24
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	9c 01       	movw	r18, r24
    187c:	27 70       	andi	r18, 0x07	; 7
    187e:	30 70       	andi	r19, 0x00	; 0
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	02 2e       	mov	r0, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <DIO_enuWritePin+0x204>
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	0a 94       	dec	r0
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <DIO_enuWritePin+0x200>
    1890:	84 2b       	or	r24, r20
    1892:	8c 93       	st	X, r24
    1894:	1d c0       	rjmp	.+58     	; 0x18d0 <DIO_enuWritePin+0x248>
				break;
				case DIO_LOW :
				CLR_BIT(PORTD,(u8PinNumCpy%8));
    1896:	a2 e3       	ldi	r26, 0x32	; 50
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e2 e3       	ldi	r30, 0x32	; 50
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	48 2f       	mov	r20, r24
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	88 2f       	mov	r24, r24
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	9c 01       	movw	r18, r24
    18aa:	27 70       	andi	r18, 0x07	; 7
    18ac:	30 70       	andi	r19, 0x00	; 0
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	02 2e       	mov	r0, r18
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <DIO_enuWritePin+0x232>
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	0a 94       	dec	r0
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <DIO_enuWritePin+0x22e>
    18be:	80 95       	com	r24
    18c0:	84 23       	and	r24, r20
    18c2:	8c 93       	st	X, r24
    18c4:	05 c0       	rjmp	.+10     	; 0x18d0 <DIO_enuWritePin+0x248>
				break;
				default :
				enuReturnStateLoc = PARAMRETER_OUT_RANGE;
    18c6:	82 e0       	ldi	r24, 0x02	; 2
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <DIO_enuWritePin+0x248>


		}
		else
		{
			enuReturnStateLoc=PARAMRETER_OUT_RANGE;
    18cc:	82 e0       	ldi	r24, 0x02	; 2
    18ce:	89 83       	std	Y+1, r24	; 0x01
		}


		return enuReturnStateLoc;
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18d2:	2b 96       	adiw	r28, 0x0b	; 11
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	cf 91       	pop	r28
    18e0:	df 91       	pop	r29
    18e2:	08 95       	ret

000018e4 <DIO_enuReadPin>:

tenuErrorStatus DIO_enuReadPin(uint8 u8PinNumCpy, uint8* pu8PinValue){
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	00 d0       	rcall	.+0      	; 0x18ea <DIO_enuReadPin+0x6>
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <DIO_enuReadPin+0x8>
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
    18f0:	8a 83       	std	Y+2, r24	; 0x02
    18f2:	7c 83       	std	Y+4, r23	; 0x04
    18f4:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnStateLoc =EOK ;
    18f6:	19 82       	std	Y+1, r1	; 0x01


		if (pu8PinValue!= NULL_PTR)
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	9c 81       	ldd	r25, Y+4	; 0x04
    18fc:	00 97       	sbiw	r24, 0x00	; 0
    18fe:	09 f4       	brne	.+2      	; 0x1902 <DIO_enuReadPin+0x1e>
    1900:	6e c0       	rjmp	.+220    	; 0x19de <DIO_enuReadPin+0xfa>
		{
			if (u8PinNumCpy>=DIO_PIN_NUM_A0  && u8PinNumCpy<= DIO_PIN_NUM_A7)
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	88 30       	cpi	r24, 0x08	; 8
    1906:	a0 f4       	brcc	.+40     	; 0x1930 <DIO_enuReadPin+0x4c>
			{

				*pu8PinValue=GET_BIT(PINA,u8PinNumCpy);
    1908:	e9 e3       	ldi	r30, 0x39	; 57
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	88 2f       	mov	r24, r24
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	a9 01       	movw	r20, r18
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <DIO_enuReadPin+0x3c>
    191c:	55 95       	asr	r21
    191e:	47 95       	ror	r20
    1920:	8a 95       	dec	r24
    1922:	e2 f7       	brpl	.-8      	; 0x191c <DIO_enuReadPin+0x38>
    1924:	ca 01       	movw	r24, r20
    1926:	81 70       	andi	r24, 0x01	; 1
    1928:	eb 81       	ldd	r30, Y+3	; 0x03
    192a:	fc 81       	ldd	r31, Y+4	; 0x04
    192c:	80 83       	st	Z, r24
    192e:	59 c0       	rjmp	.+178    	; 0x19e2 <DIO_enuReadPin+0xfe>
			}
			else if (u8PinNumCpy>=DIO_PIN_NUM_B0 && u8PinNumCpy<=DIO_PIN_NUM_B7)
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	88 30       	cpi	r24, 0x08	; 8
    1934:	c8 f0       	brcs	.+50     	; 0x1968 <DIO_enuReadPin+0x84>
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	80 31       	cpi	r24, 0x10	; 16
    193a:	b0 f4       	brcc	.+44     	; 0x1968 <DIO_enuReadPin+0x84>
			{
				*pu8PinValue=GET_BIT(PINB,u8PinNumCpy%8);
    193c:	e6 e3       	ldi	r30, 0x36	; 54
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	88 2f       	mov	r24, r24
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	87 70       	andi	r24, 0x07	; 7
    194e:	90 70       	andi	r25, 0x00	; 0
    1950:	a9 01       	movw	r20, r18
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <DIO_enuReadPin+0x74>
    1954:	55 95       	asr	r21
    1956:	47 95       	ror	r20
    1958:	8a 95       	dec	r24
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <DIO_enuReadPin+0x70>
    195c:	ca 01       	movw	r24, r20
    195e:	81 70       	andi	r24, 0x01	; 1
    1960:	eb 81       	ldd	r30, Y+3	; 0x03
    1962:	fc 81       	ldd	r31, Y+4	; 0x04
    1964:	80 83       	st	Z, r24
    1966:	3d c0       	rjmp	.+122    	; 0x19e2 <DIO_enuReadPin+0xfe>
			}
			else if (u8PinNumCpy>=DIO_PIN_NUM_C0 && u8PinNumCpy<=DIO_PIN_NUM_C7)
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	80 31       	cpi	r24, 0x10	; 16
    196c:	c8 f0       	brcs	.+50     	; 0x19a0 <DIO_enuReadPin+0xbc>
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	88 31       	cpi	r24, 0x18	; 24
    1972:	b0 f4       	brcc	.+44     	; 0x19a0 <DIO_enuReadPin+0xbc>
			{
				*pu8PinValue=GET_BIT(PINC,u8PinNumCpy%8);
    1974:	e3 e3       	ldi	r30, 0x33	; 51
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	88 2f       	mov	r24, r24
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	87 70       	andi	r24, 0x07	; 7
    1986:	90 70       	andi	r25, 0x00	; 0
    1988:	a9 01       	movw	r20, r18
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <DIO_enuReadPin+0xac>
    198c:	55 95       	asr	r21
    198e:	47 95       	ror	r20
    1990:	8a 95       	dec	r24
    1992:	e2 f7       	brpl	.-8      	; 0x198c <DIO_enuReadPin+0xa8>
    1994:	ca 01       	movw	r24, r20
    1996:	81 70       	andi	r24, 0x01	; 1
    1998:	eb 81       	ldd	r30, Y+3	; 0x03
    199a:	fc 81       	ldd	r31, Y+4	; 0x04
    199c:	80 83       	st	Z, r24
    199e:	21 c0       	rjmp	.+66     	; 0x19e2 <DIO_enuReadPin+0xfe>
			}
			else if (u8PinNumCpy>=DIO_PIN_NUM_D0 && u8PinNumCpy<=DIO_PIN_NUM_D7)
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	88 31       	cpi	r24, 0x18	; 24
    19a4:	c8 f0       	brcs	.+50     	; 0x19d8 <DIO_enuReadPin+0xf4>
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	80 32       	cpi	r24, 0x20	; 32
    19aa:	b0 f4       	brcc	.+44     	; 0x19d8 <DIO_enuReadPin+0xf4>
			{
				*pu8PinValue=GET_BIT(PIND,u8PinNumCpy%8);
    19ac:	e0 e3       	ldi	r30, 0x30	; 48
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	88 2f       	mov	r24, r24
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	87 70       	andi	r24, 0x07	; 7
    19be:	90 70       	andi	r25, 0x00	; 0
    19c0:	a9 01       	movw	r20, r18
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <DIO_enuReadPin+0xe4>
    19c4:	55 95       	asr	r21
    19c6:	47 95       	ror	r20
    19c8:	8a 95       	dec	r24
    19ca:	e2 f7       	brpl	.-8      	; 0x19c4 <DIO_enuReadPin+0xe0>
    19cc:	ca 01       	movw	r24, r20
    19ce:	81 70       	andi	r24, 0x01	; 1
    19d0:	eb 81       	ldd	r30, Y+3	; 0x03
    19d2:	fc 81       	ldd	r31, Y+4	; 0x04
    19d4:	80 83       	st	Z, r24
    19d6:	05 c0       	rjmp	.+10     	; 0x19e2 <DIO_enuReadPin+0xfe>
			}
			else
			{
				enuReturnStateLoc= PARAMRETER_OUT_RANGE;
    19d8:	82 e0       	ldi	r24, 0x02	; 2
    19da:	89 83       	std	Y+1, r24	; 0x01
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <DIO_enuReadPin+0xfe>
			}
		}
		else
		{
			enuReturnStateLoc = PARAMETER_NULL_PTR;
    19de:	83 e0       	ldi	r24, 0x03	; 3
    19e0:	89 83       	std	Y+1, r24	; 0x01
		}
		return enuReturnStateLoc;
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <DIO_enuWriteGroup>:

tenuErrorStatus DIO_enuWriteGroup(uint8* pau8PinNumCpy, uint8* pau8PinValueCpy,uint8 u8SizeCpy){
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	27 97       	sbiw	r28, 0x07	; 7
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	9c 83       	std	Y+4, r25	; 0x04
    1a08:	8b 83       	std	Y+3, r24	; 0x03
    1a0a:	7e 83       	std	Y+6, r23	; 0x06
    1a0c:	6d 83       	std	Y+5, r22	; 0x05
    1a0e:	4f 83       	std	Y+7, r20	; 0x07
	tenuErrorStatus enuReturnStateLoc =EOK;
    1a10:	1a 82       	std	Y+2, r1	; 0x02

		uint8 u8CounterLoc=0;
    1a12:	19 82       	std	Y+1, r1	; 0x01

		for(u8CounterLoc=0;u8CounterLoc< u8SizeCpy;u8CounterLoc++)
    1a14:	19 82       	std	Y+1, r1	; 0x01
    1a16:	1d c0       	rjmp	.+58     	; 0x1a52 <DIO_enuWriteGroup+0x60>
		{
			enuReturnStateLoc=DIO_enuWritePin(pau8PinNumCpy[u8CounterLoc],pau8PinValueCpy[u8CounterLoc]);
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	9c 81       	ldd	r25, Y+4	; 0x04
    1a22:	fc 01       	movw	r30, r24
    1a24:	e2 0f       	add	r30, r18
    1a26:	f3 1f       	adc	r31, r19
    1a28:	40 81       	ld	r20, Z
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	8d 81       	ldd	r24, Y+5	; 0x05
    1a32:	9e 81       	ldd	r25, Y+6	; 0x06
    1a34:	fc 01       	movw	r30, r24
    1a36:	e2 0f       	add	r30, r18
    1a38:	f3 1f       	adc	r31, r19
    1a3a:	90 81       	ld	r25, Z
    1a3c:	84 2f       	mov	r24, r20
    1a3e:	69 2f       	mov	r22, r25
    1a40:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>
    1a44:	8a 83       	std	Y+2, r24	; 0x02

			if (enuReturnStateLoc !=EOK)
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	88 23       	and	r24, r24
    1a4a:	39 f4       	brne	.+14     	; 0x1a5a <DIO_enuWriteGroup+0x68>
tenuErrorStatus DIO_enuWriteGroup(uint8* pau8PinNumCpy, uint8* pau8PinValueCpy,uint8 u8SizeCpy){
	tenuErrorStatus enuReturnStateLoc =EOK;

		uint8 u8CounterLoc=0;

		for(u8CounterLoc=0;u8CounterLoc< u8SizeCpy;u8CounterLoc++)
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	8f 5f       	subi	r24, 0xFF	; 255
    1a50:	89 83       	std	Y+1, r24	; 0x01
    1a52:	99 81       	ldd	r25, Y+1	; 0x01
    1a54:	8f 81       	ldd	r24, Y+7	; 0x07
    1a56:	98 17       	cp	r25, r24
    1a58:	f8 f2       	brcs	.-66     	; 0x1a18 <DIO_enuWriteGroup+0x26>
			{
				break;
			}
		}

		return enuReturnStateLoc;
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1a5c:	27 96       	adiw	r28, 0x07	; 7
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	de bf       	out	0x3e, r29	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	cd bf       	out	0x3d, r28	; 61
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	08 95       	ret

00001a6e <DIO_enuStatePullup>:

tenuErrorStatus DIO_enuStatePullup(uint8 u8PinNumCpy, uint8 u8StateCpy){
    1a6e:	df 93       	push	r29
    1a70:	cf 93       	push	r28
    1a72:	00 d0       	rcall	.+0      	; 0x1a74 <DIO_enuStatePullup+0x6>
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	89 83       	std	Y+1, r24	; 0x01
    1a7a:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_enuWritePin(u8PinNumCpy,u8StateCpy);
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	6a 81       	ldd	r22, Y+2	; 0x02
    1a80:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>
}
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	08 95       	ret

00001a8e <ADC_voidInit>:

pf ADC_pfCall = NULL_PTR ;
uint16 ADC_u16ReadValue ;

void ADC_voidInit(void)
{
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
#if ADC_RES_MODE  ==  ADC_8BIT
	SET_BIT(ADCMUX , 5 ) ;
#else 
	CLR_BIT(ADCMUX , 5 ) ;
    1a96:	a7 e2       	ldi	r26, 0x27	; 39
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	e7 e2       	ldi	r30, 0x27	; 39
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	8f 7d       	andi	r24, 0xDF	; 223
    1aa2:	8c 93       	st	X, r24
	
#if  ADC_VOLTAGE_REF == ADC_AREF
	CLR_BIT(ADCMUX , 6 ) ;
	CLR_BIT(ADCMUX , 7 ) ;
#elif  ADC_VOLTAGE_REF == ADC_AVCC_REF
	SET_BIT(ADCMUX , 6 ) ;
    1aa4:	a7 e2       	ldi	r26, 0x27	; 39
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e7 e2       	ldi	r30, 0x27	; 39
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	80 64       	ori	r24, 0x40	; 64
    1ab0:	8c 93       	st	X, r24
	CLR_BIT(ADCMUX , 7 ) ;
    1ab2:	a7 e2       	ldi	r26, 0x27	; 39
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e7 e2       	ldi	r30, 0x27	; 39
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	8f 77       	andi	r24, 0x7F	; 127
    1abe:	8c 93       	st	X, r24
	SET_BIT(ADCMUX , 6 ) ;
	SET_BIT(ADCMUX , 7 ) ;
	
#endif

ADCSRA &= 0b11111000;
    1ac0:	a6 e2       	ldi	r26, 0x26	; 38
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e6 e2       	ldi	r30, 0x26	; 38
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	88 7f       	andi	r24, 0xF8	; 248
    1acc:	8c 93       	st	X, r24
ADCSRA |=ADC_PRESCALLER ;
    1ace:	a6 e2       	ldi	r26, 0x26	; 38
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	e6 e2       	ldi	r30, 0x26	; 38
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	85 60       	ori	r24, 0x05	; 5
    1ada:	8c 93       	st	X, r24

#if ADC_TRIGGER_MODE ==ADC_SGL_MODE
    CLR_BIT(ADCSRA , 5) ;
    1adc:	a6 e2       	ldi	r26, 0x26	; 38
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e6 e2       	ldi	r30, 0x26	; 38
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	8f 7d       	andi	r24, 0xDF	; 223
    1ae8:	8c 93       	st	X, r24
	SFIOR |=ADC_TRIGGER_MODE<<5;
#endif
	


}
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <ADC_voidEnable>:
void ADC_voidEnable(void)
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA , 7);
    1af8:	a6 e2       	ldi	r26, 0x26	; 38
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e6 e2       	ldi	r30, 0x26	; 38
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	80 68       	ori	r24, 0x80	; 128
    1b04:	8c 93       	st	X, r24
}
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <ADC_voidDisable>:
void ADC_voidDisable(void)
{
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA , 7);
    1b14:	a6 e2       	ldi	r26, 0x26	; 38
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e6 e2       	ldi	r30, 0x26	; 38
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	8f 77       	andi	r24, 0x7F	; 127
    1b20:	8c 93       	st	X, r24
}
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	08 95       	ret

00001b28 <ADC_voidEnableInterrupt>:
void ADC_voidEnableInterrupt(void)
{
    1b28:	df 93       	push	r29
    1b2a:	cf 93       	push	r28
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA , 3);
    1b30:	a6 e2       	ldi	r26, 0x26	; 38
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e6 e2       	ldi	r30, 0x26	; 38
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	88 60       	ori	r24, 0x08	; 8
    1b3c:	8c 93       	st	X, r24
}
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <ADC_voidDisableInterrupt>:
void ADC_voidDisableInterrupt(void)
{
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA , 3);
    1b4c:	a6 e2       	ldi	r26, 0x26	; 38
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e6 e2       	ldi	r30, 0x26	; 38
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	87 7f       	andi	r24, 0xF7	; 247
    1b58:	8c 93       	st	X, r24
}
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <ADC_voidSetCallback>:
void ADC_voidSetCallback(pf pfCallbackCpy)
{
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <ADC_voidSetCallback+0x6>
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	9a 83       	std	Y+2, r25	; 0x02
    1b6c:	89 83       	std	Y+1, r24	; 0x01
	ADC_pfCall = pfCallbackCpy ;
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	9a 81       	ldd	r25, Y+2	; 0x02
    1b72:	90 93 eb 00 	sts	0x00EB, r25
    1b76:	80 93 ea 00 	sts	0x00EA, r24
}
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret

00001b84 <ADC_voidStartConversion>:
void ADC_voidStartConversion(uint8 u8ChannelNbCpy)
{
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	0f 92       	push	r0
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
    1b8e:	89 83       	std	Y+1, r24	; 0x01
	ADCMUX &= 0b11100000  ;
    1b90:	a7 e2       	ldi	r26, 0x27	; 39
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	e7 e2       	ldi	r30, 0x27	; 39
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	80 7e       	andi	r24, 0xE0	; 224
    1b9c:	8c 93       	st	X, r24
	ADCMUX |= u8ChannelNbCpy ;
    1b9e:	a7 e2       	ldi	r26, 0x27	; 39
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e7 e2       	ldi	r30, 0x27	; 39
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	90 81       	ld	r25, Z
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	89 2b       	or	r24, r25
    1bac:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , 6) ;
    1bae:	a6 e2       	ldi	r26, 0x26	; 38
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	e6 e2       	ldi	r30, 0x26	; 38
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	80 64       	ori	r24, 0x40	; 64
    1bba:	8c 93       	st	X, r24
}
    1bbc:	0f 90       	pop	r0
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <ADC_voidChangeMode>:
void ADC_voidChangeMode(uint8 u8ModeCpy)
{
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	0f 92       	push	r0
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	89 83       	std	Y+1, r24	; 0x01
	if (u8ModeCpy < ADC_SGL_MODE )
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	89 30       	cpi	r24, 0x09	; 9
    1bd4:	10 f5       	brcc	.+68     	; 0x1c1a <ADC_voidChangeMode+0x56>
	{
		SET_BIT(ADCSRA , 5) ;
    1bd6:	a6 e2       	ldi	r26, 0x26	; 38
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e6 e2       	ldi	r30, 0x26	; 38
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	80 62       	ori	r24, 0x20	; 32
    1be2:	8c 93       	st	X, r24
		SFIOR &=0b00011111;
    1be4:	a0 e5       	ldi	r26, 0x50	; 80
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e0 e5       	ldi	r30, 0x50	; 80
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	8f 71       	andi	r24, 0x1F	; 31
    1bf0:	8c 93       	st	X, r24
		SFIOR |=u8ModeCpy<<5;
    1bf2:	a0 e5       	ldi	r26, 0x50	; 80
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e0 e5       	ldi	r30, 0x50	; 80
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	88 2f       	mov	r24, r24
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	82 95       	swap	r24
    1c0a:	92 95       	swap	r25
    1c0c:	90 7f       	andi	r25, 0xF0	; 240
    1c0e:	98 27       	eor	r25, r24
    1c10:	80 7f       	andi	r24, 0xF0	; 240
    1c12:	98 27       	eor	r25, r24
    1c14:	82 2b       	or	r24, r18
    1c16:	8c 93       	st	X, r24
    1c18:	0a c0       	rjmp	.+20     	; 0x1c2e <ADC_voidChangeMode+0x6a>
	}
	else if (u8ModeCpy == ADC_SGL_MODE)
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	89 30       	cpi	r24, 0x09	; 9
    1c1e:	39 f4       	brne	.+14     	; 0x1c2e <ADC_voidChangeMode+0x6a>
	{
		CLR_BIT(ADCSRA , 5) ;
    1c20:	a6 e2       	ldi	r26, 0x26	; 38
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	e6 e2       	ldi	r30, 0x26	; 38
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	8f 7d       	andi	r24, 0xDF	; 223
    1c2c:	8c 93       	st	X, r24
	}
	else
	{
		
	}
}
    1c2e:	0f 90       	pop	r0
    1c30:	cf 91       	pop	r28
    1c32:	df 91       	pop	r29
    1c34:	08 95       	ret

00001c36 <ADC_u16ReadSync>:
/* polling */
uint16 ADC_u16ReadSync(uint8 u8ChannelNbCpy)
{
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <ADC_u16ReadSync+0x6>
    1c3c:	0f 92       	push	r0
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	8b 83       	std	Y+3, r24	; 0x03
	uint16 u16ReadValueLoc =0 ;
    1c44:	1a 82       	std	Y+2, r1	; 0x02
    1c46:	19 82       	std	Y+1, r1	; 0x01
	ADC_voidStartConversion(u8ChannelNbCpy);
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <ADC_voidStartConversion>
	/*wait conversion till finish*/
	while (GET_BIT(ADCSRA , 4) == 0);
    1c4e:	e6 e2       	ldi	r30, 0x26	; 38
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	82 95       	swap	r24
    1c56:	8f 70       	andi	r24, 0x0F	; 15
    1c58:	88 2f       	mov	r24, r24
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	81 70       	andi	r24, 0x01	; 1
    1c5e:	90 70       	andi	r25, 0x00	; 0
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	a9 f3       	breq	.-22     	; 0x1c4e <ADC_u16ReadSync+0x18>
	/*Clear Flag bit*/
	SET_BIT(ADCSRA , 4);
    1c64:	a6 e2       	ldi	r26, 0x26	; 38
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e6 e2       	ldi	r30, 0x26	; 38
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	80 61       	ori	r24, 0x10	; 16
    1c70:	8c 93       	st	X, r24
	
	#if ADC_RES_MODE == ADC_8BIT
	u16ReadValueLoc = ADCH ;
	#else
	u16ReadValueLoc = ADCL;
    1c72:	e4 e2       	ldi	r30, 0x24	; 36
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	88 2f       	mov	r24, r24
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	9a 83       	std	Y+2, r25	; 0x02
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    u16ReadValueLoc |= (ADCH<<8) ;
    1c80:	e5 e2       	ldi	r30, 0x25	; 37
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	88 2f       	mov	r24, r24
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	98 2f       	mov	r25, r24
    1c8c:	88 27       	eor	r24, r24
    1c8e:	9c 01       	movw	r18, r24
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	9a 81       	ldd	r25, Y+2	; 0x02
    1c94:	82 2b       	or	r24, r18
    1c96:	93 2b       	or	r25, r19
    1c98:	9a 83       	std	Y+2, r25	; 0x02
    1c9a:	89 83       	std	Y+1, r24	; 0x01
	#endif
	
	return u16ReadValueLoc ;
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	9a 81       	ldd	r25, Y+2	; 0x02
	
}
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <ADC_u16ReadAsync>:
uint16 ADC_u16ReadAsync(void)
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
	return ADC_u16ReadValue ;
    1cb4:	80 91 fd 00 	lds	r24, 0x00FD
    1cb8:	90 91 fe 00 	lds	r25, 0x00FE
}
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <__vector_16>:

void __vector_16 (void) __attribute__((signal ,used));

void __vector_16 (void)
{
    1cc2:	1f 92       	push	r1
    1cc4:	0f 92       	push	r0
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	0f 92       	push	r0
    1cca:	11 24       	eor	r1, r1
    1ccc:	2f 93       	push	r18
    1cce:	3f 93       	push	r19
    1cd0:	4f 93       	push	r20
    1cd2:	5f 93       	push	r21
    1cd4:	6f 93       	push	r22
    1cd6:	7f 93       	push	r23
    1cd8:	8f 93       	push	r24
    1cda:	9f 93       	push	r25
    1cdc:	af 93       	push	r26
    1cde:	bf 93       	push	r27
    1ce0:	ef 93       	push	r30
    1ce2:	ff 93       	push	r31
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
	if (ADC_pfCall != NULL_PTR)
    1cec:	80 91 ea 00 	lds	r24, 0x00EA
    1cf0:	90 91 eb 00 	lds	r25, 0x00EB
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	29 f0       	breq	.+10     	; 0x1d02 <__vector_16+0x40>
	{
		ADC_pfCall();
    1cf8:	e0 91 ea 00 	lds	r30, 0x00EA
    1cfc:	f0 91 eb 00 	lds	r31, 0x00EB
    1d00:	09 95       	icall
	}
	#if ADC_RES_MODE == ADC_8BIT
	ADC_u16ReadValue = ADCH ;
	#else
	ADC_u16ReadValue = ADCL;
    1d02:	e4 e2       	ldi	r30, 0x24	; 36
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	88 2f       	mov	r24, r24
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	90 93 fe 00 	sts	0x00FE, r25
    1d10:	80 93 fd 00 	sts	0x00FD, r24
		ADC_u16ReadValue |= (ADCH<<8) ;
    1d14:	e5 e2       	ldi	r30, 0x25	; 37
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	88 2f       	mov	r24, r24
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	98 2f       	mov	r25, r24
    1d20:	88 27       	eor	r24, r24
    1d22:	9c 01       	movw	r18, r24
    1d24:	80 91 fd 00 	lds	r24, 0x00FD
    1d28:	90 91 fe 00 	lds	r25, 0x00FE
    1d2c:	82 2b       	or	r24, r18
    1d2e:	93 2b       	or	r25, r19
    1d30:	90 93 fe 00 	sts	0x00FE, r25
    1d34:	80 93 fd 00 	sts	0x00FD, r24
	#endif
}
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	ff 91       	pop	r31
    1d3e:	ef 91       	pop	r30
    1d40:	bf 91       	pop	r27
    1d42:	af 91       	pop	r26
    1d44:	9f 91       	pop	r25
    1d46:	8f 91       	pop	r24
    1d48:	7f 91       	pop	r23
    1d4a:	6f 91       	pop	r22
    1d4c:	5f 91       	pop	r21
    1d4e:	4f 91       	pop	r20
    1d50:	3f 91       	pop	r19
    1d52:	2f 91       	pop	r18
    1d54:	0f 90       	pop	r0
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	0f 90       	pop	r0
    1d5a:	1f 90       	pop	r1
    1d5c:	18 95       	reti

00001d5e <SEV_enuDisplay>:




tenuErrorStatus SEV_enuDisplay(uint8 u8SevIndexCpy, uint8 u8NumCpy)
{
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	62 97       	sbiw	r28, 0x12	; 18
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	8c 87       	std	Y+12, r24	; 0x0c
    1d74:	6d 87       	std	Y+13, r22	; 0x0d

	tenuErrorStatus enuReturnLoc =EOK;
    1d76:	19 82       	std	Y+1, r1	; 0x01
	uint8 au8cathode[10] = {0x3f, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
    1d78:	ce 01       	movw	r24, r28
    1d7a:	02 96       	adiw	r24, 0x02	; 2
    1d7c:	9f 87       	std	Y+15, r25	; 0x0f
    1d7e:	8e 87       	std	Y+14, r24	; 0x0e
    1d80:	e0 ee       	ldi	r30, 0xE0	; 224
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	f9 8b       	std	Y+17, r31	; 0x11
    1d86:	e8 8b       	std	Y+16, r30	; 0x10
    1d88:	fa e0       	ldi	r31, 0x0A	; 10
    1d8a:	fa 8b       	std	Y+18, r31	; 0x12
    1d8c:	e8 89       	ldd	r30, Y+16	; 0x10
    1d8e:	f9 89       	ldd	r31, Y+17	; 0x11
    1d90:	00 80       	ld	r0, Z
    1d92:	88 89       	ldd	r24, Y+16	; 0x10
    1d94:	99 89       	ldd	r25, Y+17	; 0x11
    1d96:	01 96       	adiw	r24, 0x01	; 1
    1d98:	99 8b       	std	Y+17, r25	; 0x11
    1d9a:	88 8b       	std	Y+16, r24	; 0x10
    1d9c:	ee 85       	ldd	r30, Y+14	; 0x0e
    1d9e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1da0:	00 82       	st	Z, r0
    1da2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1da4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1da6:	01 96       	adiw	r24, 0x01	; 1
    1da8:	9f 87       	std	Y+15, r25	; 0x0f
    1daa:	8e 87       	std	Y+14, r24	; 0x0e
    1dac:	9a 89       	ldd	r25, Y+18	; 0x12
    1dae:	91 50       	subi	r25, 0x01	; 1
    1db0:	9a 8b       	std	Y+18, r25	; 0x12
    1db2:	ea 89       	ldd	r30, Y+18	; 0x12
    1db4:	ee 23       	and	r30, r30
    1db6:	51 f7       	brne	.-44     	; 0x1d8c <SEV_enuDisplay+0x2e>
	if (u8NumCpy<10)
    1db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dba:	8a 30       	cpi	r24, 0x0A	; 10
    1dbc:	08 f0       	brcs	.+2      	; 0x1dc0 <SEV_enuDisplay+0x62>
    1dbe:	45 c0       	rjmp	.+138    	; 0x1e4a <SEV_enuDisplay+0xec>
	{
		if (SEV_ConfigSet[u8SevIndexCpy].u8ConMode==COMMON_CATHODE)
    1dc0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	c9 01       	movw	r24, r18
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	88 0f       	add	r24, r24
    1dd2:	99 1f       	adc	r25, r25
    1dd4:	82 0f       	add	r24, r18
    1dd6:	93 1f       	adc	r25, r19
    1dd8:	fc 01       	movw	r30, r24
    1dda:	ea 55       	subi	r30, 0x5A	; 90
    1ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dde:	80 81       	ld	r24, Z
    1de0:	84 31       	cpi	r24, 0x14	; 20
    1de2:	71 f4       	brne	.+28     	; 0x1e00 <SEV_enuDisplay+0xa2>
		{
			SEV_HexToBin(u8SevIndexCpy,au8cathode[u8NumCpy]);
    1de4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de6:	28 2f       	mov	r18, r24
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	ce 01       	movw	r24, r28
    1dec:	02 96       	adiw	r24, 0x02	; 2
    1dee:	fc 01       	movw	r30, r24
    1df0:	e2 0f       	add	r30, r18
    1df2:	f3 1f       	adc	r31, r19
    1df4:	90 81       	ld	r25, Z
    1df6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1df8:	69 2f       	mov	r22, r25
    1dfa:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <SEV_HexToBin>
    1dfe:	27 c0       	rjmp	.+78     	; 0x1e4e <SEV_enuDisplay+0xf0>
		}
		else if (SEV_ConfigSet[u8SevIndexCpy].u8ConMode==COMMON_ANODE)
    1e00:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	c9 01       	movw	r24, r18
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	88 0f       	add	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	82 0f       	add	r24, r18
    1e16:	93 1f       	adc	r25, r19
    1e18:	fc 01       	movw	r30, r24
    1e1a:	ea 55       	subi	r30, 0x5A	; 90
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	80 81       	ld	r24, Z
    1e20:	8a 30       	cpi	r24, 0x0A	; 10
    1e22:	81 f4       	brne	.+32     	; 0x1e44 <SEV_enuDisplay+0xe6>
		{
			SEV_HexToBin(u8SevIndexCpy,~au8cathode[u8NumCpy]);
    1e24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	ce 01       	movw	r24, r28
    1e2c:	02 96       	adiw	r24, 0x02	; 2
    1e2e:	fc 01       	movw	r30, r24
    1e30:	e2 0f       	add	r30, r18
    1e32:	f3 1f       	adc	r31, r19
    1e34:	80 81       	ld	r24, Z
    1e36:	98 2f       	mov	r25, r24
    1e38:	90 95       	com	r25
    1e3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e3c:	69 2f       	mov	r22, r25
    1e3e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <SEV_HexToBin>
    1e42:	05 c0       	rjmp	.+10     	; 0x1e4e <SEV_enuDisplay+0xf0>
		}
		else
		{
			enuReturnLoc=ENOK;
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <SEV_enuDisplay+0xf0>
		}
	}
	else
	{
		enuReturnLoc=PARAMRETER_OUT_RANGE;
    1e4a:	82 e0       	ldi	r24, 0x02	; 2
    1e4c:	89 83       	std	Y+1, r24	; 0x01
	}
	return enuReturnLoc;
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01


}
    1e50:	62 96       	adiw	r28, 0x12	; 18
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <SEV_HexToBin>:


static void SEV_HexToBin(uint8 u8SevIndexCpy,uint8 u8HexCpy ) // 0b0111111  num 0
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	2a 97       	sbiw	r28, 0x0a	; 10
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	89 87       	std	Y+9, r24	; 0x09
    1e78:	6a 87       	std	Y+10, r22	; 0x0a
	uint8 au8BinValuesLoc[7];
	uint8 u8CounterLoc;
	for (u8CounterLoc=0; u8CounterLoc<7;u8CounterLoc++)
    1e7a:	19 82       	std	Y+1, r1	; 0x01
    1e7c:	1b c0       	rjmp	.+54     	; 0x1eb4 <SEV_HexToBin+0x52>
	{
		au8BinValuesLoc[u8CounterLoc]=GET_BIT(u8HexCpy,u8CounterLoc);
    1e7e:	89 81       	ldd	r24, Y+1	; 0x01
    1e80:	48 2f       	mov	r20, r24
    1e82:	50 e0       	ldi	r21, 0x00	; 0
    1e84:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e86:	28 2f       	mov	r18, r24
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	88 2f       	mov	r24, r24
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	b9 01       	movw	r22, r18
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <SEV_HexToBin+0x36>
    1e94:	75 95       	asr	r23
    1e96:	67 95       	ror	r22
    1e98:	8a 95       	dec	r24
    1e9a:	e2 f7       	brpl	.-8      	; 0x1e94 <SEV_HexToBin+0x32>
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	21 70       	andi	r18, 0x01	; 1
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	02 96       	adiw	r24, 0x02	; 2
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	e4 0f       	add	r30, r20
    1eaa:	f5 1f       	adc	r31, r21
    1eac:	20 83       	st	Z, r18

static void SEV_HexToBin(uint8 u8SevIndexCpy,uint8 u8HexCpy ) // 0b0111111  num 0
{
	uint8 au8BinValuesLoc[7];
	uint8 u8CounterLoc;
	for (u8CounterLoc=0; u8CounterLoc<7;u8CounterLoc++)
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	8f 5f       	subi	r24, 0xFF	; 255
    1eb2:	89 83       	std	Y+1, r24	; 0x01
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	87 30       	cpi	r24, 0x07	; 7
    1eb8:	10 f3       	brcs	.-60     	; 0x1e7e <SEV_HexToBin+0x1c>
	{
		au8BinValuesLoc[u8CounterLoc]=GET_BIT(u8HexCpy,u8CounterLoc);
	}
	DIO_enuWriteGroup(SEV_ConfigSet[u8SevIndexCpy].au8SevCon,au8BinValuesLoc,7);
    1eba:	89 85       	ldd	r24, Y+9	; 0x09
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	c9 01       	movw	r24, r18
    1ec2:	88 0f       	add	r24, r24
    1ec4:	99 1f       	adc	r25, r25
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	82 0f       	add	r24, r18
    1ed0:	93 1f       	adc	r25, r19
    1ed2:	82 56       	subi	r24, 0x62	; 98
    1ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed6:	9e 01       	movw	r18, r28
    1ed8:	2e 5f       	subi	r18, 0xFE	; 254
    1eda:	3f 4f       	sbci	r19, 0xFF	; 255
    1edc:	b9 01       	movw	r22, r18
    1ede:	47 e0       	ldi	r20, 0x07	; 7
    1ee0:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <DIO_enuWriteGroup>

}
    1ee4:	2a 96       	adiw	r28, 0x0a	; 10
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	de bf       	out	0x3e, r29	; 62
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	cd bf       	out	0x3d, r28	; 61
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <SEV_enuEnable>:

tenuErrorStatus SEV_enuEnable(uint8 u8SevIndexCpy)
{
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <SEV_enuEnable+0x6>
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	8a 83       	std	Y+2, r24	; 0x02

	tenuErrorStatus enuReturnLoc =EOK;
    1f02:	19 82       	std	Y+1, r1	; 0x01
	if (u8SevIndexCpy < SEV_MAX_NUM)
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	82 30       	cpi	r24, 0x02	; 2
    1f08:	08 f0       	brcs	.+2      	; 0x1f0c <SEV_enuEnable+0x16>
    1f0a:	4f c0       	rjmp	.+158    	; 0x1faa <SEV_enuEnable+0xb4>
	{
		if (SEV_ConfigSet[u8SevIndexCpy].u8ConMode==COMMON_CATHODE)
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	c9 01       	movw	r24, r18
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	88 0f       	add	r24, r24
    1f1a:	99 1f       	adc	r25, r25
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	82 0f       	add	r24, r18
    1f22:	93 1f       	adc	r25, r19
    1f24:	fc 01       	movw	r30, r24
    1f26:	ea 55       	subi	r30, 0x5A	; 90
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	80 81       	ld	r24, Z
    1f2c:	84 31       	cpi	r24, 0x14	; 20
    1f2e:	a1 f4       	brne	.+40     	; 0x1f58 <SEV_enuEnable+0x62>
		{
			DIO_enuWritePin(SEV_ConfigSet[u8SevIndexCpy].u8common ,DIO_LOW);
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	c9 01       	movw	r24, r18
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	88 0f       	add	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	82 0f       	add	r24, r18
    1f46:	93 1f       	adc	r25, r19
    1f48:	fc 01       	movw	r30, r24
    1f4a:	eb 55       	subi	r30, 0x5B	; 91
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	80 81       	ld	r24, Z
    1f50:	60 e0       	ldi	r22, 0x00	; 0
    1f52:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>
    1f56:	2b c0       	rjmp	.+86     	; 0x1fae <SEV_enuEnable+0xb8>
		}
		else if  (SEV_ConfigSet[u8SevIndexCpy].u8ConMode==COMMON_ANODE)
    1f58:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5a:	28 2f       	mov	r18, r24
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	c9 01       	movw	r24, r18
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	88 0f       	add	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	82 0f       	add	r24, r18
    1f6e:	93 1f       	adc	r25, r19
    1f70:	fc 01       	movw	r30, r24
    1f72:	ea 55       	subi	r30, 0x5A	; 90
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	80 81       	ld	r24, Z
    1f78:	8a 30       	cpi	r24, 0x0A	; 10
    1f7a:	a1 f4       	brne	.+40     	; 0x1fa4 <SEV_enuEnable+0xae>
		{
			DIO_enuWritePin(SEV_ConfigSet[u8SevIndexCpy].u8common ,DIO_HIGH);
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	28 2f       	mov	r18, r24
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	c9 01       	movw	r24, r18
    1f84:	88 0f       	add	r24, r24
    1f86:	99 1f       	adc	r25, r25
    1f88:	88 0f       	add	r24, r24
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	88 0f       	add	r24, r24
    1f8e:	99 1f       	adc	r25, r25
    1f90:	82 0f       	add	r24, r18
    1f92:	93 1f       	adc	r25, r19
    1f94:	fc 01       	movw	r30, r24
    1f96:	eb 55       	subi	r30, 0x5B	; 91
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	80 81       	ld	r24, Z
    1f9c:	61 e0       	ldi	r22, 0x01	; 1
    1f9e:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>
    1fa2:	05 c0       	rjmp	.+10     	; 0x1fae <SEV_enuEnable+0xb8>
		}
		else
		{
			enuReturnLoc=ENOK;
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <SEV_enuEnable+0xb8>

		}
	}
	else
	{
		enuReturnLoc =PARAMRETER_OUT_RANGE;
    1faa:	82 e0       	ldi	r24, 0x02	; 2
    1fac:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnLoc;
    1fae:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <SEV_enuDisable>:
tenuErrorStatus SEV_enuDisable(uint8 u8SevIndexCpy)
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <SEV_enuDisable+0x6>
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	8a 83       	std	Y+2, r24	; 0x02
	tenuErrorStatus enuReturnLoc =EOK;
    1fc6:	19 82       	std	Y+1, r1	; 0x01
		if (u8SevIndexCpy < SEV_MAX_NUM)
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	82 30       	cpi	r24, 0x02	; 2
    1fcc:	08 f0       	brcs	.+2      	; 0x1fd0 <SEV_enuDisable+0x16>
    1fce:	4f c0       	rjmp	.+158    	; 0x206e <SEV_enuDisable+0xb4>
		{
			if (SEV_ConfigSet[u8SevIndexCpy].u8ConMode==COMMON_CATHODE)
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	c9 01       	movw	r24, r18
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	82 0f       	add	r24, r18
    1fe6:	93 1f       	adc	r25, r19
    1fe8:	fc 01       	movw	r30, r24
    1fea:	ea 55       	subi	r30, 0x5A	; 90
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	80 81       	ld	r24, Z
    1ff0:	84 31       	cpi	r24, 0x14	; 20
    1ff2:	a1 f4       	brne	.+40     	; 0x201c <SEV_enuDisable+0x62>
			{
				DIO_enuWritePin(SEV_ConfigSet[u8SevIndexCpy].u8common ,DIO_HIGH);
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	c9 01       	movw	r24, r18
    1ffc:	88 0f       	add	r24, r24
    1ffe:	99 1f       	adc	r25, r25
    2000:	88 0f       	add	r24, r24
    2002:	99 1f       	adc	r25, r25
    2004:	88 0f       	add	r24, r24
    2006:	99 1f       	adc	r25, r25
    2008:	82 0f       	add	r24, r18
    200a:	93 1f       	adc	r25, r19
    200c:	fc 01       	movw	r30, r24
    200e:	eb 55       	subi	r30, 0x5B	; 91
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	80 81       	ld	r24, Z
    2014:	61 e0       	ldi	r22, 0x01	; 1
    2016:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>
    201a:	2b c0       	rjmp	.+86     	; 0x2072 <SEV_enuDisable+0xb8>
			}
			else if  (SEV_ConfigSet[u8SevIndexCpy].u8ConMode==COMMON_ANODE)
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	28 2f       	mov	r18, r24
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	c9 01       	movw	r24, r18
    2024:	88 0f       	add	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	82 0f       	add	r24, r18
    2032:	93 1f       	adc	r25, r19
    2034:	fc 01       	movw	r30, r24
    2036:	ea 55       	subi	r30, 0x5A	; 90
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	80 81       	ld	r24, Z
    203c:	8a 30       	cpi	r24, 0x0A	; 10
    203e:	a1 f4       	brne	.+40     	; 0x2068 <SEV_enuDisable+0xae>
			{
				DIO_enuWritePin(SEV_ConfigSet[u8SevIndexCpy].u8common ,DIO_LOW);
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	28 2f       	mov	r18, r24
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	c9 01       	movw	r24, r18
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	88 0f       	add	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	88 0f       	add	r24, r24
    2052:	99 1f       	adc	r25, r25
    2054:	82 0f       	add	r24, r18
    2056:	93 1f       	adc	r25, r19
    2058:	fc 01       	movw	r30, r24
    205a:	eb 55       	subi	r30, 0x5B	; 91
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	80 81       	ld	r24, Z
    2060:	60 e0       	ldi	r22, 0x00	; 0
    2062:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>
    2066:	05 c0       	rjmp	.+10     	; 0x2072 <SEV_enuDisable+0xb8>
			}
			else
			{
				enuReturnLoc=ENOK;
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	89 83       	std	Y+1, r24	; 0x01
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <SEV_enuDisable+0xb8>

			}
		}
		else
		{
			enuReturnLoc =PARAMRETER_OUT_RANGE;
    206e:	82 e0       	ldi	r24, 0x02	; 2
    2070:	89 83       	std	Y+1, r24	; 0x01
		}

		return enuReturnLoc;
    2072:	89 81       	ldd	r24, Y+1	; 0x01
}
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	08 95       	ret

0000207e <LCD_voidInit>:
#include "LCD_Interface.h"
#include "LCD_Private.h"


void LCD_voidInit(void)
{
    207e:	0f 93       	push	r16
    2080:	1f 93       	push	r17
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	ce 58       	subi	r28, 0x8E	; 142
    208c:	d0 40       	sbci	r29, 0x00	; 0
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	de bf       	out	0x3e, r29	; 62
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	cd bf       	out	0x3d, r28	; 61
	uint8 u8CntLoc;
	uint8 u8commnad=0;
    2098:	fe 01       	movw	r30, r28
    209a:	e3 57       	subi	r30, 0x73	; 115
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	10 82       	st	Z, r1
	for (u8CntLoc =0  ; u8CntLoc <MAX_NUM ; u8CntLoc++)
    20a0:	fe 01       	movw	r30, r28
    20a2:	e2 57       	subi	r30, 0x72	; 114
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	10 82       	st	Z, r1
    20a8:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <LCD_voidInit+0x1068>
	{
		/*inilize 8 bit */
		if(lcdarr[u8CntLoc].lcdswconfig.u8mode ==LCD_8_BIT_MODE)
    20ac:	fe 01       	movw	r30, r28
    20ae:	e2 57       	subi	r30, 0x72	; 114
    20b0:	ff 4f       	sbci	r31, 0xFF	; 255
    20b2:	80 81       	ld	r24, Z
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	c9 01       	movw	r24, r18
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	82 0f       	add	r24, r18
    20c0:	93 1f       	adc	r25, r19
    20c2:	88 0f       	add	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	88 0f       	add	r24, r24
    20c8:	99 1f       	adc	r25, r25
    20ca:	fc 01       	movw	r30, r24
    20cc:	e0 55       	subi	r30, 0x50	; 80
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	80 81       	ld	r24, Z
    20d2:	81 70       	andi	r24, 0x01	; 1
    20d4:	81 30       	cpi	r24, 0x01	; 1
    20d6:	09 f0       	breq	.+2      	; 0x20da <LCD_voidInit+0x5c>
    20d8:	75 c4       	rjmp	.+2282   	; 0x29c4 <LCD_voidInit+0x946>
    20da:	fe 01       	movw	r30, r28
    20dc:	e7 57       	subi	r30, 0x77	; 119
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	a0 ef       	ldi	r26, 0xF0	; 240
    20e6:	b1 e4       	ldi	r27, 0x41	; 65
    20e8:	80 83       	st	Z, r24
    20ea:	91 83       	std	Z+1, r25	; 0x01
    20ec:	a2 83       	std	Z+2, r26	; 0x02
    20ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f0:	8e 01       	movw	r16, r28
    20f2:	0b 57       	subi	r16, 0x7B	; 123
    20f4:	1f 4f       	sbci	r17, 0xFF	; 255
    20f6:	fe 01       	movw	r30, r28
    20f8:	e7 57       	subi	r30, 0x77	; 119
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	60 81       	ld	r22, Z
    20fe:	71 81       	ldd	r23, Z+1	; 0x01
    2100:	82 81       	ldd	r24, Z+2	; 0x02
    2102:	93 81       	ldd	r25, Z+3	; 0x03
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	4a ef       	ldi	r20, 0xFA	; 250
    210a:	54 e4       	ldi	r21, 0x44	; 68
    210c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	f8 01       	movw	r30, r16
    2116:	80 83       	st	Z, r24
    2118:	91 83       	std	Z+1, r25	; 0x01
    211a:	a2 83       	std	Z+2, r26	; 0x02
    211c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    211e:	fe 01       	movw	r30, r28
    2120:	eb 57       	subi	r30, 0x7B	; 123
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	60 81       	ld	r22, Z
    2126:	71 81       	ldd	r23, Z+1	; 0x01
    2128:	82 81       	ldd	r24, Z+2	; 0x02
    212a:	93 81       	ldd	r25, Z+3	; 0x03
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e8       	ldi	r20, 0x80	; 128
    2132:	5f e3       	ldi	r21, 0x3F	; 63
    2134:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2138:	88 23       	and	r24, r24
    213a:	44 f4       	brge	.+16     	; 0x214c <LCD_voidInit+0xce>
		__ticks = 1;
    213c:	fe 01       	movw	r30, r28
    213e:	ed 57       	subi	r30, 0x7D	; 125
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	91 83       	std	Z+1, r25	; 0x01
    2148:	80 83       	st	Z, r24
    214a:	64 c0       	rjmp	.+200    	; 0x2214 <LCD_voidInit+0x196>
	else if (__tmp > 65535)
    214c:	fe 01       	movw	r30, r28
    214e:	eb 57       	subi	r30, 0x7B	; 123
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	60 81       	ld	r22, Z
    2154:	71 81       	ldd	r23, Z+1	; 0x01
    2156:	82 81       	ldd	r24, Z+2	; 0x02
    2158:	93 81       	ldd	r25, Z+3	; 0x03
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	3f ef       	ldi	r19, 0xFF	; 255
    215e:	4f e7       	ldi	r20, 0x7F	; 127
    2160:	57 e4       	ldi	r21, 0x47	; 71
    2162:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2166:	18 16       	cp	r1, r24
    2168:	0c f0       	brlt	.+2      	; 0x216c <LCD_voidInit+0xee>
    216a:	43 c0       	rjmp	.+134    	; 0x21f2 <LCD_voidInit+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    216c:	fe 01       	movw	r30, r28
    216e:	e7 57       	subi	r30, 0x77	; 119
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	60 81       	ld	r22, Z
    2174:	71 81       	ldd	r23, Z+1	; 0x01
    2176:	82 81       	ldd	r24, Z+2	; 0x02
    2178:	93 81       	ldd	r25, Z+3	; 0x03
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	40 e2       	ldi	r20, 0x20	; 32
    2180:	51 e4       	ldi	r21, 0x41	; 65
    2182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	8e 01       	movw	r16, r28
    218c:	0d 57       	subi	r16, 0x7D	; 125
    218e:	1f 4f       	sbci	r17, 0xFF	; 255
    2190:	bc 01       	movw	r22, r24
    2192:	cd 01       	movw	r24, r26
    2194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	f8 01       	movw	r30, r16
    219e:	91 83       	std	Z+1, r25	; 0x01
    21a0:	80 83       	st	Z, r24
    21a2:	1f c0       	rjmp	.+62     	; 0x21e2 <LCD_voidInit+0x164>
    21a4:	fe 01       	movw	r30, r28
    21a6:	ef 57       	subi	r30, 0x7F	; 127
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	88 ec       	ldi	r24, 0xC8	; 200
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	91 83       	std	Z+1, r25	; 0x01
    21b0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21b2:	fe 01       	movw	r30, r28
    21b4:	ef 57       	subi	r30, 0x7F	; 127
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	80 81       	ld	r24, Z
    21ba:	91 81       	ldd	r25, Z+1	; 0x01
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	f1 f7       	brne	.-4      	; 0x21bc <LCD_voidInit+0x13e>
    21c0:	fe 01       	movw	r30, r28
    21c2:	ef 57       	subi	r30, 0x7F	; 127
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	91 83       	std	Z+1, r25	; 0x01
    21c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ca:	de 01       	movw	r26, r28
    21cc:	ad 57       	subi	r26, 0x7D	; 125
    21ce:	bf 4f       	sbci	r27, 0xFF	; 255
    21d0:	fe 01       	movw	r30, r28
    21d2:	ed 57       	subi	r30, 0x7D	; 125
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	80 81       	ld	r24, Z
    21d8:	91 81       	ldd	r25, Z+1	; 0x01
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	11 96       	adiw	r26, 0x01	; 1
    21de:	9c 93       	st	X, r25
    21e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e2:	fe 01       	movw	r30, r28
    21e4:	ed 57       	subi	r30, 0x7D	; 125
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	80 81       	ld	r24, Z
    21ea:	91 81       	ldd	r25, Z+1	; 0x01
    21ec:	00 97       	sbiw	r24, 0x00	; 0
    21ee:	d1 f6       	brne	.-76     	; 0x21a4 <LCD_voidInit+0x126>
    21f0:	27 c0       	rjmp	.+78     	; 0x2240 <LCD_voidInit+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f2:	8e 01       	movw	r16, r28
    21f4:	0d 57       	subi	r16, 0x7D	; 125
    21f6:	1f 4f       	sbci	r17, 0xFF	; 255
    21f8:	fe 01       	movw	r30, r28
    21fa:	eb 57       	subi	r30, 0x7B	; 123
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	60 81       	ld	r22, Z
    2200:	71 81       	ldd	r23, Z+1	; 0x01
    2202:	82 81       	ldd	r24, Z+2	; 0x02
    2204:	93 81       	ldd	r25, Z+3	; 0x03
    2206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	f8 01       	movw	r30, r16
    2210:	91 83       	std	Z+1, r25	; 0x01
    2212:	80 83       	st	Z, r24
    2214:	de 01       	movw	r26, r28
    2216:	a1 58       	subi	r26, 0x81	; 129
    2218:	bf 4f       	sbci	r27, 0xFF	; 255
    221a:	fe 01       	movw	r30, r28
    221c:	ed 57       	subi	r30, 0x7D	; 125
    221e:	ff 4f       	sbci	r31, 0xFF	; 255
    2220:	80 81       	ld	r24, Z
    2222:	91 81       	ldd	r25, Z+1	; 0x01
    2224:	8d 93       	st	X+, r24
    2226:	9c 93       	st	X, r25
    2228:	fe 01       	movw	r30, r28
    222a:	e1 58       	subi	r30, 0x81	; 129
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	80 81       	ld	r24, Z
    2230:	91 81       	ldd	r25, Z+1	; 0x01
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	f1 f7       	brne	.-4      	; 0x2232 <LCD_voidInit+0x1b4>
    2236:	fe 01       	movw	r30, r28
    2238:	e1 58       	subi	r30, 0x81	; 129
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	91 83       	std	Z+1, r25	; 0x01
    223e:	80 83       	st	Z, r24
		{
			/*step 1*/
			_delay_ms(30);

			u8commnad=0b00110000 |lcdarr[u8CntLoc].lcdswconfig.u8font <<2
    2240:	fe 01       	movw	r30, r28
    2242:	e2 57       	subi	r30, 0x72	; 114
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	80 81       	ld	r24, Z
    2248:	28 2f       	mov	r18, r24
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	c9 01       	movw	r24, r18
    224e:	88 0f       	add	r24, r24
    2250:	99 1f       	adc	r25, r25
    2252:	82 0f       	add	r24, r18
    2254:	93 1f       	adc	r25, r19
    2256:	88 0f       	add	r24, r24
    2258:	99 1f       	adc	r25, r25
    225a:	88 0f       	add	r24, r24
    225c:	99 1f       	adc	r25, r25
    225e:	fc 01       	movw	r30, r24
    2260:	e0 55       	subi	r30, 0x50	; 80
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	80 81       	ld	r24, Z
    2266:	86 95       	lsr	r24
    2268:	86 95       	lsr	r24
    226a:	81 70       	andi	r24, 0x01	; 1
    226c:	88 2f       	mov	r24, r24
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	88 0f       	add	r24, r24
    2272:	99 1f       	adc	r25, r25
    2274:	88 0f       	add	r24, r24
    2276:	99 1f       	adc	r25, r25
    2278:	48 2f       	mov	r20, r24
    227a:	40 63       	ori	r20, 0x30	; 48
    227c:	fe 01       	movw	r30, r28
    227e:	e2 57       	subi	r30, 0x72	; 114
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	80 81       	ld	r24, Z
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	c9 01       	movw	r24, r18
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	82 0f       	add	r24, r18
    2290:	93 1f       	adc	r25, r19
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	88 0f       	add	r24, r24
    2298:	99 1f       	adc	r25, r25
    229a:	fc 01       	movw	r30, r24
    229c:	e0 55       	subi	r30, 0x50	; 80
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	80 81       	ld	r24, Z
    22a2:	86 95       	lsr	r24
    22a4:	81 70       	andi	r24, 0x01	; 1
    22a6:	88 2f       	mov	r24, r24
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	88 0f       	add	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	88 0f       	add	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	84 2b       	or	r24, r20
    22b8:	fe 01       	movw	r30, r28
    22ba:	e3 57       	subi	r30, 0x73	; 115
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	80 83       	st	Z, r24
					|lcdarr[u8CntLoc].lcdswconfig.u8line<<3 ;
			/* send command */
			voidWriteCmd(u8CntLoc,u8commnad);
    22c0:	fe 01       	movw	r30, r28
    22c2:	e2 57       	subi	r30, 0x72	; 114
    22c4:	ff 4f       	sbci	r31, 0xFF	; 255
    22c6:	de 01       	movw	r26, r28
    22c8:	a3 57       	subi	r26, 0x73	; 115
    22ca:	bf 4f       	sbci	r27, 0xFF	; 255
    22cc:	80 81       	ld	r24, Z
    22ce:	6c 91       	ld	r22, X
    22d0:	0e 94 87 18 	call	0x310e	; 0x310e <voidWriteCmd>
    22d4:	fe 01       	movw	r30, r28
    22d6:	e5 58       	subi	r30, 0x85	; 133
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	a0 e8       	ldi	r26, 0x80	; 128
    22e0:	bf e3       	ldi	r27, 0x3F	; 63
    22e2:	80 83       	st	Z, r24
    22e4:	91 83       	std	Z+1, r25	; 0x01
    22e6:	a2 83       	std	Z+2, r26	; 0x02
    22e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ea:	8e 01       	movw	r16, r28
    22ec:	09 58       	subi	r16, 0x89	; 137
    22ee:	1f 4f       	sbci	r17, 0xFF	; 255
    22f0:	fe 01       	movw	r30, r28
    22f2:	e5 58       	subi	r30, 0x85	; 133
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	60 81       	ld	r22, Z
    22f8:	71 81       	ldd	r23, Z+1	; 0x01
    22fa:	82 81       	ldd	r24, Z+2	; 0x02
    22fc:	93 81       	ldd	r25, Z+3	; 0x03
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	4a ef       	ldi	r20, 0xFA	; 250
    2304:	54 e4       	ldi	r21, 0x44	; 68
    2306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	f8 01       	movw	r30, r16
    2310:	80 83       	st	Z, r24
    2312:	91 83       	std	Z+1, r25	; 0x01
    2314:	a2 83       	std	Z+2, r26	; 0x02
    2316:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2318:	fe 01       	movw	r30, r28
    231a:	e9 58       	subi	r30, 0x89	; 137
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	60 81       	ld	r22, Z
    2320:	71 81       	ldd	r23, Z+1	; 0x01
    2322:	82 81       	ldd	r24, Z+2	; 0x02
    2324:	93 81       	ldd	r25, Z+3	; 0x03
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e8       	ldi	r20, 0x80	; 128
    232c:	5f e3       	ldi	r21, 0x3F	; 63
    232e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2332:	88 23       	and	r24, r24
    2334:	44 f4       	brge	.+16     	; 0x2346 <LCD_voidInit+0x2c8>
		__ticks = 1;
    2336:	fe 01       	movw	r30, r28
    2338:	eb 58       	subi	r30, 0x8B	; 139
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	91 83       	std	Z+1, r25	; 0x01
    2342:	80 83       	st	Z, r24
    2344:	64 c0       	rjmp	.+200    	; 0x240e <LCD_voidInit+0x390>
	else if (__tmp > 65535)
    2346:	fe 01       	movw	r30, r28
    2348:	e9 58       	subi	r30, 0x89	; 137
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	60 81       	ld	r22, Z
    234e:	71 81       	ldd	r23, Z+1	; 0x01
    2350:	82 81       	ldd	r24, Z+2	; 0x02
    2352:	93 81       	ldd	r25, Z+3	; 0x03
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	3f ef       	ldi	r19, 0xFF	; 255
    2358:	4f e7       	ldi	r20, 0x7F	; 127
    235a:	57 e4       	ldi	r21, 0x47	; 71
    235c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2360:	18 16       	cp	r1, r24
    2362:	0c f0       	brlt	.+2      	; 0x2366 <LCD_voidInit+0x2e8>
    2364:	43 c0       	rjmp	.+134    	; 0x23ec <LCD_voidInit+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2366:	fe 01       	movw	r30, r28
    2368:	e5 58       	subi	r30, 0x85	; 133
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	60 81       	ld	r22, Z
    236e:	71 81       	ldd	r23, Z+1	; 0x01
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	93 81       	ldd	r25, Z+3	; 0x03
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e2       	ldi	r20, 0x20	; 32
    237a:	51 e4       	ldi	r21, 0x41	; 65
    237c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	8e 01       	movw	r16, r28
    2386:	0b 58       	subi	r16, 0x8B	; 139
    2388:	1f 4f       	sbci	r17, 0xFF	; 255
    238a:	bc 01       	movw	r22, r24
    238c:	cd 01       	movw	r24, r26
    238e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	f8 01       	movw	r30, r16
    2398:	91 83       	std	Z+1, r25	; 0x01
    239a:	80 83       	st	Z, r24
    239c:	1f c0       	rjmp	.+62     	; 0x23dc <LCD_voidInit+0x35e>
    239e:	fe 01       	movw	r30, r28
    23a0:	ed 58       	subi	r30, 0x8D	; 141
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	88 ec       	ldi	r24, 0xC8	; 200
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	91 83       	std	Z+1, r25	; 0x01
    23aa:	80 83       	st	Z, r24
    23ac:	fe 01       	movw	r30, r28
    23ae:	ed 58       	subi	r30, 0x8D	; 141
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	80 81       	ld	r24, Z
    23b4:	91 81       	ldd	r25, Z+1	; 0x01
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	f1 f7       	brne	.-4      	; 0x23b6 <LCD_voidInit+0x338>
    23ba:	fe 01       	movw	r30, r28
    23bc:	ed 58       	subi	r30, 0x8D	; 141
    23be:	ff 4f       	sbci	r31, 0xFF	; 255
    23c0:	91 83       	std	Z+1, r25	; 0x01
    23c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c4:	de 01       	movw	r26, r28
    23c6:	ab 58       	subi	r26, 0x8B	; 139
    23c8:	bf 4f       	sbci	r27, 0xFF	; 255
    23ca:	fe 01       	movw	r30, r28
    23cc:	eb 58       	subi	r30, 0x8B	; 139
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	80 81       	ld	r24, Z
    23d2:	91 81       	ldd	r25, Z+1	; 0x01
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	11 96       	adiw	r26, 0x01	; 1
    23d8:	9c 93       	st	X, r25
    23da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23dc:	fe 01       	movw	r30, r28
    23de:	eb 58       	subi	r30, 0x8B	; 139
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	80 81       	ld	r24, Z
    23e4:	91 81       	ldd	r25, Z+1	; 0x01
    23e6:	00 97       	sbiw	r24, 0x00	; 0
    23e8:	d1 f6       	brne	.-76     	; 0x239e <LCD_voidInit+0x320>
    23ea:	27 c0       	rjmp	.+78     	; 0x243a <LCD_voidInit+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ec:	8e 01       	movw	r16, r28
    23ee:	0b 58       	subi	r16, 0x8B	; 139
    23f0:	1f 4f       	sbci	r17, 0xFF	; 255
    23f2:	fe 01       	movw	r30, r28
    23f4:	e9 58       	subi	r30, 0x89	; 137
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	60 81       	ld	r22, Z
    23fa:	71 81       	ldd	r23, Z+1	; 0x01
    23fc:	82 81       	ldd	r24, Z+2	; 0x02
    23fe:	93 81       	ldd	r25, Z+3	; 0x03
    2400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	f8 01       	movw	r30, r16
    240a:	91 83       	std	Z+1, r25	; 0x01
    240c:	80 83       	st	Z, r24
    240e:	de 01       	movw	r26, r28
    2410:	af 58       	subi	r26, 0x8F	; 143
    2412:	bf 4f       	sbci	r27, 0xFF	; 255
    2414:	fe 01       	movw	r30, r28
    2416:	eb 58       	subi	r30, 0x8B	; 139
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	80 81       	ld	r24, Z
    241c:	91 81       	ldd	r25, Z+1	; 0x01
    241e:	8d 93       	st	X+, r24
    2420:	9c 93       	st	X, r25
    2422:	fe 01       	movw	r30, r28
    2424:	ef 58       	subi	r30, 0x8F	; 143
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	80 81       	ld	r24, Z
    242a:	91 81       	ldd	r25, Z+1	; 0x01
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <LCD_voidInit+0x3ae>
    2430:	fe 01       	movw	r30, r28
    2432:	ef 58       	subi	r30, 0x8F	; 143
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	91 83       	std	Z+1, r25	; 0x01
    2438:	80 83       	st	Z, r24
			/*more than 39 micro*/
			_delay_ms(1);
			u8commnad=0b00001000 |lcdarr[u8CntLoc].lcdswconfig.u8display<<2 |
    243a:	fe 01       	movw	r30, r28
    243c:	e2 57       	subi	r30, 0x72	; 114
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	80 81       	ld	r24, Z
    2442:	28 2f       	mov	r18, r24
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	c9 01       	movw	r24, r18
    2448:	88 0f       	add	r24, r24
    244a:	99 1f       	adc	r25, r25
    244c:	82 0f       	add	r24, r18
    244e:	93 1f       	adc	r25, r19
    2450:	88 0f       	add	r24, r24
    2452:	99 1f       	adc	r25, r25
    2454:	88 0f       	add	r24, r24
    2456:	99 1f       	adc	r25, r25
    2458:	fc 01       	movw	r30, r24
    245a:	e0 55       	subi	r30, 0x50	; 80
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	80 81       	ld	r24, Z
    2460:	82 95       	swap	r24
    2462:	86 95       	lsr	r24
    2464:	86 95       	lsr	r24
    2466:	83 70       	andi	r24, 0x03	; 3
    2468:	81 70       	andi	r24, 0x01	; 1
    246a:	88 2f       	mov	r24, r24
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	88 0f       	add	r24, r24
    2474:	99 1f       	adc	r25, r25
    2476:	48 2f       	mov	r20, r24
    2478:	48 60       	ori	r20, 0x08	; 8
    247a:	fe 01       	movw	r30, r28
    247c:	e2 57       	subi	r30, 0x72	; 114
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	80 81       	ld	r24, Z
    2482:	28 2f       	mov	r18, r24
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	c9 01       	movw	r24, r18
    2488:	88 0f       	add	r24, r24
    248a:	99 1f       	adc	r25, r25
    248c:	82 0f       	add	r24, r18
    248e:	93 1f       	adc	r25, r19
    2490:	88 0f       	add	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	88 0f       	add	r24, r24
    2496:	99 1f       	adc	r25, r25
    2498:	fc 01       	movw	r30, r24
    249a:	e0 55       	subi	r30, 0x50	; 80
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	80 81       	ld	r24, Z
    24a0:	86 95       	lsr	r24
    24a2:	86 95       	lsr	r24
    24a4:	86 95       	lsr	r24
    24a6:	81 70       	andi	r24, 0x01	; 1
    24a8:	88 2f       	mov	r24, r24
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	88 0f       	add	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	48 2b       	or	r20, r24
    24b2:	fe 01       	movw	r30, r28
    24b4:	e2 57       	subi	r30, 0x72	; 114
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	80 81       	ld	r24, Z
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	c9 01       	movw	r24, r18
    24c0:	88 0f       	add	r24, r24
    24c2:	99 1f       	adc	r25, r25
    24c4:	82 0f       	add	r24, r18
    24c6:	93 1f       	adc	r25, r19
    24c8:	88 0f       	add	r24, r24
    24ca:	99 1f       	adc	r25, r25
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	fc 01       	movw	r30, r24
    24d2:	e0 55       	subi	r30, 0x50	; 80
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	80 81       	ld	r24, Z
    24d8:	82 95       	swap	r24
    24da:	8f 70       	andi	r24, 0x0F	; 15
    24dc:	81 70       	andi	r24, 0x01	; 1
    24de:	84 2b       	or	r24, r20
    24e0:	fe 01       	movw	r30, r28
    24e2:	e3 57       	subi	r30, 0x73	; 115
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	80 83       	st	Z, r24
									lcdarr[u8CntLoc].lcdswconfig.u8coursorstate<<1 |
									lcdarr[u8CntLoc].lcdswconfig.u8coursorblink<<0 ;

			voidWriteCmd(u8CntLoc,u8commnad);
    24e8:	fe 01       	movw	r30, r28
    24ea:	e2 57       	subi	r30, 0x72	; 114
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	de 01       	movw	r26, r28
    24f0:	a3 57       	subi	r26, 0x73	; 115
    24f2:	bf 4f       	sbci	r27, 0xFF	; 255
    24f4:	80 81       	ld	r24, Z
    24f6:	6c 91       	ld	r22, X
    24f8:	0e 94 87 18 	call	0x310e	; 0x310e <voidWriteCmd>
    24fc:	fe 01       	movw	r30, r28
    24fe:	e3 59       	subi	r30, 0x93	; 147
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	a0 e8       	ldi	r26, 0x80	; 128
    2508:	bf e3       	ldi	r27, 0x3F	; 63
    250a:	80 83       	st	Z, r24
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	a2 83       	std	Z+2, r26	; 0x02
    2510:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2512:	8e 01       	movw	r16, r28
    2514:	07 59       	subi	r16, 0x97	; 151
    2516:	1f 4f       	sbci	r17, 0xFF	; 255
    2518:	fe 01       	movw	r30, r28
    251a:	e3 59       	subi	r30, 0x93	; 147
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	60 81       	ld	r22, Z
    2520:	71 81       	ldd	r23, Z+1	; 0x01
    2522:	82 81       	ldd	r24, Z+2	; 0x02
    2524:	93 81       	ldd	r25, Z+3	; 0x03
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	4a ef       	ldi	r20, 0xFA	; 250
    252c:	54 e4       	ldi	r21, 0x44	; 68
    252e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	f8 01       	movw	r30, r16
    2538:	80 83       	st	Z, r24
    253a:	91 83       	std	Z+1, r25	; 0x01
    253c:	a2 83       	std	Z+2, r26	; 0x02
    253e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2540:	fe 01       	movw	r30, r28
    2542:	e7 59       	subi	r30, 0x97	; 151
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	60 81       	ld	r22, Z
    2548:	71 81       	ldd	r23, Z+1	; 0x01
    254a:	82 81       	ldd	r24, Z+2	; 0x02
    254c:	93 81       	ldd	r25, Z+3	; 0x03
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e8       	ldi	r20, 0x80	; 128
    2554:	5f e3       	ldi	r21, 0x3F	; 63
    2556:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    255a:	88 23       	and	r24, r24
    255c:	44 f4       	brge	.+16     	; 0x256e <LCD_voidInit+0x4f0>
		__ticks = 1;
    255e:	fe 01       	movw	r30, r28
    2560:	e9 59       	subi	r30, 0x99	; 153
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	91 83       	std	Z+1, r25	; 0x01
    256a:	80 83       	st	Z, r24
    256c:	64 c0       	rjmp	.+200    	; 0x2636 <LCD_voidInit+0x5b8>
	else if (__tmp > 65535)
    256e:	fe 01       	movw	r30, r28
    2570:	e7 59       	subi	r30, 0x97	; 151
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	60 81       	ld	r22, Z
    2576:	71 81       	ldd	r23, Z+1	; 0x01
    2578:	82 81       	ldd	r24, Z+2	; 0x02
    257a:	93 81       	ldd	r25, Z+3	; 0x03
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	3f ef       	ldi	r19, 0xFF	; 255
    2580:	4f e7       	ldi	r20, 0x7F	; 127
    2582:	57 e4       	ldi	r21, 0x47	; 71
    2584:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2588:	18 16       	cp	r1, r24
    258a:	0c f0       	brlt	.+2      	; 0x258e <LCD_voidInit+0x510>
    258c:	43 c0       	rjmp	.+134    	; 0x2614 <LCD_voidInit+0x596>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258e:	fe 01       	movw	r30, r28
    2590:	e3 59       	subi	r30, 0x93	; 147
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	60 81       	ld	r22, Z
    2596:	71 81       	ldd	r23, Z+1	; 0x01
    2598:	82 81       	ldd	r24, Z+2	; 0x02
    259a:	93 81       	ldd	r25, Z+3	; 0x03
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	40 e2       	ldi	r20, 0x20	; 32
    25a2:	51 e4       	ldi	r21, 0x41	; 65
    25a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	8e 01       	movw	r16, r28
    25ae:	09 59       	subi	r16, 0x99	; 153
    25b0:	1f 4f       	sbci	r17, 0xFF	; 255
    25b2:	bc 01       	movw	r22, r24
    25b4:	cd 01       	movw	r24, r26
    25b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	f8 01       	movw	r30, r16
    25c0:	91 83       	std	Z+1, r25	; 0x01
    25c2:	80 83       	st	Z, r24
    25c4:	1f c0       	rjmp	.+62     	; 0x2604 <LCD_voidInit+0x586>
    25c6:	fe 01       	movw	r30, r28
    25c8:	eb 59       	subi	r30, 0x9B	; 155
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	88 ec       	ldi	r24, 0xC8	; 200
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	91 83       	std	Z+1, r25	; 0x01
    25d2:	80 83       	st	Z, r24
    25d4:	fe 01       	movw	r30, r28
    25d6:	eb 59       	subi	r30, 0x9B	; 155
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	80 81       	ld	r24, Z
    25dc:	91 81       	ldd	r25, Z+1	; 0x01
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	f1 f7       	brne	.-4      	; 0x25de <LCD_voidInit+0x560>
    25e2:	fe 01       	movw	r30, r28
    25e4:	eb 59       	subi	r30, 0x9B	; 155
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	91 83       	std	Z+1, r25	; 0x01
    25ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ec:	de 01       	movw	r26, r28
    25ee:	a9 59       	subi	r26, 0x99	; 153
    25f0:	bf 4f       	sbci	r27, 0xFF	; 255
    25f2:	fe 01       	movw	r30, r28
    25f4:	e9 59       	subi	r30, 0x99	; 153
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	80 81       	ld	r24, Z
    25fa:	91 81       	ldd	r25, Z+1	; 0x01
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	11 96       	adiw	r26, 0x01	; 1
    2600:	9c 93       	st	X, r25
    2602:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2604:	fe 01       	movw	r30, r28
    2606:	e9 59       	subi	r30, 0x99	; 153
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	80 81       	ld	r24, Z
    260c:	91 81       	ldd	r25, Z+1	; 0x01
    260e:	00 97       	sbiw	r24, 0x00	; 0
    2610:	d1 f6       	brne	.-76     	; 0x25c6 <LCD_voidInit+0x548>
    2612:	27 c0       	rjmp	.+78     	; 0x2662 <LCD_voidInit+0x5e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2614:	8e 01       	movw	r16, r28
    2616:	09 59       	subi	r16, 0x99	; 153
    2618:	1f 4f       	sbci	r17, 0xFF	; 255
    261a:	fe 01       	movw	r30, r28
    261c:	e7 59       	subi	r30, 0x97	; 151
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	60 81       	ld	r22, Z
    2622:	71 81       	ldd	r23, Z+1	; 0x01
    2624:	82 81       	ldd	r24, Z+2	; 0x02
    2626:	93 81       	ldd	r25, Z+3	; 0x03
    2628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	f8 01       	movw	r30, r16
    2632:	91 83       	std	Z+1, r25	; 0x01
    2634:	80 83       	st	Z, r24
    2636:	de 01       	movw	r26, r28
    2638:	ad 59       	subi	r26, 0x9D	; 157
    263a:	bf 4f       	sbci	r27, 0xFF	; 255
    263c:	fe 01       	movw	r30, r28
    263e:	e9 59       	subi	r30, 0x99	; 153
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	80 81       	ld	r24, Z
    2644:	91 81       	ldd	r25, Z+1	; 0x01
    2646:	8d 93       	st	X+, r24
    2648:	9c 93       	st	X, r25
    264a:	fe 01       	movw	r30, r28
    264c:	ed 59       	subi	r30, 0x9D	; 157
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	80 81       	ld	r24, Z
    2652:	91 81       	ldd	r25, Z+1	; 0x01
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	f1 f7       	brne	.-4      	; 0x2654 <LCD_voidInit+0x5d6>
    2658:	fe 01       	movw	r30, r28
    265a:	ed 59       	subi	r30, 0x9D	; 157
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	91 83       	std	Z+1, r25	; 0x01
    2660:	80 83       	st	Z, r24
			_delay_ms(1);
			voidWriteCmd(u8CntLoc,0x01);
    2662:	fe 01       	movw	r30, r28
    2664:	e2 57       	subi	r30, 0x72	; 114
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	80 81       	ld	r24, Z
    266a:	61 e0       	ldi	r22, 0x01	; 1
    266c:	0e 94 87 18 	call	0x310e	; 0x310e <voidWriteCmd>
    2670:	fe 01       	movw	r30, r28
    2672:	e1 5a       	subi	r30, 0xA1	; 161
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	a0 e4       	ldi	r26, 0x40	; 64
    267c:	b0 e4       	ldi	r27, 0x40	; 64
    267e:	80 83       	st	Z, r24
    2680:	91 83       	std	Z+1, r25	; 0x01
    2682:	a2 83       	std	Z+2, r26	; 0x02
    2684:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2686:	8e 01       	movw	r16, r28
    2688:	05 5a       	subi	r16, 0xA5	; 165
    268a:	1f 4f       	sbci	r17, 0xFF	; 255
    268c:	fe 01       	movw	r30, r28
    268e:	e1 5a       	subi	r30, 0xA1	; 161
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	60 81       	ld	r22, Z
    2694:	71 81       	ldd	r23, Z+1	; 0x01
    2696:	82 81       	ldd	r24, Z+2	; 0x02
    2698:	93 81       	ldd	r25, Z+3	; 0x03
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	4a ef       	ldi	r20, 0xFA	; 250
    26a0:	54 e4       	ldi	r21, 0x44	; 68
    26a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	f8 01       	movw	r30, r16
    26ac:	80 83       	st	Z, r24
    26ae:	91 83       	std	Z+1, r25	; 0x01
    26b0:	a2 83       	std	Z+2, r26	; 0x02
    26b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26b4:	fe 01       	movw	r30, r28
    26b6:	e5 5a       	subi	r30, 0xA5	; 165
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	60 81       	ld	r22, Z
    26bc:	71 81       	ldd	r23, Z+1	; 0x01
    26be:	82 81       	ldd	r24, Z+2	; 0x02
    26c0:	93 81       	ldd	r25, Z+3	; 0x03
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e8       	ldi	r20, 0x80	; 128
    26c8:	5f e3       	ldi	r21, 0x3F	; 63
    26ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ce:	88 23       	and	r24, r24
    26d0:	44 f4       	brge	.+16     	; 0x26e2 <LCD_voidInit+0x664>
		__ticks = 1;
    26d2:	fe 01       	movw	r30, r28
    26d4:	e7 5a       	subi	r30, 0xA7	; 167
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	91 83       	std	Z+1, r25	; 0x01
    26de:	80 83       	st	Z, r24
    26e0:	64 c0       	rjmp	.+200    	; 0x27aa <LCD_voidInit+0x72c>
	else if (__tmp > 65535)
    26e2:	fe 01       	movw	r30, r28
    26e4:	e5 5a       	subi	r30, 0xA5	; 165
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	60 81       	ld	r22, Z
    26ea:	71 81       	ldd	r23, Z+1	; 0x01
    26ec:	82 81       	ldd	r24, Z+2	; 0x02
    26ee:	93 81       	ldd	r25, Z+3	; 0x03
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	3f ef       	ldi	r19, 0xFF	; 255
    26f4:	4f e7       	ldi	r20, 0x7F	; 127
    26f6:	57 e4       	ldi	r21, 0x47	; 71
    26f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26fc:	18 16       	cp	r1, r24
    26fe:	0c f0       	brlt	.+2      	; 0x2702 <LCD_voidInit+0x684>
    2700:	43 c0       	rjmp	.+134    	; 0x2788 <LCD_voidInit+0x70a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2702:	fe 01       	movw	r30, r28
    2704:	e1 5a       	subi	r30, 0xA1	; 161
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	60 81       	ld	r22, Z
    270a:	71 81       	ldd	r23, Z+1	; 0x01
    270c:	82 81       	ldd	r24, Z+2	; 0x02
    270e:	93 81       	ldd	r25, Z+3	; 0x03
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	40 e2       	ldi	r20, 0x20	; 32
    2716:	51 e4       	ldi	r21, 0x41	; 65
    2718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	8e 01       	movw	r16, r28
    2722:	07 5a       	subi	r16, 0xA7	; 167
    2724:	1f 4f       	sbci	r17, 0xFF	; 255
    2726:	bc 01       	movw	r22, r24
    2728:	cd 01       	movw	r24, r26
    272a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	f8 01       	movw	r30, r16
    2734:	91 83       	std	Z+1, r25	; 0x01
    2736:	80 83       	st	Z, r24
    2738:	1f c0       	rjmp	.+62     	; 0x2778 <LCD_voidInit+0x6fa>
    273a:	fe 01       	movw	r30, r28
    273c:	e9 5a       	subi	r30, 0xA9	; 169
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	88 ec       	ldi	r24, 0xC8	; 200
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	91 83       	std	Z+1, r25	; 0x01
    2746:	80 83       	st	Z, r24
    2748:	fe 01       	movw	r30, r28
    274a:	e9 5a       	subi	r30, 0xA9	; 169
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	80 81       	ld	r24, Z
    2750:	91 81       	ldd	r25, Z+1	; 0x01
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	f1 f7       	brne	.-4      	; 0x2752 <LCD_voidInit+0x6d4>
    2756:	fe 01       	movw	r30, r28
    2758:	e9 5a       	subi	r30, 0xA9	; 169
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2760:	de 01       	movw	r26, r28
    2762:	a7 5a       	subi	r26, 0xA7	; 167
    2764:	bf 4f       	sbci	r27, 0xFF	; 255
    2766:	fe 01       	movw	r30, r28
    2768:	e7 5a       	subi	r30, 0xA7	; 167
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	80 81       	ld	r24, Z
    276e:	91 81       	ldd	r25, Z+1	; 0x01
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	11 96       	adiw	r26, 0x01	; 1
    2774:	9c 93       	st	X, r25
    2776:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2778:	fe 01       	movw	r30, r28
    277a:	e7 5a       	subi	r30, 0xA7	; 167
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	80 81       	ld	r24, Z
    2780:	91 81       	ldd	r25, Z+1	; 0x01
    2782:	00 97       	sbiw	r24, 0x00	; 0
    2784:	d1 f6       	brne	.-76     	; 0x273a <LCD_voidInit+0x6bc>
    2786:	27 c0       	rjmp	.+78     	; 0x27d6 <LCD_voidInit+0x758>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2788:	8e 01       	movw	r16, r28
    278a:	07 5a       	subi	r16, 0xA7	; 167
    278c:	1f 4f       	sbci	r17, 0xFF	; 255
    278e:	fe 01       	movw	r30, r28
    2790:	e5 5a       	subi	r30, 0xA5	; 165
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	60 81       	ld	r22, Z
    2796:	71 81       	ldd	r23, Z+1	; 0x01
    2798:	82 81       	ldd	r24, Z+2	; 0x02
    279a:	93 81       	ldd	r25, Z+3	; 0x03
    279c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	f8 01       	movw	r30, r16
    27a6:	91 83       	std	Z+1, r25	; 0x01
    27a8:	80 83       	st	Z, r24
    27aa:	de 01       	movw	r26, r28
    27ac:	ab 5a       	subi	r26, 0xAB	; 171
    27ae:	bf 4f       	sbci	r27, 0xFF	; 255
    27b0:	fe 01       	movw	r30, r28
    27b2:	e7 5a       	subi	r30, 0xA7	; 167
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	80 81       	ld	r24, Z
    27b8:	91 81       	ldd	r25, Z+1	; 0x01
    27ba:	8d 93       	st	X+, r24
    27bc:	9c 93       	st	X, r25
    27be:	fe 01       	movw	r30, r28
    27c0:	eb 5a       	subi	r30, 0xAB	; 171
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	80 81       	ld	r24, Z
    27c6:	91 81       	ldd	r25, Z+1	; 0x01
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	f1 f7       	brne	.-4      	; 0x27c8 <LCD_voidInit+0x74a>
    27cc:	fe 01       	movw	r30, r28
    27ce:	eb 5a       	subi	r30, 0xAB	; 171
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	91 83       	std	Z+1, r25	; 0x01
    27d4:	80 83       	st	Z, r24
			_delay_ms(3);
			u8commnad=0b00000100 | lcdarr[u8CntLoc].lcdswconfig.u8direction<<1 |
    27d6:	fe 01       	movw	r30, r28
    27d8:	e2 57       	subi	r30, 0x72	; 114
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	80 81       	ld	r24, Z
    27de:	28 2f       	mov	r18, r24
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	c9 01       	movw	r24, r18
    27e4:	88 0f       	add	r24, r24
    27e6:	99 1f       	adc	r25, r25
    27e8:	82 0f       	add	r24, r18
    27ea:	93 1f       	adc	r25, r19
    27ec:	88 0f       	add	r24, r24
    27ee:	99 1f       	adc	r25, r25
    27f0:	88 0f       	add	r24, r24
    27f2:	99 1f       	adc	r25, r25
    27f4:	fc 01       	movw	r30, r24
    27f6:	e0 55       	subi	r30, 0x50	; 80
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	80 81       	ld	r24, Z
    27fc:	88 1f       	adc	r24, r24
    27fe:	88 27       	eor	r24, r24
    2800:	88 1f       	adc	r24, r24
    2802:	88 2f       	mov	r24, r24
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	88 0f       	add	r24, r24
    2808:	99 1f       	adc	r25, r25
    280a:	48 2f       	mov	r20, r24
    280c:	44 60       	ori	r20, 0x04	; 4
    280e:	fe 01       	movw	r30, r28
    2810:	e2 57       	subi	r30, 0x72	; 114
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	80 81       	ld	r24, Z
    2816:	28 2f       	mov	r18, r24
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	c9 01       	movw	r24, r18
    281c:	88 0f       	add	r24, r24
    281e:	99 1f       	adc	r25, r25
    2820:	82 0f       	add	r24, r18
    2822:	93 1f       	adc	r25, r19
    2824:	88 0f       	add	r24, r24
    2826:	99 1f       	adc	r25, r25
    2828:	88 0f       	add	r24, r24
    282a:	99 1f       	adc	r25, r25
    282c:	fc 01       	movw	r30, r24
    282e:	e0 55       	subi	r30, 0x50	; 80
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	80 81       	ld	r24, Z
    2834:	82 95       	swap	r24
    2836:	86 95       	lsr	r24
    2838:	87 70       	andi	r24, 0x07	; 7
    283a:	81 70       	andi	r24, 0x01	; 1
    283c:	84 2b       	or	r24, r20
    283e:	fe 01       	movw	r30, r28
    2840:	e3 57       	subi	r30, 0x73	; 115
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	80 83       	st	Z, r24

								lcdarr[u8CntLoc].lcdswconfig.u8shift<<0;


			voidWriteCmd(u8CntLoc,u8commnad);
    2846:	fe 01       	movw	r30, r28
    2848:	e2 57       	subi	r30, 0x72	; 114
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	de 01       	movw	r26, r28
    284e:	a3 57       	subi	r26, 0x73	; 115
    2850:	bf 4f       	sbci	r27, 0xFF	; 255
    2852:	80 81       	ld	r24, Z
    2854:	6c 91       	ld	r22, X
    2856:	0e 94 87 18 	call	0x310e	; 0x310e <voidWriteCmd>
    285a:	fe 01       	movw	r30, r28
    285c:	ef 5a       	subi	r30, 0xAF	; 175
    285e:	ff 4f       	sbci	r31, 0xFF	; 255
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	a0 e4       	ldi	r26, 0x40	; 64
    2866:	b0 e4       	ldi	r27, 0x40	; 64
    2868:	80 83       	st	Z, r24
    286a:	91 83       	std	Z+1, r25	; 0x01
    286c:	a2 83       	std	Z+2, r26	; 0x02
    286e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2870:	8e 01       	movw	r16, r28
    2872:	03 5b       	subi	r16, 0xB3	; 179
    2874:	1f 4f       	sbci	r17, 0xFF	; 255
    2876:	fe 01       	movw	r30, r28
    2878:	ef 5a       	subi	r30, 0xAF	; 175
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	60 81       	ld	r22, Z
    287e:	71 81       	ldd	r23, Z+1	; 0x01
    2880:	82 81       	ldd	r24, Z+2	; 0x02
    2882:	93 81       	ldd	r25, Z+3	; 0x03
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	4a ef       	ldi	r20, 0xFA	; 250
    288a:	54 e4       	ldi	r21, 0x44	; 68
    288c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	f8 01       	movw	r30, r16
    2896:	80 83       	st	Z, r24
    2898:	91 83       	std	Z+1, r25	; 0x01
    289a:	a2 83       	std	Z+2, r26	; 0x02
    289c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    289e:	fe 01       	movw	r30, r28
    28a0:	e3 5b       	subi	r30, 0xB3	; 179
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	60 81       	ld	r22, Z
    28a6:	71 81       	ldd	r23, Z+1	; 0x01
    28a8:	82 81       	ldd	r24, Z+2	; 0x02
    28aa:	93 81       	ldd	r25, Z+3	; 0x03
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e8       	ldi	r20, 0x80	; 128
    28b2:	5f e3       	ldi	r21, 0x3F	; 63
    28b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28b8:	88 23       	and	r24, r24
    28ba:	44 f4       	brge	.+16     	; 0x28cc <LCD_voidInit+0x84e>
		__ticks = 1;
    28bc:	fe 01       	movw	r30, r28
    28be:	e5 5b       	subi	r30, 0xB5	; 181
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	91 83       	std	Z+1, r25	; 0x01
    28c8:	80 83       	st	Z, r24
    28ca:	64 c0       	rjmp	.+200    	; 0x2994 <LCD_voidInit+0x916>
	else if (__tmp > 65535)
    28cc:	fe 01       	movw	r30, r28
    28ce:	e3 5b       	subi	r30, 0xB3	; 179
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	60 81       	ld	r22, Z
    28d4:	71 81       	ldd	r23, Z+1	; 0x01
    28d6:	82 81       	ldd	r24, Z+2	; 0x02
    28d8:	93 81       	ldd	r25, Z+3	; 0x03
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	3f ef       	ldi	r19, 0xFF	; 255
    28de:	4f e7       	ldi	r20, 0x7F	; 127
    28e0:	57 e4       	ldi	r21, 0x47	; 71
    28e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28e6:	18 16       	cp	r1, r24
    28e8:	0c f0       	brlt	.+2      	; 0x28ec <LCD_voidInit+0x86e>
    28ea:	43 c0       	rjmp	.+134    	; 0x2972 <LCD_voidInit+0x8f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ec:	fe 01       	movw	r30, r28
    28ee:	ef 5a       	subi	r30, 0xAF	; 175
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	60 81       	ld	r22, Z
    28f4:	71 81       	ldd	r23, Z+1	; 0x01
    28f6:	82 81       	ldd	r24, Z+2	; 0x02
    28f8:	93 81       	ldd	r25, Z+3	; 0x03
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	40 e2       	ldi	r20, 0x20	; 32
    2900:	51 e4       	ldi	r21, 0x41	; 65
    2902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	8e 01       	movw	r16, r28
    290c:	05 5b       	subi	r16, 0xB5	; 181
    290e:	1f 4f       	sbci	r17, 0xFF	; 255
    2910:	bc 01       	movw	r22, r24
    2912:	cd 01       	movw	r24, r26
    2914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	f8 01       	movw	r30, r16
    291e:	91 83       	std	Z+1, r25	; 0x01
    2920:	80 83       	st	Z, r24
    2922:	1f c0       	rjmp	.+62     	; 0x2962 <LCD_voidInit+0x8e4>
    2924:	fe 01       	movw	r30, r28
    2926:	e7 5b       	subi	r30, 0xB7	; 183
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	88 ec       	ldi	r24, 0xC8	; 200
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	91 83       	std	Z+1, r25	; 0x01
    2930:	80 83       	st	Z, r24
    2932:	fe 01       	movw	r30, r28
    2934:	e7 5b       	subi	r30, 0xB7	; 183
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	80 81       	ld	r24, Z
    293a:	91 81       	ldd	r25, Z+1	; 0x01
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	f1 f7       	brne	.-4      	; 0x293c <LCD_voidInit+0x8be>
    2940:	fe 01       	movw	r30, r28
    2942:	e7 5b       	subi	r30, 0xB7	; 183
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	91 83       	std	Z+1, r25	; 0x01
    2948:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    294a:	de 01       	movw	r26, r28
    294c:	a5 5b       	subi	r26, 0xB5	; 181
    294e:	bf 4f       	sbci	r27, 0xFF	; 255
    2950:	fe 01       	movw	r30, r28
    2952:	e5 5b       	subi	r30, 0xB5	; 181
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	80 81       	ld	r24, Z
    2958:	91 81       	ldd	r25, Z+1	; 0x01
    295a:	01 97       	sbiw	r24, 0x01	; 1
    295c:	11 96       	adiw	r26, 0x01	; 1
    295e:	9c 93       	st	X, r25
    2960:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2962:	fe 01       	movw	r30, r28
    2964:	e5 5b       	subi	r30, 0xB5	; 181
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	80 81       	ld	r24, Z
    296a:	91 81       	ldd	r25, Z+1	; 0x01
    296c:	00 97       	sbiw	r24, 0x00	; 0
    296e:	d1 f6       	brne	.-76     	; 0x2924 <LCD_voidInit+0x8a6>
    2970:	b1 c3       	rjmp	.+1890   	; 0x30d4 <LCD_voidInit+0x1056>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2972:	8e 01       	movw	r16, r28
    2974:	05 5b       	subi	r16, 0xB5	; 181
    2976:	1f 4f       	sbci	r17, 0xFF	; 255
    2978:	fe 01       	movw	r30, r28
    297a:	e3 5b       	subi	r30, 0xB3	; 179
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	60 81       	ld	r22, Z
    2980:	71 81       	ldd	r23, Z+1	; 0x01
    2982:	82 81       	ldd	r24, Z+2	; 0x02
    2984:	93 81       	ldd	r25, Z+3	; 0x03
    2986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	f8 01       	movw	r30, r16
    2990:	91 83       	std	Z+1, r25	; 0x01
    2992:	80 83       	st	Z, r24
    2994:	de 01       	movw	r26, r28
    2996:	a9 5b       	subi	r26, 0xB9	; 185
    2998:	bf 4f       	sbci	r27, 0xFF	; 255
    299a:	fe 01       	movw	r30, r28
    299c:	e5 5b       	subi	r30, 0xB5	; 181
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	80 81       	ld	r24, Z
    29a2:	91 81       	ldd	r25, Z+1	; 0x01
    29a4:	11 96       	adiw	r26, 0x01	; 1
    29a6:	9c 93       	st	X, r25
    29a8:	8e 93       	st	-X, r24
    29aa:	fe 01       	movw	r30, r28
    29ac:	e9 5b       	subi	r30, 0xB9	; 185
    29ae:	ff 4f       	sbci	r31, 0xFF	; 255
    29b0:	80 81       	ld	r24, Z
    29b2:	91 81       	ldd	r25, Z+1	; 0x01
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <LCD_voidInit+0x936>
    29b8:	fe 01       	movw	r30, r28
    29ba:	e9 5b       	subi	r30, 0xB9	; 185
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	91 83       	std	Z+1, r25	; 0x01
    29c0:	80 83       	st	Z, r24
    29c2:	88 c3       	rjmp	.+1808   	; 0x30d4 <LCD_voidInit+0x1056>
    29c4:	fe 01       	movw	r30, r28
    29c6:	ed 5b       	subi	r30, 0xBD	; 189
    29c8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	a0 ef       	ldi	r26, 0xF0	; 240
    29d0:	b1 e4       	ldi	r27, 0x41	; 65
    29d2:	80 83       	st	Z, r24
    29d4:	91 83       	std	Z+1, r25	; 0x01
    29d6:	a2 83       	std	Z+2, r26	; 0x02
    29d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29da:	8e 01       	movw	r16, r28
    29dc:	01 5c       	subi	r16, 0xC1	; 193
    29de:	1f 4f       	sbci	r17, 0xFF	; 255
    29e0:	fe 01       	movw	r30, r28
    29e2:	ed 5b       	subi	r30, 0xBD	; 189
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	60 81       	ld	r22, Z
    29e8:	71 81       	ldd	r23, Z+1	; 0x01
    29ea:	82 81       	ldd	r24, Z+2	; 0x02
    29ec:	93 81       	ldd	r25, Z+3	; 0x03
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	4a ef       	ldi	r20, 0xFA	; 250
    29f4:	54 e4       	ldi	r21, 0x44	; 68
    29f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	f8 01       	movw	r30, r16
    2a00:	80 83       	st	Z, r24
    2a02:	91 83       	std	Z+1, r25	; 0x01
    2a04:	a2 83       	std	Z+2, r26	; 0x02
    2a06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a08:	fe 01       	movw	r30, r28
    2a0a:	ff 96       	adiw	r30, 0x3f	; 63
    2a0c:	60 81       	ld	r22, Z
    2a0e:	71 81       	ldd	r23, Z+1	; 0x01
    2a10:	82 81       	ldd	r24, Z+2	; 0x02
    2a12:	93 81       	ldd	r25, Z+3	; 0x03
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	40 e8       	ldi	r20, 0x80	; 128
    2a1a:	5f e3       	ldi	r21, 0x3F	; 63
    2a1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a20:	88 23       	and	r24, r24
    2a22:	2c f4       	brge	.+10     	; 0x2a2e <LCD_voidInit+0x9b0>
		__ticks = 1;
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	9e af       	std	Y+62, r25	; 0x3e
    2a2a:	8d af       	std	Y+61, r24	; 0x3d
    2a2c:	46 c0       	rjmp	.+140    	; 0x2aba <LCD_voidInit+0xa3c>
	else if (__tmp > 65535)
    2a2e:	fe 01       	movw	r30, r28
    2a30:	ff 96       	adiw	r30, 0x3f	; 63
    2a32:	60 81       	ld	r22, Z
    2a34:	71 81       	ldd	r23, Z+1	; 0x01
    2a36:	82 81       	ldd	r24, Z+2	; 0x02
    2a38:	93 81       	ldd	r25, Z+3	; 0x03
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	3f ef       	ldi	r19, 0xFF	; 255
    2a3e:	4f e7       	ldi	r20, 0x7F	; 127
    2a40:	57 e4       	ldi	r21, 0x47	; 71
    2a42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a46:	18 16       	cp	r1, r24
    2a48:	64 f5       	brge	.+88     	; 0x2aa2 <LCD_voidInit+0xa24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	ed 5b       	subi	r30, 0xBD	; 189
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	60 81       	ld	r22, Z
    2a52:	71 81       	ldd	r23, Z+1	; 0x01
    2a54:	82 81       	ldd	r24, Z+2	; 0x02
    2a56:	93 81       	ldd	r25, Z+3	; 0x03
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e2       	ldi	r20, 0x20	; 32
    2a5e:	51 e4       	ldi	r21, 0x41	; 65
    2a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	bc 01       	movw	r22, r24
    2a6a:	cd 01       	movw	r24, r26
    2a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	9e af       	std	Y+62, r25	; 0x3e
    2a76:	8d af       	std	Y+61, r24	; 0x3d
    2a78:	0f c0       	rjmp	.+30     	; 0x2a98 <LCD_voidInit+0xa1a>
    2a7a:	88 ec       	ldi	r24, 0xC8	; 200
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	9c af       	std	Y+60, r25	; 0x3c
    2a80:	8b af       	std	Y+59, r24	; 0x3b
    2a82:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a84:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <LCD_voidInit+0xa08>
    2a8a:	9c af       	std	Y+60, r25	; 0x3c
    2a8c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a8e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a90:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	9e af       	std	Y+62, r25	; 0x3e
    2a96:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a98:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a9c:	00 97       	sbiw	r24, 0x00	; 0
    2a9e:	69 f7       	brne	.-38     	; 0x2a7a <LCD_voidInit+0x9fc>
    2aa0:	16 c0       	rjmp	.+44     	; 0x2ace <LCD_voidInit+0xa50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	ff 96       	adiw	r30, 0x3f	; 63
    2aa6:	60 81       	ld	r22, Z
    2aa8:	71 81       	ldd	r23, Z+1	; 0x01
    2aaa:	82 81       	ldd	r24, Z+2	; 0x02
    2aac:	93 81       	ldd	r25, Z+3	; 0x03
    2aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	cb 01       	movw	r24, r22
    2ab6:	9e af       	std	Y+62, r25	; 0x3e
    2ab8:	8d af       	std	Y+61, r24	; 0x3d
    2aba:	8d ad       	ldd	r24, Y+61	; 0x3d
    2abc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2abe:	9a af       	std	Y+58, r25	; 0x3a
    2ac0:	89 af       	std	Y+57, r24	; 0x39
    2ac2:	89 ad       	ldd	r24, Y+57	; 0x39
    2ac4:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	f1 f7       	brne	.-4      	; 0x2ac6 <LCD_voidInit+0xa48>
    2aca:	9a af       	std	Y+58, r25	; 0x3a
    2acc:	89 af       	std	Y+57, r24	; 0x39
		}
		else
		{
			/*step 1*/
			_delay_ms(30);
			voidWriteCmd(u8CntLoc,0b00100000);
    2ace:	fe 01       	movw	r30, r28
    2ad0:	e2 57       	subi	r30, 0x72	; 114
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	80 81       	ld	r24, Z
    2ad6:	60 e2       	ldi	r22, 0x20	; 32
    2ad8:	0e 94 87 18 	call	0x310e	; 0x310e <voidWriteCmd>

			voidWriteCmd(u8CntLoc,0b00100000);
    2adc:	fe 01       	movw	r30, r28
    2ade:	e2 57       	subi	r30, 0x72	; 114
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	80 81       	ld	r24, Z
    2ae4:	60 e2       	ldi	r22, 0x20	; 32
    2ae6:	0e 94 87 18 	call	0x310e	; 0x310e <voidWriteCmd>

			u8commnad=0b00000000 |lcdarr[u8CntLoc].lcdswconfig.u8line<<7 |
    2aea:	fe 01       	movw	r30, r28
    2aec:	e2 57       	subi	r30, 0x72	; 114
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	80 81       	ld	r24, Z
    2af2:	28 2f       	mov	r18, r24
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	c9 01       	movw	r24, r18
    2af8:	88 0f       	add	r24, r24
    2afa:	99 1f       	adc	r25, r25
    2afc:	82 0f       	add	r24, r18
    2afe:	93 1f       	adc	r25, r19
    2b00:	88 0f       	add	r24, r24
    2b02:	99 1f       	adc	r25, r25
    2b04:	88 0f       	add	r24, r24
    2b06:	99 1f       	adc	r25, r25
    2b08:	fc 01       	movw	r30, r24
    2b0a:	e0 55       	subi	r30, 0x50	; 80
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	80 81       	ld	r24, Z
    2b10:	86 95       	lsr	r24
    2b12:	81 70       	andi	r24, 0x01	; 1
    2b14:	88 2f       	mov	r24, r24
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	96 95       	lsr	r25
    2b1a:	98 2f       	mov	r25, r24
    2b1c:	88 27       	eor	r24, r24
    2b1e:	97 95       	ror	r25
    2b20:	87 95       	ror	r24
    2b22:	48 2f       	mov	r20, r24
    2b24:	fe 01       	movw	r30, r28
    2b26:	e2 57       	subi	r30, 0x72	; 114
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	80 81       	ld	r24, Z
    2b2c:	28 2f       	mov	r18, r24
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	c9 01       	movw	r24, r18
    2b32:	88 0f       	add	r24, r24
    2b34:	99 1f       	adc	r25, r25
    2b36:	82 0f       	add	r24, r18
    2b38:	93 1f       	adc	r25, r19
    2b3a:	88 0f       	add	r24, r24
    2b3c:	99 1f       	adc	r25, r25
    2b3e:	88 0f       	add	r24, r24
    2b40:	99 1f       	adc	r25, r25
    2b42:	fc 01       	movw	r30, r24
    2b44:	e0 55       	subi	r30, 0x50	; 80
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	80 81       	ld	r24, Z
    2b4a:	86 95       	lsr	r24
    2b4c:	86 95       	lsr	r24
    2b4e:	81 70       	andi	r24, 0x01	; 1
    2b50:	88 2f       	mov	r24, r24
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	00 24       	eor	r0, r0
    2b56:	96 95       	lsr	r25
    2b58:	87 95       	ror	r24
    2b5a:	07 94       	ror	r0
    2b5c:	96 95       	lsr	r25
    2b5e:	87 95       	ror	r24
    2b60:	07 94       	ror	r0
    2b62:	98 2f       	mov	r25, r24
    2b64:	80 2d       	mov	r24, r0
    2b66:	84 2b       	or	r24, r20
    2b68:	fe 01       	movw	r30, r28
    2b6a:	e3 57       	subi	r30, 0x73	; 115
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	80 83       	st	Z, r24
			lcdarr[u8CntLoc].lcdswconfig.u8font <<6 ;

			voidWriteCmd(u8CntLoc,u8commnad);
    2b70:	fe 01       	movw	r30, r28
    2b72:	e2 57       	subi	r30, 0x72	; 114
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	de 01       	movw	r26, r28
    2b78:	a3 57       	subi	r26, 0x73	; 115
    2b7a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b7c:	80 81       	ld	r24, Z
    2b7e:	6c 91       	ld	r22, X
    2b80:	0e 94 87 18 	call	0x310e	; 0x310e <voidWriteCmd>
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	a0 e8       	ldi	r26, 0x80	; 128
    2b8a:	bf e3       	ldi	r27, 0x3F	; 63
    2b8c:	8d ab       	std	Y+53, r24	; 0x35
    2b8e:	9e ab       	std	Y+54, r25	; 0x36
    2b90:	af ab       	std	Y+55, r26	; 0x37
    2b92:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b94:	6d a9       	ldd	r22, Y+53	; 0x35
    2b96:	7e a9       	ldd	r23, Y+54	; 0x36
    2b98:	8f a9       	ldd	r24, Y+55	; 0x37
    2b9a:	98 ad       	ldd	r25, Y+56	; 0x38
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	4a ef       	ldi	r20, 0xFA	; 250
    2ba2:	54 e4       	ldi	r21, 0x44	; 68
    2ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	89 ab       	std	Y+49, r24	; 0x31
    2bae:	9a ab       	std	Y+50, r25	; 0x32
    2bb0:	ab ab       	std	Y+51, r26	; 0x33
    2bb2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bb4:	69 a9       	ldd	r22, Y+49	; 0x31
    2bb6:	7a a9       	ldd	r23, Y+50	; 0x32
    2bb8:	8b a9       	ldd	r24, Y+51	; 0x33
    2bba:	9c a9       	ldd	r25, Y+52	; 0x34
    2bbc:	20 e0       	ldi	r18, 0x00	; 0
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	40 e8       	ldi	r20, 0x80	; 128
    2bc2:	5f e3       	ldi	r21, 0x3F	; 63
    2bc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bc8:	88 23       	and	r24, r24
    2bca:	2c f4       	brge	.+10     	; 0x2bd6 <LCD_voidInit+0xb58>
		__ticks = 1;
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	98 ab       	std	Y+48, r25	; 0x30
    2bd2:	8f a7       	std	Y+47, r24	; 0x2f
    2bd4:	3f c0       	rjmp	.+126    	; 0x2c54 <LCD_voidInit+0xbd6>
	else if (__tmp > 65535)
    2bd6:	69 a9       	ldd	r22, Y+49	; 0x31
    2bd8:	7a a9       	ldd	r23, Y+50	; 0x32
    2bda:	8b a9       	ldd	r24, Y+51	; 0x33
    2bdc:	9c a9       	ldd	r25, Y+52	; 0x34
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	3f ef       	ldi	r19, 0xFF	; 255
    2be2:	4f e7       	ldi	r20, 0x7F	; 127
    2be4:	57 e4       	ldi	r21, 0x47	; 71
    2be6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bea:	18 16       	cp	r1, r24
    2bec:	4c f5       	brge	.+82     	; 0x2c40 <LCD_voidInit+0xbc2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bee:	6d a9       	ldd	r22, Y+53	; 0x35
    2bf0:	7e a9       	ldd	r23, Y+54	; 0x36
    2bf2:	8f a9       	ldd	r24, Y+55	; 0x37
    2bf4:	98 ad       	ldd	r25, Y+56	; 0x38
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	40 e2       	ldi	r20, 0x20	; 32
    2bfc:	51 e4       	ldi	r21, 0x41	; 65
    2bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	bc 01       	movw	r22, r24
    2c08:	cd 01       	movw	r24, r26
    2c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	98 ab       	std	Y+48, r25	; 0x30
    2c14:	8f a7       	std	Y+47, r24	; 0x2f
    2c16:	0f c0       	rjmp	.+30     	; 0x2c36 <LCD_voidInit+0xbb8>
    2c18:	88 ec       	ldi	r24, 0xC8	; 200
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	9e a7       	std	Y+46, r25	; 0x2e
    2c1e:	8d a7       	std	Y+45, r24	; 0x2d
    2c20:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c22:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c24:	01 97       	sbiw	r24, 0x01	; 1
    2c26:	f1 f7       	brne	.-4      	; 0x2c24 <LCD_voidInit+0xba6>
    2c28:	9e a7       	std	Y+46, r25	; 0x2e
    2c2a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c2e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	98 ab       	std	Y+48, r25	; 0x30
    2c34:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c36:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c38:	98 a9       	ldd	r25, Y+48	; 0x30
    2c3a:	00 97       	sbiw	r24, 0x00	; 0
    2c3c:	69 f7       	brne	.-38     	; 0x2c18 <LCD_voidInit+0xb9a>
    2c3e:	14 c0       	rjmp	.+40     	; 0x2c68 <LCD_voidInit+0xbea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c40:	69 a9       	ldd	r22, Y+49	; 0x31
    2c42:	7a a9       	ldd	r23, Y+50	; 0x32
    2c44:	8b a9       	ldd	r24, Y+51	; 0x33
    2c46:	9c a9       	ldd	r25, Y+52	; 0x34
    2c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	98 ab       	std	Y+48, r25	; 0x30
    2c52:	8f a7       	std	Y+47, r24	; 0x2f
    2c54:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c56:	98 a9       	ldd	r25, Y+48	; 0x30
    2c58:	9c a7       	std	Y+44, r25	; 0x2c
    2c5a:	8b a7       	std	Y+43, r24	; 0x2b
    2c5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c5e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c60:	01 97       	sbiw	r24, 0x01	; 1
    2c62:	f1 f7       	brne	.-4      	; 0x2c60 <LCD_voidInit+0xbe2>
    2c64:	9c a7       	std	Y+44, r25	; 0x2c
    2c66:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);

			voidWriteCmd(u8CntLoc,0b00000000);
    2c68:	fe 01       	movw	r30, r28
    2c6a:	e2 57       	subi	r30, 0x72	; 114
    2c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6e:	80 81       	ld	r24, Z
    2c70:	60 e0       	ldi	r22, 0x00	; 0
    2c72:	0e 94 87 18 	call	0x310e	; 0x310e <voidWriteCmd>

			u8commnad=0b10000000 |lcdarr[u8CntLoc].lcdswconfig.u8display<<6|
    2c76:	fe 01       	movw	r30, r28
    2c78:	e2 57       	subi	r30, 0x72	; 114
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	80 81       	ld	r24, Z
    2c7e:	28 2f       	mov	r18, r24
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	c9 01       	movw	r24, r18
    2c84:	88 0f       	add	r24, r24
    2c86:	99 1f       	adc	r25, r25
    2c88:	82 0f       	add	r24, r18
    2c8a:	93 1f       	adc	r25, r19
    2c8c:	88 0f       	add	r24, r24
    2c8e:	99 1f       	adc	r25, r25
    2c90:	88 0f       	add	r24, r24
    2c92:	99 1f       	adc	r25, r25
    2c94:	fc 01       	movw	r30, r24
    2c96:	e0 55       	subi	r30, 0x50	; 80
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	80 81       	ld	r24, Z
    2c9c:	82 95       	swap	r24
    2c9e:	86 95       	lsr	r24
    2ca0:	86 95       	lsr	r24
    2ca2:	83 70       	andi	r24, 0x03	; 3
    2ca4:	81 70       	andi	r24, 0x01	; 1
    2ca6:	88 2f       	mov	r24, r24
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	00 24       	eor	r0, r0
    2cac:	96 95       	lsr	r25
    2cae:	87 95       	ror	r24
    2cb0:	07 94       	ror	r0
    2cb2:	96 95       	lsr	r25
    2cb4:	87 95       	ror	r24
    2cb6:	07 94       	ror	r0
    2cb8:	98 2f       	mov	r25, r24
    2cba:	80 2d       	mov	r24, r0
    2cbc:	48 2f       	mov	r20, r24
    2cbe:	40 68       	ori	r20, 0x80	; 128
    2cc0:	fe 01       	movw	r30, r28
    2cc2:	e2 57       	subi	r30, 0x72	; 114
    2cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc6:	80 81       	ld	r24, Z
    2cc8:	28 2f       	mov	r18, r24
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	c9 01       	movw	r24, r18
    2cce:	88 0f       	add	r24, r24
    2cd0:	99 1f       	adc	r25, r25
    2cd2:	82 0f       	add	r24, r18
    2cd4:	93 1f       	adc	r25, r19
    2cd6:	88 0f       	add	r24, r24
    2cd8:	99 1f       	adc	r25, r25
    2cda:	88 0f       	add	r24, r24
    2cdc:	99 1f       	adc	r25, r25
    2cde:	fc 01       	movw	r30, r24
    2ce0:	e0 55       	subi	r30, 0x50	; 80
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	80 81       	ld	r24, Z
    2ce6:	86 95       	lsr	r24
    2ce8:	86 95       	lsr	r24
    2cea:	86 95       	lsr	r24
    2cec:	81 70       	andi	r24, 0x01	; 1
    2cee:	88 2f       	mov	r24, r24
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	88 0f       	add	r24, r24
    2cf4:	99 1f       	adc	r25, r25
    2cf6:	82 95       	swap	r24
    2cf8:	92 95       	swap	r25
    2cfa:	90 7f       	andi	r25, 0xF0	; 240
    2cfc:	98 27       	eor	r25, r24
    2cfe:	80 7f       	andi	r24, 0xF0	; 240
    2d00:	98 27       	eor	r25, r24
    2d02:	48 2b       	or	r20, r24
    2d04:	fe 01       	movw	r30, r28
    2d06:	e2 57       	subi	r30, 0x72	; 114
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	80 81       	ld	r24, Z
    2d0c:	28 2f       	mov	r18, r24
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	c9 01       	movw	r24, r18
    2d12:	88 0f       	add	r24, r24
    2d14:	99 1f       	adc	r25, r25
    2d16:	82 0f       	add	r24, r18
    2d18:	93 1f       	adc	r25, r19
    2d1a:	88 0f       	add	r24, r24
    2d1c:	99 1f       	adc	r25, r25
    2d1e:	88 0f       	add	r24, r24
    2d20:	99 1f       	adc	r25, r25
    2d22:	fc 01       	movw	r30, r24
    2d24:	e0 55       	subi	r30, 0x50	; 80
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	80 81       	ld	r24, Z
    2d2a:	82 95       	swap	r24
    2d2c:	8f 70       	andi	r24, 0x0F	; 15
    2d2e:	81 70       	andi	r24, 0x01	; 1
    2d30:	88 2f       	mov	r24, r24
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	82 95       	swap	r24
    2d36:	92 95       	swap	r25
    2d38:	90 7f       	andi	r25, 0xF0	; 240
    2d3a:	98 27       	eor	r25, r24
    2d3c:	80 7f       	andi	r24, 0xF0	; 240
    2d3e:	98 27       	eor	r25, r24
    2d40:	84 2b       	or	r24, r20
    2d42:	fe 01       	movw	r30, r28
    2d44:	e3 57       	subi	r30, 0x73	; 115
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	80 83       	st	Z, r24
			lcdarr[u8CntLoc].lcdswconfig.u8coursorstate<<5 |
			lcdarr[u8CntLoc].lcdswconfig.u8coursorblink<<4 ;
			voidWriteCmd(u8CntLoc,u8commnad);
    2d4a:	fe 01       	movw	r30, r28
    2d4c:	e2 57       	subi	r30, 0x72	; 114
    2d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d50:	de 01       	movw	r26, r28
    2d52:	a3 57       	subi	r26, 0x73	; 115
    2d54:	bf 4f       	sbci	r27, 0xFF	; 255
    2d56:	80 81       	ld	r24, Z
    2d58:	6c 91       	ld	r22, X
    2d5a:	0e 94 87 18 	call	0x310e	; 0x310e <voidWriteCmd>
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	a0 e8       	ldi	r26, 0x80	; 128
    2d64:	bf e3       	ldi	r27, 0x3F	; 63
    2d66:	8f a3       	std	Y+39, r24	; 0x27
    2d68:	98 a7       	std	Y+40, r25	; 0x28
    2d6a:	a9 a7       	std	Y+41, r26	; 0x29
    2d6c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d6e:	6f a1       	ldd	r22, Y+39	; 0x27
    2d70:	78 a5       	ldd	r23, Y+40	; 0x28
    2d72:	89 a5       	ldd	r24, Y+41	; 0x29
    2d74:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	4a ef       	ldi	r20, 0xFA	; 250
    2d7c:	54 e4       	ldi	r21, 0x44	; 68
    2d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	8b a3       	std	Y+35, r24	; 0x23
    2d88:	9c a3       	std	Y+36, r25	; 0x24
    2d8a:	ad a3       	std	Y+37, r26	; 0x25
    2d8c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d8e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d90:	7c a1       	ldd	r23, Y+36	; 0x24
    2d92:	8d a1       	ldd	r24, Y+37	; 0x25
    2d94:	9e a1       	ldd	r25, Y+38	; 0x26
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	40 e8       	ldi	r20, 0x80	; 128
    2d9c:	5f e3       	ldi	r21, 0x3F	; 63
    2d9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2da2:	88 23       	and	r24, r24
    2da4:	2c f4       	brge	.+10     	; 0x2db0 <LCD_voidInit+0xd32>
		__ticks = 1;
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	9a a3       	std	Y+34, r25	; 0x22
    2dac:	89 a3       	std	Y+33, r24	; 0x21
    2dae:	3f c0       	rjmp	.+126    	; 0x2e2e <LCD_voidInit+0xdb0>
	else if (__tmp > 65535)
    2db0:	6b a1       	ldd	r22, Y+35	; 0x23
    2db2:	7c a1       	ldd	r23, Y+36	; 0x24
    2db4:	8d a1       	ldd	r24, Y+37	; 0x25
    2db6:	9e a1       	ldd	r25, Y+38	; 0x26
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	3f ef       	ldi	r19, 0xFF	; 255
    2dbc:	4f e7       	ldi	r20, 0x7F	; 127
    2dbe:	57 e4       	ldi	r21, 0x47	; 71
    2dc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dc4:	18 16       	cp	r1, r24
    2dc6:	4c f5       	brge	.+82     	; 0x2e1a <LCD_voidInit+0xd9c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc8:	6f a1       	ldd	r22, Y+39	; 0x27
    2dca:	78 a5       	ldd	r23, Y+40	; 0x28
    2dcc:	89 a5       	ldd	r24, Y+41	; 0x29
    2dce:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	40 e2       	ldi	r20, 0x20	; 32
    2dd6:	51 e4       	ldi	r21, 0x41	; 65
    2dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	bc 01       	movw	r22, r24
    2de2:	cd 01       	movw	r24, r26
    2de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	9a a3       	std	Y+34, r25	; 0x22
    2dee:	89 a3       	std	Y+33, r24	; 0x21
    2df0:	0f c0       	rjmp	.+30     	; 0x2e10 <LCD_voidInit+0xd92>
    2df2:	88 ec       	ldi	r24, 0xC8	; 200
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	98 a3       	std	Y+32, r25	; 0x20
    2df8:	8f 8f       	std	Y+31, r24	; 0x1f
    2dfa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dfc:	98 a1       	ldd	r25, Y+32	; 0x20
    2dfe:	01 97       	sbiw	r24, 0x01	; 1
    2e00:	f1 f7       	brne	.-4      	; 0x2dfe <LCD_voidInit+0xd80>
    2e02:	98 a3       	std	Y+32, r25	; 0x20
    2e04:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e06:	89 a1       	ldd	r24, Y+33	; 0x21
    2e08:	9a a1       	ldd	r25, Y+34	; 0x22
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	9a a3       	std	Y+34, r25	; 0x22
    2e0e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e10:	89 a1       	ldd	r24, Y+33	; 0x21
    2e12:	9a a1       	ldd	r25, Y+34	; 0x22
    2e14:	00 97       	sbiw	r24, 0x00	; 0
    2e16:	69 f7       	brne	.-38     	; 0x2df2 <LCD_voidInit+0xd74>
    2e18:	14 c0       	rjmp	.+40     	; 0x2e42 <LCD_voidInit+0xdc4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e1a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e1c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e1e:	8d a1       	ldd	r24, Y+37	; 0x25
    2e20:	9e a1       	ldd	r25, Y+38	; 0x26
    2e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	9a a3       	std	Y+34, r25	; 0x22
    2e2c:	89 a3       	std	Y+33, r24	; 0x21
    2e2e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e30:	9a a1       	ldd	r25, Y+34	; 0x22
    2e32:	9e 8f       	std	Y+30, r25	; 0x1e
    2e34:	8d 8f       	std	Y+29, r24	; 0x1d
    2e36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	f1 f7       	brne	.-4      	; 0x2e3a <LCD_voidInit+0xdbc>
    2e3e:	9e 8f       	std	Y+30, r25	; 0x1e
    2e40:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);
			voidWriteCmd(u8CntLoc,0b00000000);
    2e42:	fe 01       	movw	r30, r28
    2e44:	e2 57       	subi	r30, 0x72	; 114
    2e46:	ff 4f       	sbci	r31, 0xFF	; 255
    2e48:	80 81       	ld	r24, Z
    2e4a:	60 e0       	ldi	r22, 0x00	; 0
    2e4c:	0e 94 87 18 	call	0x310e	; 0x310e <voidWriteCmd>
			voidWriteCmd(u8CntLoc,0b00010000);
    2e50:	fe 01       	movw	r30, r28
    2e52:	e2 57       	subi	r30, 0x72	; 114
    2e54:	ff 4f       	sbci	r31, 0xFF	; 255
    2e56:	80 81       	ld	r24, Z
    2e58:	60 e1       	ldi	r22, 0x10	; 16
    2e5a:	0e 94 87 18 	call	0x310e	; 0x310e <voidWriteCmd>
    2e5e:	80 e0       	ldi	r24, 0x00	; 0
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	a0 e4       	ldi	r26, 0x40	; 64
    2e64:	b0 e4       	ldi	r27, 0x40	; 64
    2e66:	89 8f       	std	Y+25, r24	; 0x19
    2e68:	9a 8f       	std	Y+26, r25	; 0x1a
    2e6a:	ab 8f       	std	Y+27, r26	; 0x1b
    2e6c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e6e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	4a ef       	ldi	r20, 0xFA	; 250
    2e7c:	54 e4       	ldi	r21, 0x44	; 68
    2e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	8d 8b       	std	Y+21, r24	; 0x15
    2e88:	9e 8b       	std	Y+22, r25	; 0x16
    2e8a:	af 8b       	std	Y+23, r26	; 0x17
    2e8c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e8e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e90:	7e 89       	ldd	r23, Y+22	; 0x16
    2e92:	8f 89       	ldd	r24, Y+23	; 0x17
    2e94:	98 8d       	ldd	r25, Y+24	; 0x18
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	40 e8       	ldi	r20, 0x80	; 128
    2e9c:	5f e3       	ldi	r21, 0x3F	; 63
    2e9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ea2:	88 23       	and	r24, r24
    2ea4:	2c f4       	brge	.+10     	; 0x2eb0 <LCD_voidInit+0xe32>
		__ticks = 1;
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	9c 8b       	std	Y+20, r25	; 0x14
    2eac:	8b 8b       	std	Y+19, r24	; 0x13
    2eae:	3f c0       	rjmp	.+126    	; 0x2f2e <LCD_voidInit+0xeb0>
	else if (__tmp > 65535)
    2eb0:	6d 89       	ldd	r22, Y+21	; 0x15
    2eb2:	7e 89       	ldd	r23, Y+22	; 0x16
    2eb4:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb6:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	3f ef       	ldi	r19, 0xFF	; 255
    2ebc:	4f e7       	ldi	r20, 0x7F	; 127
    2ebe:	57 e4       	ldi	r21, 0x47	; 71
    2ec0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ec4:	18 16       	cp	r1, r24
    2ec6:	4c f5       	brge	.+82     	; 0x2f1a <LCD_voidInit+0xe9c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec8:	69 8d       	ldd	r22, Y+25	; 0x19
    2eca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ecc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ece:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	40 e2       	ldi	r20, 0x20	; 32
    2ed6:	51 e4       	ldi	r21, 0x41	; 65
    2ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	bc 01       	movw	r22, r24
    2ee2:	cd 01       	movw	r24, r26
    2ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	9c 8b       	std	Y+20, r25	; 0x14
    2eee:	8b 8b       	std	Y+19, r24	; 0x13
    2ef0:	0f c0       	rjmp	.+30     	; 0x2f10 <LCD_voidInit+0xe92>
    2ef2:	88 ec       	ldi	r24, 0xC8	; 200
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	9a 8b       	std	Y+18, r25	; 0x12
    2ef8:	89 8b       	std	Y+17, r24	; 0x11
    2efa:	89 89       	ldd	r24, Y+17	; 0x11
    2efc:	9a 89       	ldd	r25, Y+18	; 0x12
    2efe:	01 97       	sbiw	r24, 0x01	; 1
    2f00:	f1 f7       	brne	.-4      	; 0x2efe <LCD_voidInit+0xe80>
    2f02:	9a 8b       	std	Y+18, r25	; 0x12
    2f04:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f06:	8b 89       	ldd	r24, Y+19	; 0x13
    2f08:	9c 89       	ldd	r25, Y+20	; 0x14
    2f0a:	01 97       	sbiw	r24, 0x01	; 1
    2f0c:	9c 8b       	std	Y+20, r25	; 0x14
    2f0e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f10:	8b 89       	ldd	r24, Y+19	; 0x13
    2f12:	9c 89       	ldd	r25, Y+20	; 0x14
    2f14:	00 97       	sbiw	r24, 0x00	; 0
    2f16:	69 f7       	brne	.-38     	; 0x2ef2 <LCD_voidInit+0xe74>
    2f18:	14 c0       	rjmp	.+40     	; 0x2f42 <LCD_voidInit+0xec4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f1a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f1c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f20:	98 8d       	ldd	r25, Y+24	; 0x18
    2f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f26:	dc 01       	movw	r26, r24
    2f28:	cb 01       	movw	r24, r22
    2f2a:	9c 8b       	std	Y+20, r25	; 0x14
    2f2c:	8b 8b       	std	Y+19, r24	; 0x13
    2f2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f30:	9c 89       	ldd	r25, Y+20	; 0x14
    2f32:	98 8b       	std	Y+16, r25	; 0x10
    2f34:	8f 87       	std	Y+15, r24	; 0x0f
    2f36:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f38:	98 89       	ldd	r25, Y+16	; 0x10
    2f3a:	01 97       	sbiw	r24, 0x01	; 1
    2f3c:	f1 f7       	brne	.-4      	; 0x2f3a <LCD_voidInit+0xebc>
    2f3e:	98 8b       	std	Y+16, r25	; 0x10
    2f40:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(3);
			voidWriteCmd(u8CntLoc,0b00000000);
    2f42:	fe 01       	movw	r30, r28
    2f44:	e2 57       	subi	r30, 0x72	; 114
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	80 81       	ld	r24, Z
    2f4a:	60 e0       	ldi	r22, 0x00	; 0
    2f4c:	0e 94 87 18 	call	0x310e	; 0x310e <voidWriteCmd>

			u8commnad= 0b01000000 | lcdarr[u8CntLoc].lcdswconfig.u8direction<<5 |
    2f50:	fe 01       	movw	r30, r28
    2f52:	e2 57       	subi	r30, 0x72	; 114
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	80 81       	ld	r24, Z
    2f58:	28 2f       	mov	r18, r24
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	c9 01       	movw	r24, r18
    2f5e:	88 0f       	add	r24, r24
    2f60:	99 1f       	adc	r25, r25
    2f62:	82 0f       	add	r24, r18
    2f64:	93 1f       	adc	r25, r19
    2f66:	88 0f       	add	r24, r24
    2f68:	99 1f       	adc	r25, r25
    2f6a:	88 0f       	add	r24, r24
    2f6c:	99 1f       	adc	r25, r25
    2f6e:	fc 01       	movw	r30, r24
    2f70:	e0 55       	subi	r30, 0x50	; 80
    2f72:	ff 4f       	sbci	r31, 0xFF	; 255
    2f74:	80 81       	ld	r24, Z
    2f76:	88 1f       	adc	r24, r24
    2f78:	88 27       	eor	r24, r24
    2f7a:	88 1f       	adc	r24, r24
    2f7c:	88 2f       	mov	r24, r24
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	88 0f       	add	r24, r24
    2f82:	99 1f       	adc	r25, r25
    2f84:	82 95       	swap	r24
    2f86:	92 95       	swap	r25
    2f88:	90 7f       	andi	r25, 0xF0	; 240
    2f8a:	98 27       	eor	r25, r24
    2f8c:	80 7f       	andi	r24, 0xF0	; 240
    2f8e:	98 27       	eor	r25, r24
    2f90:	48 2f       	mov	r20, r24
    2f92:	40 64       	ori	r20, 0x40	; 64
    2f94:	fe 01       	movw	r30, r28
    2f96:	e2 57       	subi	r30, 0x72	; 114
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	80 81       	ld	r24, Z
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	c9 01       	movw	r24, r18
    2fa2:	88 0f       	add	r24, r24
    2fa4:	99 1f       	adc	r25, r25
    2fa6:	82 0f       	add	r24, r18
    2fa8:	93 1f       	adc	r25, r19
    2faa:	88 0f       	add	r24, r24
    2fac:	99 1f       	adc	r25, r25
    2fae:	88 0f       	add	r24, r24
    2fb0:	99 1f       	adc	r25, r25
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	e0 55       	subi	r30, 0x50	; 80
    2fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb8:	80 81       	ld	r24, Z
    2fba:	82 95       	swap	r24
    2fbc:	86 95       	lsr	r24
    2fbe:	87 70       	andi	r24, 0x07	; 7
    2fc0:	81 70       	andi	r24, 0x01	; 1
    2fc2:	88 2f       	mov	r24, r24
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	82 95       	swap	r24
    2fc8:	92 95       	swap	r25
    2fca:	90 7f       	andi	r25, 0xF0	; 240
    2fcc:	98 27       	eor	r25, r24
    2fce:	80 7f       	andi	r24, 0xF0	; 240
    2fd0:	98 27       	eor	r25, r24
    2fd2:	84 2b       	or	r24, r20
    2fd4:	fe 01       	movw	r30, r28
    2fd6:	e3 57       	subi	r30, 0x73	; 115
    2fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fda:	80 83       	st	Z, r24
					   lcdarr[u8CntLoc].lcdswconfig.u8shift<<4 ;


			voidWriteCmd(u8CntLoc,u8commnad);
    2fdc:	fe 01       	movw	r30, r28
    2fde:	e2 57       	subi	r30, 0x72	; 114
    2fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe2:	de 01       	movw	r26, r28
    2fe4:	a3 57       	subi	r26, 0x73	; 115
    2fe6:	bf 4f       	sbci	r27, 0xFF	; 255
    2fe8:	80 81       	ld	r24, Z
    2fea:	6c 91       	ld	r22, X
    2fec:	0e 94 87 18 	call	0x310e	; 0x310e <voidWriteCmd>
    2ff0:	80 e0       	ldi	r24, 0x00	; 0
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	a0 e4       	ldi	r26, 0x40	; 64
    2ff6:	b0 e4       	ldi	r27, 0x40	; 64
    2ff8:	8b 87       	std	Y+11, r24	; 0x0b
    2ffa:	9c 87       	std	Y+12, r25	; 0x0c
    2ffc:	ad 87       	std	Y+13, r26	; 0x0d
    2ffe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3000:	6b 85       	ldd	r22, Y+11	; 0x0b
    3002:	7c 85       	ldd	r23, Y+12	; 0x0c
    3004:	8d 85       	ldd	r24, Y+13	; 0x0d
    3006:	9e 85       	ldd	r25, Y+14	; 0x0e
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	4a ef       	ldi	r20, 0xFA	; 250
    300e:	54 e4       	ldi	r21, 0x44	; 68
    3010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3014:	dc 01       	movw	r26, r24
    3016:	cb 01       	movw	r24, r22
    3018:	8f 83       	std	Y+7, r24	; 0x07
    301a:	98 87       	std	Y+8, r25	; 0x08
    301c:	a9 87       	std	Y+9, r26	; 0x09
    301e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3020:	6f 81       	ldd	r22, Y+7	; 0x07
    3022:	78 85       	ldd	r23, Y+8	; 0x08
    3024:	89 85       	ldd	r24, Y+9	; 0x09
    3026:	9a 85       	ldd	r25, Y+10	; 0x0a
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	40 e8       	ldi	r20, 0x80	; 128
    302e:	5f e3       	ldi	r21, 0x3F	; 63
    3030:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3034:	88 23       	and	r24, r24
    3036:	2c f4       	brge	.+10     	; 0x3042 <LCD_voidInit+0xfc4>
		__ticks = 1;
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	9e 83       	std	Y+6, r25	; 0x06
    303e:	8d 83       	std	Y+5, r24	; 0x05
    3040:	3f c0       	rjmp	.+126    	; 0x30c0 <LCD_voidInit+0x1042>
	else if (__tmp > 65535)
    3042:	6f 81       	ldd	r22, Y+7	; 0x07
    3044:	78 85       	ldd	r23, Y+8	; 0x08
    3046:	89 85       	ldd	r24, Y+9	; 0x09
    3048:	9a 85       	ldd	r25, Y+10	; 0x0a
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	3f ef       	ldi	r19, 0xFF	; 255
    304e:	4f e7       	ldi	r20, 0x7F	; 127
    3050:	57 e4       	ldi	r21, 0x47	; 71
    3052:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3056:	18 16       	cp	r1, r24
    3058:	4c f5       	brge	.+82     	; 0x30ac <LCD_voidInit+0x102e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    305a:	6b 85       	ldd	r22, Y+11	; 0x0b
    305c:	7c 85       	ldd	r23, Y+12	; 0x0c
    305e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3060:	9e 85       	ldd	r25, Y+14	; 0x0e
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	40 e2       	ldi	r20, 0x20	; 32
    3068:	51 e4       	ldi	r21, 0x41	; 65
    306a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	bc 01       	movw	r22, r24
    3074:	cd 01       	movw	r24, r26
    3076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	9e 83       	std	Y+6, r25	; 0x06
    3080:	8d 83       	std	Y+5, r24	; 0x05
    3082:	0f c0       	rjmp	.+30     	; 0x30a2 <LCD_voidInit+0x1024>
    3084:	88 ec       	ldi	r24, 0xC8	; 200
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	9c 83       	std	Y+4, r25	; 0x04
    308a:	8b 83       	std	Y+3, r24	; 0x03
    308c:	8b 81       	ldd	r24, Y+3	; 0x03
    308e:	9c 81       	ldd	r25, Y+4	; 0x04
    3090:	01 97       	sbiw	r24, 0x01	; 1
    3092:	f1 f7       	brne	.-4      	; 0x3090 <LCD_voidInit+0x1012>
    3094:	9c 83       	std	Y+4, r25	; 0x04
    3096:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3098:	8d 81       	ldd	r24, Y+5	; 0x05
    309a:	9e 81       	ldd	r25, Y+6	; 0x06
    309c:	01 97       	sbiw	r24, 0x01	; 1
    309e:	9e 83       	std	Y+6, r25	; 0x06
    30a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a2:	8d 81       	ldd	r24, Y+5	; 0x05
    30a4:	9e 81       	ldd	r25, Y+6	; 0x06
    30a6:	00 97       	sbiw	r24, 0x00	; 0
    30a8:	69 f7       	brne	.-38     	; 0x3084 <LCD_voidInit+0x1006>
    30aa:	14 c0       	rjmp	.+40     	; 0x30d4 <LCD_voidInit+0x1056>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ac:	6f 81       	ldd	r22, Y+7	; 0x07
    30ae:	78 85       	ldd	r23, Y+8	; 0x08
    30b0:	89 85       	ldd	r24, Y+9	; 0x09
    30b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	9e 83       	std	Y+6, r25	; 0x06
    30be:	8d 83       	std	Y+5, r24	; 0x05
    30c0:	8d 81       	ldd	r24, Y+5	; 0x05
    30c2:	9e 81       	ldd	r25, Y+6	; 0x06
    30c4:	9a 83       	std	Y+2, r25	; 0x02
    30c6:	89 83       	std	Y+1, r24	; 0x01
    30c8:	89 81       	ldd	r24, Y+1	; 0x01
    30ca:	9a 81       	ldd	r25, Y+2	; 0x02
    30cc:	01 97       	sbiw	r24, 0x01	; 1
    30ce:	f1 f7       	brne	.-4      	; 0x30cc <LCD_voidInit+0x104e>
    30d0:	9a 83       	std	Y+2, r25	; 0x02
    30d2:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidInit(void)
{
	uint8 u8CntLoc;
	uint8 u8commnad=0;
	for (u8CntLoc =0  ; u8CntLoc <MAX_NUM ; u8CntLoc++)
    30d4:	de 01       	movw	r26, r28
    30d6:	a2 57       	subi	r26, 0x72	; 114
    30d8:	bf 4f       	sbci	r27, 0xFF	; 255
    30da:	fe 01       	movw	r30, r28
    30dc:	e2 57       	subi	r30, 0x72	; 114
    30de:	ff 4f       	sbci	r31, 0xFF	; 255
    30e0:	80 81       	ld	r24, Z
    30e2:	8f 5f       	subi	r24, 0xFF	; 255
    30e4:	8c 93       	st	X, r24
    30e6:	fe 01       	movw	r30, r28
    30e8:	e2 57       	subi	r30, 0x72	; 114
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	80 81       	ld	r24, Z
    30ee:	82 30       	cpi	r24, 0x02	; 2
    30f0:	10 f4       	brcc	.+4      	; 0x30f6 <LCD_voidInit+0x1078>
    30f2:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <LCD_voidInit+0x2e>

	}



}
    30f6:	c2 57       	subi	r28, 0x72	; 114
    30f8:	df 4f       	sbci	r29, 0xFF	; 255
    30fa:	0f b6       	in	r0, 0x3f	; 63
    30fc:	f8 94       	cli
    30fe:	de bf       	out	0x3e, r29	; 62
    3100:	0f be       	out	0x3f, r0	; 63
    3102:	cd bf       	out	0x3d, r28	; 61
    3104:	cf 91       	pop	r28
    3106:	df 91       	pop	r29
    3108:	1f 91       	pop	r17
    310a:	0f 91       	pop	r16
    310c:	08 95       	ret

0000310e <voidWriteCmd>:


static void voidWriteCmd(uint8 u8Index , uint8 u8CmdCPy)
 {
    310e:	df 93       	push	r29
    3110:	cf 93       	push	r28
    3112:	00 d0       	rcall	.+0      	; 0x3114 <voidWriteCmd+0x6>
    3114:	cd b7       	in	r28, 0x3d	; 61
    3116:	de b7       	in	r29, 0x3e	; 62
    3118:	89 83       	std	Y+1, r24	; 0x01
    311a:	6a 83       	std	Y+2, r22	; 0x02

	/*RS   0*/
	DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.u8RS , DIO_LOW);
    311c:	89 81       	ldd	r24, Y+1	; 0x01
    311e:	28 2f       	mov	r18, r24
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	c9 01       	movw	r24, r18
    3124:	88 0f       	add	r24, r24
    3126:	99 1f       	adc	r25, r25
    3128:	82 0f       	add	r24, r18
    312a:	93 1f       	adc	r25, r19
    312c:	88 0f       	add	r24, r24
    312e:	99 1f       	adc	r25, r25
    3130:	88 0f       	add	r24, r24
    3132:	99 1f       	adc	r25, r25
    3134:	fc 01       	movw	r30, r24
    3136:	ef 54       	subi	r30, 0x4F	; 79
    3138:	ff 4f       	sbci	r31, 0xFF	; 255
    313a:	80 81       	ld	r24, Z
    313c:	60 e0       	ldi	r22, 0x00	; 0
    313e:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>

	/*help*/
	LCDHelp(u8Index,u8CmdCPy);
    3142:	89 81       	ldd	r24, Y+1	; 0x01
    3144:	6a 81       	ldd	r22, Y+2	; 0x02
    3146:	0e 94 aa 18 	call	0x3154	; 0x3154 <LCDHelp>

 }
    314a:	0f 90       	pop	r0
    314c:	0f 90       	pop	r0
    314e:	cf 91       	pop	r28
    3150:	df 91       	pop	r29
    3152:	08 95       	ret

00003154 <LCDHelp>:

static void  LCDHelp(uint8 u8Index , uint8 u8dataCmdCPy)
	{
    3154:	df 93       	push	r29
    3156:	cf 93       	push	r28
    3158:	cd b7       	in	r28, 0x3d	; 61
    315a:	de b7       	in	r29, 0x3e	; 62
    315c:	6f 97       	sbiw	r28, 0x1f	; 31
    315e:	0f b6       	in	r0, 0x3f	; 63
    3160:	f8 94       	cli
    3162:	de bf       	out	0x3e, r29	; 62
    3164:	0f be       	out	0x3f, r0	; 63
    3166:	cd bf       	out	0x3d, r28	; 61
    3168:	8e 8f       	std	Y+30, r24	; 0x1e
    316a:	6f 8f       	std	Y+31, r22	; 0x1f
		uint8 u8CntLoc=0;
    316c:	1d 8e       	std	Y+29, r1	; 0x1d
		/*set to write to lCD */
		DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.u8RW , DIO_LOW);
    316e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3170:	28 2f       	mov	r18, r24
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	c9 01       	movw	r24, r18
    3176:	88 0f       	add	r24, r24
    3178:	99 1f       	adc	r25, r25
    317a:	82 0f       	add	r24, r18
    317c:	93 1f       	adc	r25, r19
    317e:	88 0f       	add	r24, r24
    3180:	99 1f       	adc	r25, r25
    3182:	01 96       	adiw	r24, 0x01	; 1
    3184:	88 0f       	add	r24, r24
    3186:	99 1f       	adc	r25, r25
    3188:	fc 01       	movw	r30, r24
    318a:	e0 55       	subi	r30, 0x50	; 80
    318c:	ff 4f       	sbci	r31, 0xFF	; 255
    318e:	80 81       	ld	r24, Z
    3190:	60 e0       	ldi	r22, 0x00	; 0
    3192:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>

		DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.u8E , DIO_HIGH);
    3196:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3198:	28 2f       	mov	r18, r24
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	c9 01       	movw	r24, r18
    319e:	88 0f       	add	r24, r24
    31a0:	99 1f       	adc	r25, r25
    31a2:	82 0f       	add	r24, r18
    31a4:	93 1f       	adc	r25, r19
    31a6:	88 0f       	add	r24, r24
    31a8:	99 1f       	adc	r25, r25
    31aa:	88 0f       	add	r24, r24
    31ac:	99 1f       	adc	r25, r25
    31ae:	fc 01       	movw	r30, r24
    31b0:	ed 54       	subi	r30, 0x4D	; 77
    31b2:	ff 4f       	sbci	r31, 0xFF	; 255
    31b4:	80 81       	ld	r24, Z
    31b6:	61 e0       	ldi	r22, 0x01	; 1
    31b8:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>

		if (lcdarr[u8Index].lcdswconfig.u8mode==LCD_8_BIT_MODE)
    31bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31be:	28 2f       	mov	r18, r24
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	c9 01       	movw	r24, r18
    31c4:	88 0f       	add	r24, r24
    31c6:	99 1f       	adc	r25, r25
    31c8:	82 0f       	add	r24, r18
    31ca:	93 1f       	adc	r25, r19
    31cc:	88 0f       	add	r24, r24
    31ce:	99 1f       	adc	r25, r25
    31d0:	88 0f       	add	r24, r24
    31d2:	99 1f       	adc	r25, r25
    31d4:	fc 01       	movw	r30, r24
    31d6:	e0 55       	subi	r30, 0x50	; 80
    31d8:	ff 4f       	sbci	r31, 0xFF	; 255
    31da:	80 81       	ld	r24, Z
    31dc:	81 70       	andi	r24, 0x01	; 1
    31de:	81 30       	cpi	r24, 0x01	; 1
    31e0:	89 f5       	brne	.+98     	; 0x3244 <LCDHelp+0xf0>
		{
			for (u8CntLoc =0 ;u8CntLoc<8;u8CntLoc++)
    31e2:	1d 8e       	std	Y+29, r1	; 0x1d
    31e4:	2b c0       	rjmp	.+86     	; 0x323c <LCDHelp+0xe8>
			{
				DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.au8data[u8CntLoc],GET_BIT(u8dataCmdCPy,u8CntLoc));
    31e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31e8:	28 2f       	mov	r18, r24
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31ee:	48 2f       	mov	r20, r24
    31f0:	50 e0       	ldi	r21, 0x00	; 0
    31f2:	c9 01       	movw	r24, r18
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	82 0f       	add	r24, r18
    31fa:	93 1f       	adc	r25, r19
    31fc:	88 0f       	add	r24, r24
    31fe:	99 1f       	adc	r25, r25
    3200:	88 0f       	add	r24, r24
    3202:	99 1f       	adc	r25, r25
    3204:	84 0f       	add	r24, r20
    3206:	95 1f       	adc	r25, r21
    3208:	fc 01       	movw	r30, r24
    320a:	ec 54       	subi	r30, 0x4C	; 76
    320c:	ff 4f       	sbci	r31, 0xFF	; 255
    320e:	40 81       	ld	r20, Z
    3210:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3212:	28 2f       	mov	r18, r24
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3218:	88 2f       	mov	r24, r24
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	b9 01       	movw	r22, r18
    321e:	02 c0       	rjmp	.+4      	; 0x3224 <LCDHelp+0xd0>
    3220:	75 95       	asr	r23
    3222:	67 95       	ror	r22
    3224:	8a 95       	dec	r24
    3226:	e2 f7       	brpl	.-8      	; 0x3220 <LCDHelp+0xcc>
    3228:	cb 01       	movw	r24, r22
    322a:	98 2f       	mov	r25, r24
    322c:	91 70       	andi	r25, 0x01	; 1
    322e:	84 2f       	mov	r24, r20
    3230:	69 2f       	mov	r22, r25
    3232:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>

		DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.u8E , DIO_HIGH);

		if (lcdarr[u8Index].lcdswconfig.u8mode==LCD_8_BIT_MODE)
		{
			for (u8CntLoc =0 ;u8CntLoc<8;u8CntLoc++)
    3236:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3238:	8f 5f       	subi	r24, 0xFF	; 255
    323a:	8d 8f       	std	Y+29, r24	; 0x1d
    323c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    323e:	88 30       	cpi	r24, 0x08	; 8
    3240:	90 f2       	brcs	.-92     	; 0x31e6 <LCDHelp+0x92>
    3242:	31 c0       	rjmp	.+98     	; 0x32a6 <LCDHelp+0x152>

		}

		else
		{
			for (u8CntLoc =4 ;u8CntLoc<8;u8CntLoc++)
    3244:	84 e0       	ldi	r24, 0x04	; 4
    3246:	8d 8f       	std	Y+29, r24	; 0x1d
    3248:	2b c0       	rjmp	.+86     	; 0x32a0 <LCDHelp+0x14c>
			{
				DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.au8data[u8CntLoc],GET_BIT(u8dataCmdCPy,u8CntLoc));
    324a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    324c:	28 2f       	mov	r18, r24
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3252:	48 2f       	mov	r20, r24
    3254:	50 e0       	ldi	r21, 0x00	; 0
    3256:	c9 01       	movw	r24, r18
    3258:	88 0f       	add	r24, r24
    325a:	99 1f       	adc	r25, r25
    325c:	82 0f       	add	r24, r18
    325e:	93 1f       	adc	r25, r19
    3260:	88 0f       	add	r24, r24
    3262:	99 1f       	adc	r25, r25
    3264:	88 0f       	add	r24, r24
    3266:	99 1f       	adc	r25, r25
    3268:	84 0f       	add	r24, r20
    326a:	95 1f       	adc	r25, r21
    326c:	fc 01       	movw	r30, r24
    326e:	ec 54       	subi	r30, 0x4C	; 76
    3270:	ff 4f       	sbci	r31, 0xFF	; 255
    3272:	40 81       	ld	r20, Z
    3274:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3276:	28 2f       	mov	r18, r24
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    327c:	88 2f       	mov	r24, r24
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	b9 01       	movw	r22, r18
    3282:	02 c0       	rjmp	.+4      	; 0x3288 <LCDHelp+0x134>
    3284:	75 95       	asr	r23
    3286:	67 95       	ror	r22
    3288:	8a 95       	dec	r24
    328a:	e2 f7       	brpl	.-8      	; 0x3284 <LCDHelp+0x130>
    328c:	cb 01       	movw	r24, r22
    328e:	98 2f       	mov	r25, r24
    3290:	91 70       	andi	r25, 0x01	; 1
    3292:	84 2f       	mov	r24, r20
    3294:	69 2f       	mov	r22, r25
    3296:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>

		}

		else
		{
			for (u8CntLoc =4 ;u8CntLoc<8;u8CntLoc++)
    329a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    329c:	8f 5f       	subi	r24, 0xFF	; 255
    329e:	8d 8f       	std	Y+29, r24	; 0x1d
    32a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32a2:	88 30       	cpi	r24, 0x08	; 8
    32a4:	90 f2       	brcs	.-92     	; 0x324a <LCDHelp+0xf6>
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	a0 e2       	ldi	r26, 0x20	; 32
    32ac:	b1 e4       	ldi	r27, 0x41	; 65
    32ae:	89 8f       	std	Y+25, r24	; 0x19
    32b0:	9a 8f       	std	Y+26, r25	; 0x1a
    32b2:	ab 8f       	std	Y+27, r26	; 0x1b
    32b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b6:	69 8d       	ldd	r22, Y+25	; 0x19
    32b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	4a ef       	ldi	r20, 0xFA	; 250
    32c4:	54 e4       	ldi	r21, 0x44	; 68
    32c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	8d 8b       	std	Y+21, r24	; 0x15
    32d0:	9e 8b       	std	Y+22, r25	; 0x16
    32d2:	af 8b       	std	Y+23, r26	; 0x17
    32d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32d6:	6d 89       	ldd	r22, Y+21	; 0x15
    32d8:	7e 89       	ldd	r23, Y+22	; 0x16
    32da:	8f 89       	ldd	r24, Y+23	; 0x17
    32dc:	98 8d       	ldd	r25, Y+24	; 0x18
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	40 e8       	ldi	r20, 0x80	; 128
    32e4:	5f e3       	ldi	r21, 0x3F	; 63
    32e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32ea:	88 23       	and	r24, r24
    32ec:	2c f4       	brge	.+10     	; 0x32f8 <LCDHelp+0x1a4>
		__ticks = 1;
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	9c 8b       	std	Y+20, r25	; 0x14
    32f4:	8b 8b       	std	Y+19, r24	; 0x13
    32f6:	3f c0       	rjmp	.+126    	; 0x3376 <LCDHelp+0x222>
	else if (__tmp > 65535)
    32f8:	6d 89       	ldd	r22, Y+21	; 0x15
    32fa:	7e 89       	ldd	r23, Y+22	; 0x16
    32fc:	8f 89       	ldd	r24, Y+23	; 0x17
    32fe:	98 8d       	ldd	r25, Y+24	; 0x18
    3300:	20 e0       	ldi	r18, 0x00	; 0
    3302:	3f ef       	ldi	r19, 0xFF	; 255
    3304:	4f e7       	ldi	r20, 0x7F	; 127
    3306:	57 e4       	ldi	r21, 0x47	; 71
    3308:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    330c:	18 16       	cp	r1, r24
    330e:	4c f5       	brge	.+82     	; 0x3362 <LCDHelp+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3310:	69 8d       	ldd	r22, Y+25	; 0x19
    3312:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3314:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3316:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	40 e2       	ldi	r20, 0x20	; 32
    331e:	51 e4       	ldi	r21, 0x41	; 65
    3320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	bc 01       	movw	r22, r24
    332a:	cd 01       	movw	r24, r26
    332c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3330:	dc 01       	movw	r26, r24
    3332:	cb 01       	movw	r24, r22
    3334:	9c 8b       	std	Y+20, r25	; 0x14
    3336:	8b 8b       	std	Y+19, r24	; 0x13
    3338:	0f c0       	rjmp	.+30     	; 0x3358 <LCDHelp+0x204>
    333a:	88 ec       	ldi	r24, 0xC8	; 200
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	9a 8b       	std	Y+18, r25	; 0x12
    3340:	89 8b       	std	Y+17, r24	; 0x11
    3342:	89 89       	ldd	r24, Y+17	; 0x11
    3344:	9a 89       	ldd	r25, Y+18	; 0x12
    3346:	01 97       	sbiw	r24, 0x01	; 1
    3348:	f1 f7       	brne	.-4      	; 0x3346 <LCDHelp+0x1f2>
    334a:	9a 8b       	std	Y+18, r25	; 0x12
    334c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    334e:	8b 89       	ldd	r24, Y+19	; 0x13
    3350:	9c 89       	ldd	r25, Y+20	; 0x14
    3352:	01 97       	sbiw	r24, 0x01	; 1
    3354:	9c 8b       	std	Y+20, r25	; 0x14
    3356:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3358:	8b 89       	ldd	r24, Y+19	; 0x13
    335a:	9c 89       	ldd	r25, Y+20	; 0x14
    335c:	00 97       	sbiw	r24, 0x00	; 0
    335e:	69 f7       	brne	.-38     	; 0x333a <LCDHelp+0x1e6>
    3360:	14 c0       	rjmp	.+40     	; 0x338a <LCDHelp+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3362:	6d 89       	ldd	r22, Y+21	; 0x15
    3364:	7e 89       	ldd	r23, Y+22	; 0x16
    3366:	8f 89       	ldd	r24, Y+23	; 0x17
    3368:	98 8d       	ldd	r25, Y+24	; 0x18
    336a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	9c 8b       	std	Y+20, r25	; 0x14
    3374:	8b 8b       	std	Y+19, r24	; 0x13
    3376:	8b 89       	ldd	r24, Y+19	; 0x13
    3378:	9c 89       	ldd	r25, Y+20	; 0x14
    337a:	98 8b       	std	Y+16, r25	; 0x10
    337c:	8f 87       	std	Y+15, r24	; 0x0f
    337e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3380:	98 89       	ldd	r25, Y+16	; 0x10
    3382:	01 97       	sbiw	r24, 0x01	; 1
    3384:	f1 f7       	brne	.-4      	; 0x3382 <LCDHelp+0x22e>
    3386:	98 8b       	std	Y+16, r25	; 0x10
    3388:	8f 87       	std	Y+15, r24	; 0x0f
				DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.au8data[u8CntLoc],GET_BIT(u8dataCmdCPy,u8CntLoc));
			}
		}
			/* latch */
		_delay_ms(10);
		DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.u8E , DIO_LOW);
    338a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    338c:	28 2f       	mov	r18, r24
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	c9 01       	movw	r24, r18
    3392:	88 0f       	add	r24, r24
    3394:	99 1f       	adc	r25, r25
    3396:	82 0f       	add	r24, r18
    3398:	93 1f       	adc	r25, r19
    339a:	88 0f       	add	r24, r24
    339c:	99 1f       	adc	r25, r25
    339e:	88 0f       	add	r24, r24
    33a0:	99 1f       	adc	r25, r25
    33a2:	fc 01       	movw	r30, r24
    33a4:	ed 54       	subi	r30, 0x4D	; 77
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	80 81       	ld	r24, Z
    33aa:	60 e0       	ldi	r22, 0x00	; 0
    33ac:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>
    33b0:	80 e0       	ldi	r24, 0x00	; 0
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	a0 e2       	ldi	r26, 0x20	; 32
    33b6:	b1 e4       	ldi	r27, 0x41	; 65
    33b8:	8b 87       	std	Y+11, r24	; 0x0b
    33ba:	9c 87       	std	Y+12, r25	; 0x0c
    33bc:	ad 87       	std	Y+13, r26	; 0x0d
    33be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	4a ef       	ldi	r20, 0xFA	; 250
    33ce:	54 e4       	ldi	r21, 0x44	; 68
    33d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d4:	dc 01       	movw	r26, r24
    33d6:	cb 01       	movw	r24, r22
    33d8:	8f 83       	std	Y+7, r24	; 0x07
    33da:	98 87       	std	Y+8, r25	; 0x08
    33dc:	a9 87       	std	Y+9, r26	; 0x09
    33de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33e0:	6f 81       	ldd	r22, Y+7	; 0x07
    33e2:	78 85       	ldd	r23, Y+8	; 0x08
    33e4:	89 85       	ldd	r24, Y+9	; 0x09
    33e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	40 e8       	ldi	r20, 0x80	; 128
    33ee:	5f e3       	ldi	r21, 0x3F	; 63
    33f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33f4:	88 23       	and	r24, r24
    33f6:	2c f4       	brge	.+10     	; 0x3402 <LCDHelp+0x2ae>
		__ticks = 1;
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	9e 83       	std	Y+6, r25	; 0x06
    33fe:	8d 83       	std	Y+5, r24	; 0x05
    3400:	3f c0       	rjmp	.+126    	; 0x3480 <LCDHelp+0x32c>
	else if (__tmp > 65535)
    3402:	6f 81       	ldd	r22, Y+7	; 0x07
    3404:	78 85       	ldd	r23, Y+8	; 0x08
    3406:	89 85       	ldd	r24, Y+9	; 0x09
    3408:	9a 85       	ldd	r25, Y+10	; 0x0a
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	3f ef       	ldi	r19, 0xFF	; 255
    340e:	4f e7       	ldi	r20, 0x7F	; 127
    3410:	57 e4       	ldi	r21, 0x47	; 71
    3412:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3416:	18 16       	cp	r1, r24
    3418:	4c f5       	brge	.+82     	; 0x346c <LCDHelp+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    341a:	6b 85       	ldd	r22, Y+11	; 0x0b
    341c:	7c 85       	ldd	r23, Y+12	; 0x0c
    341e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3420:	9e 85       	ldd	r25, Y+14	; 0x0e
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	40 e2       	ldi	r20, 0x20	; 32
    3428:	51 e4       	ldi	r21, 0x41	; 65
    342a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	bc 01       	movw	r22, r24
    3434:	cd 01       	movw	r24, r26
    3436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	9e 83       	std	Y+6, r25	; 0x06
    3440:	8d 83       	std	Y+5, r24	; 0x05
    3442:	0f c0       	rjmp	.+30     	; 0x3462 <LCDHelp+0x30e>
    3444:	88 ec       	ldi	r24, 0xC8	; 200
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	9c 83       	std	Y+4, r25	; 0x04
    344a:	8b 83       	std	Y+3, r24	; 0x03
    344c:	8b 81       	ldd	r24, Y+3	; 0x03
    344e:	9c 81       	ldd	r25, Y+4	; 0x04
    3450:	01 97       	sbiw	r24, 0x01	; 1
    3452:	f1 f7       	brne	.-4      	; 0x3450 <LCDHelp+0x2fc>
    3454:	9c 83       	std	Y+4, r25	; 0x04
    3456:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3458:	8d 81       	ldd	r24, Y+5	; 0x05
    345a:	9e 81       	ldd	r25, Y+6	; 0x06
    345c:	01 97       	sbiw	r24, 0x01	; 1
    345e:	9e 83       	std	Y+6, r25	; 0x06
    3460:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3462:	8d 81       	ldd	r24, Y+5	; 0x05
    3464:	9e 81       	ldd	r25, Y+6	; 0x06
    3466:	00 97       	sbiw	r24, 0x00	; 0
    3468:	69 f7       	brne	.-38     	; 0x3444 <LCDHelp+0x2f0>
    346a:	14 c0       	rjmp	.+40     	; 0x3494 <LCDHelp+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    346c:	6f 81       	ldd	r22, Y+7	; 0x07
    346e:	78 85       	ldd	r23, Y+8	; 0x08
    3470:	89 85       	ldd	r24, Y+9	; 0x09
    3472:	9a 85       	ldd	r25, Y+10	; 0x0a
    3474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	9e 83       	std	Y+6, r25	; 0x06
    347e:	8d 83       	std	Y+5, r24	; 0x05
    3480:	8d 81       	ldd	r24, Y+5	; 0x05
    3482:	9e 81       	ldd	r25, Y+6	; 0x06
    3484:	9a 83       	std	Y+2, r25	; 0x02
    3486:	89 83       	std	Y+1, r24	; 0x01
    3488:	89 81       	ldd	r24, Y+1	; 0x01
    348a:	9a 81       	ldd	r25, Y+2	; 0x02
    348c:	01 97       	sbiw	r24, 0x01	; 1
    348e:	f1 f7       	brne	.-4      	; 0x348c <LCDHelp+0x338>
    3490:	9a 83       	std	Y+2, r25	; 0x02
    3492:	89 83       	std	Y+1, r24	; 0x01
		/*extra delay*/
		_delay_ms(10);
	}
    3494:	6f 96       	adiw	r28, 0x1f	; 31
    3496:	0f b6       	in	r0, 0x3f	; 63
    3498:	f8 94       	cli
    349a:	de bf       	out	0x3e, r29	; 62
    349c:	0f be       	out	0x3f, r0	; 63
    349e:	cd bf       	out	0x3d, r28	; 61
    34a0:	cf 91       	pop	r28
    34a2:	df 91       	pop	r29
    34a4:	08 95       	ret

000034a6 <LCD_voidSendChar>:

void LCD_voidSendChar(uint8 u8IndexCpy, uint8 u8CharCpy)

{
    34a6:	df 93       	push	r29
    34a8:	cf 93       	push	r28
    34aa:	cd b7       	in	r28, 0x3d	; 61
    34ac:	de b7       	in	r29, 0x3e	; 62
    34ae:	ac 97       	sbiw	r28, 0x2c	; 44
    34b0:	0f b6       	in	r0, 0x3f	; 63
    34b2:	f8 94       	cli
    34b4:	de bf       	out	0x3e, r29	; 62
    34b6:	0f be       	out	0x3f, r0	; 63
    34b8:	cd bf       	out	0x3d, r28	; 61
    34ba:	8b a7       	std	Y+43, r24	; 0x2b
    34bc:	6c a7       	std	Y+44, r22	; 0x2c
	/*RS  1*/
	DIO_enuWritePin(lcdarr[u8IndexCpy].lcdhwconfig.u8RS , DIO_HIGH);
    34be:	8b a5       	ldd	r24, Y+43	; 0x2b
    34c0:	28 2f       	mov	r18, r24
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	c9 01       	movw	r24, r18
    34c6:	88 0f       	add	r24, r24
    34c8:	99 1f       	adc	r25, r25
    34ca:	82 0f       	add	r24, r18
    34cc:	93 1f       	adc	r25, r19
    34ce:	88 0f       	add	r24, r24
    34d0:	99 1f       	adc	r25, r25
    34d2:	88 0f       	add	r24, r24
    34d4:	99 1f       	adc	r25, r25
    34d6:	fc 01       	movw	r30, r24
    34d8:	ef 54       	subi	r30, 0x4F	; 79
    34da:	ff 4f       	sbci	r31, 0xFF	; 255
    34dc:	80 81       	ld	r24, Z
    34de:	61 e0       	ldi	r22, 0x01	; 1
    34e0:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>


	if (lcdarr[u8IndexCpy].lcdswconfig.u8mode==LCD_8_BIT_MODE)
    34e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    34e6:	28 2f       	mov	r18, r24
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	c9 01       	movw	r24, r18
    34ec:	88 0f       	add	r24, r24
    34ee:	99 1f       	adc	r25, r25
    34f0:	82 0f       	add	r24, r18
    34f2:	93 1f       	adc	r25, r19
    34f4:	88 0f       	add	r24, r24
    34f6:	99 1f       	adc	r25, r25
    34f8:	88 0f       	add	r24, r24
    34fa:	99 1f       	adc	r25, r25
    34fc:	fc 01       	movw	r30, r24
    34fe:	e0 55       	subi	r30, 0x50	; 80
    3500:	ff 4f       	sbci	r31, 0xFF	; 255
    3502:	80 81       	ld	r24, Z
    3504:	81 70       	andi	r24, 0x01	; 1
    3506:	81 30       	cpi	r24, 0x01	; 1
    3508:	09 f0       	breq	.+2      	; 0x350c <LCD_voidSendChar+0x66>
    350a:	77 c0       	rjmp	.+238    	; 0x35fa <LCD_voidSendChar+0x154>
	{
		LCDHelp(u8IndexCpy,u8CharCpy);
    350c:	8b a5       	ldd	r24, Y+43	; 0x2b
    350e:	6c a5       	ldd	r22, Y+44	; 0x2c
    3510:	0e 94 aa 18 	call	0x3154	; 0x3154 <LCDHelp>
    3514:	80 e0       	ldi	r24, 0x00	; 0
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	a0 e8       	ldi	r26, 0x80	; 128
    351a:	bf e3       	ldi	r27, 0x3F	; 63
    351c:	8f a3       	std	Y+39, r24	; 0x27
    351e:	98 a7       	std	Y+40, r25	; 0x28
    3520:	a9 a7       	std	Y+41, r26	; 0x29
    3522:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3524:	6f a1       	ldd	r22, Y+39	; 0x27
    3526:	78 a5       	ldd	r23, Y+40	; 0x28
    3528:	89 a5       	ldd	r24, Y+41	; 0x29
    352a:	9a a5       	ldd	r25, Y+42	; 0x2a
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	4a ef       	ldi	r20, 0xFA	; 250
    3532:	54 e4       	ldi	r21, 0x44	; 68
    3534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	8b a3       	std	Y+35, r24	; 0x23
    353e:	9c a3       	std	Y+36, r25	; 0x24
    3540:	ad a3       	std	Y+37, r26	; 0x25
    3542:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3544:	6b a1       	ldd	r22, Y+35	; 0x23
    3546:	7c a1       	ldd	r23, Y+36	; 0x24
    3548:	8d a1       	ldd	r24, Y+37	; 0x25
    354a:	9e a1       	ldd	r25, Y+38	; 0x26
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	40 e8       	ldi	r20, 0x80	; 128
    3552:	5f e3       	ldi	r21, 0x3F	; 63
    3554:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3558:	88 23       	and	r24, r24
    355a:	2c f4       	brge	.+10     	; 0x3566 <LCD_voidSendChar+0xc0>
		__ticks = 1;
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	9a a3       	std	Y+34, r25	; 0x22
    3562:	89 a3       	std	Y+33, r24	; 0x21
    3564:	3f c0       	rjmp	.+126    	; 0x35e4 <LCD_voidSendChar+0x13e>
	else if (__tmp > 65535)
    3566:	6b a1       	ldd	r22, Y+35	; 0x23
    3568:	7c a1       	ldd	r23, Y+36	; 0x24
    356a:	8d a1       	ldd	r24, Y+37	; 0x25
    356c:	9e a1       	ldd	r25, Y+38	; 0x26
    356e:	20 e0       	ldi	r18, 0x00	; 0
    3570:	3f ef       	ldi	r19, 0xFF	; 255
    3572:	4f e7       	ldi	r20, 0x7F	; 127
    3574:	57 e4       	ldi	r21, 0x47	; 71
    3576:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    357a:	18 16       	cp	r1, r24
    357c:	4c f5       	brge	.+82     	; 0x35d0 <LCD_voidSendChar+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    357e:	6f a1       	ldd	r22, Y+39	; 0x27
    3580:	78 a5       	ldd	r23, Y+40	; 0x28
    3582:	89 a5       	ldd	r24, Y+41	; 0x29
    3584:	9a a5       	ldd	r25, Y+42	; 0x2a
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	40 e2       	ldi	r20, 0x20	; 32
    358c:	51 e4       	ldi	r21, 0x41	; 65
    358e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	bc 01       	movw	r22, r24
    3598:	cd 01       	movw	r24, r26
    359a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359e:	dc 01       	movw	r26, r24
    35a0:	cb 01       	movw	r24, r22
    35a2:	9a a3       	std	Y+34, r25	; 0x22
    35a4:	89 a3       	std	Y+33, r24	; 0x21
    35a6:	0f c0       	rjmp	.+30     	; 0x35c6 <LCD_voidSendChar+0x120>
    35a8:	88 ec       	ldi	r24, 0xC8	; 200
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	98 a3       	std	Y+32, r25	; 0x20
    35ae:	8f 8f       	std	Y+31, r24	; 0x1f
    35b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35b2:	98 a1       	ldd	r25, Y+32	; 0x20
    35b4:	01 97       	sbiw	r24, 0x01	; 1
    35b6:	f1 f7       	brne	.-4      	; 0x35b4 <LCD_voidSendChar+0x10e>
    35b8:	98 a3       	std	Y+32, r25	; 0x20
    35ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35bc:	89 a1       	ldd	r24, Y+33	; 0x21
    35be:	9a a1       	ldd	r25, Y+34	; 0x22
    35c0:	01 97       	sbiw	r24, 0x01	; 1
    35c2:	9a a3       	std	Y+34, r25	; 0x22
    35c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c6:	89 a1       	ldd	r24, Y+33	; 0x21
    35c8:	9a a1       	ldd	r25, Y+34	; 0x22
    35ca:	00 97       	sbiw	r24, 0x00	; 0
    35cc:	69 f7       	brne	.-38     	; 0x35a8 <LCD_voidSendChar+0x102>
    35ce:	05 c1       	rjmp	.+522    	; 0x37da <LCD_voidSendChar+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d0:	6b a1       	ldd	r22, Y+35	; 0x23
    35d2:	7c a1       	ldd	r23, Y+36	; 0x24
    35d4:	8d a1       	ldd	r24, Y+37	; 0x25
    35d6:	9e a1       	ldd	r25, Y+38	; 0x26
    35d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35dc:	dc 01       	movw	r26, r24
    35de:	cb 01       	movw	r24, r22
    35e0:	9a a3       	std	Y+34, r25	; 0x22
    35e2:	89 a3       	std	Y+33, r24	; 0x21
    35e4:	89 a1       	ldd	r24, Y+33	; 0x21
    35e6:	9a a1       	ldd	r25, Y+34	; 0x22
    35e8:	9e 8f       	std	Y+30, r25	; 0x1e
    35ea:	8d 8f       	std	Y+29, r24	; 0x1d
    35ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35f0:	01 97       	sbiw	r24, 0x01	; 1
    35f2:	f1 f7       	brne	.-4      	; 0x35f0 <LCD_voidSendChar+0x14a>
    35f4:	9e 8f       	std	Y+30, r25	; 0x1e
    35f6:	8d 8f       	std	Y+29, r24	; 0x1d
    35f8:	f0 c0       	rjmp	.+480    	; 0x37da <LCD_voidSendChar+0x334>
		_delay_ms(1);

	}
	else
	{
		LCDHelp(u8IndexCpy,u8CharCpy);
    35fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    35fc:	6c a5       	ldd	r22, Y+44	; 0x2c
    35fe:	0e 94 aa 18 	call	0x3154	; 0x3154 <LCDHelp>
    3602:	80 e0       	ldi	r24, 0x00	; 0
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	a0 e8       	ldi	r26, 0x80	; 128
    3608:	bf e3       	ldi	r27, 0x3F	; 63
    360a:	89 8f       	std	Y+25, r24	; 0x19
    360c:	9a 8f       	std	Y+26, r25	; 0x1a
    360e:	ab 8f       	std	Y+27, r26	; 0x1b
    3610:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3612:	69 8d       	ldd	r22, Y+25	; 0x19
    3614:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3616:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3618:	9c 8d       	ldd	r25, Y+28	; 0x1c
    361a:	20 e0       	ldi	r18, 0x00	; 0
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	4a ef       	ldi	r20, 0xFA	; 250
    3620:	54 e4       	ldi	r21, 0x44	; 68
    3622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3626:	dc 01       	movw	r26, r24
    3628:	cb 01       	movw	r24, r22
    362a:	8d 8b       	std	Y+21, r24	; 0x15
    362c:	9e 8b       	std	Y+22, r25	; 0x16
    362e:	af 8b       	std	Y+23, r26	; 0x17
    3630:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3632:	6d 89       	ldd	r22, Y+21	; 0x15
    3634:	7e 89       	ldd	r23, Y+22	; 0x16
    3636:	8f 89       	ldd	r24, Y+23	; 0x17
    3638:	98 8d       	ldd	r25, Y+24	; 0x18
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	40 e8       	ldi	r20, 0x80	; 128
    3640:	5f e3       	ldi	r21, 0x3F	; 63
    3642:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3646:	88 23       	and	r24, r24
    3648:	2c f4       	brge	.+10     	; 0x3654 <LCD_voidSendChar+0x1ae>
		__ticks = 1;
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	9c 8b       	std	Y+20, r25	; 0x14
    3650:	8b 8b       	std	Y+19, r24	; 0x13
    3652:	3f c0       	rjmp	.+126    	; 0x36d2 <LCD_voidSendChar+0x22c>
	else if (__tmp > 65535)
    3654:	6d 89       	ldd	r22, Y+21	; 0x15
    3656:	7e 89       	ldd	r23, Y+22	; 0x16
    3658:	8f 89       	ldd	r24, Y+23	; 0x17
    365a:	98 8d       	ldd	r25, Y+24	; 0x18
    365c:	20 e0       	ldi	r18, 0x00	; 0
    365e:	3f ef       	ldi	r19, 0xFF	; 255
    3660:	4f e7       	ldi	r20, 0x7F	; 127
    3662:	57 e4       	ldi	r21, 0x47	; 71
    3664:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3668:	18 16       	cp	r1, r24
    366a:	4c f5       	brge	.+82     	; 0x36be <LCD_voidSendChar+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    366c:	69 8d       	ldd	r22, Y+25	; 0x19
    366e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3670:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3672:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3674:	20 e0       	ldi	r18, 0x00	; 0
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	40 e2       	ldi	r20, 0x20	; 32
    367a:	51 e4       	ldi	r21, 0x41	; 65
    367c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3680:	dc 01       	movw	r26, r24
    3682:	cb 01       	movw	r24, r22
    3684:	bc 01       	movw	r22, r24
    3686:	cd 01       	movw	r24, r26
    3688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    368c:	dc 01       	movw	r26, r24
    368e:	cb 01       	movw	r24, r22
    3690:	9c 8b       	std	Y+20, r25	; 0x14
    3692:	8b 8b       	std	Y+19, r24	; 0x13
    3694:	0f c0       	rjmp	.+30     	; 0x36b4 <LCD_voidSendChar+0x20e>
    3696:	88 ec       	ldi	r24, 0xC8	; 200
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	9a 8b       	std	Y+18, r25	; 0x12
    369c:	89 8b       	std	Y+17, r24	; 0x11
    369e:	89 89       	ldd	r24, Y+17	; 0x11
    36a0:	9a 89       	ldd	r25, Y+18	; 0x12
    36a2:	01 97       	sbiw	r24, 0x01	; 1
    36a4:	f1 f7       	brne	.-4      	; 0x36a2 <LCD_voidSendChar+0x1fc>
    36a6:	9a 8b       	std	Y+18, r25	; 0x12
    36a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36aa:	8b 89       	ldd	r24, Y+19	; 0x13
    36ac:	9c 89       	ldd	r25, Y+20	; 0x14
    36ae:	01 97       	sbiw	r24, 0x01	; 1
    36b0:	9c 8b       	std	Y+20, r25	; 0x14
    36b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36b4:	8b 89       	ldd	r24, Y+19	; 0x13
    36b6:	9c 89       	ldd	r25, Y+20	; 0x14
    36b8:	00 97       	sbiw	r24, 0x00	; 0
    36ba:	69 f7       	brne	.-38     	; 0x3696 <LCD_voidSendChar+0x1f0>
    36bc:	14 c0       	rjmp	.+40     	; 0x36e6 <LCD_voidSendChar+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36be:	6d 89       	ldd	r22, Y+21	; 0x15
    36c0:	7e 89       	ldd	r23, Y+22	; 0x16
    36c2:	8f 89       	ldd	r24, Y+23	; 0x17
    36c4:	98 8d       	ldd	r25, Y+24	; 0x18
    36c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ca:	dc 01       	movw	r26, r24
    36cc:	cb 01       	movw	r24, r22
    36ce:	9c 8b       	std	Y+20, r25	; 0x14
    36d0:	8b 8b       	std	Y+19, r24	; 0x13
    36d2:	8b 89       	ldd	r24, Y+19	; 0x13
    36d4:	9c 89       	ldd	r25, Y+20	; 0x14
    36d6:	98 8b       	std	Y+16, r25	; 0x10
    36d8:	8f 87       	std	Y+15, r24	; 0x0f
    36da:	8f 85       	ldd	r24, Y+15	; 0x0f
    36dc:	98 89       	ldd	r25, Y+16	; 0x10
    36de:	01 97       	sbiw	r24, 0x01	; 1
    36e0:	f1 f7       	brne	.-4      	; 0x36de <LCD_voidSendChar+0x238>
    36e2:	98 8b       	std	Y+16, r25	; 0x10
    36e4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		LCDHelp(u8IndexCpy,u8CharCpy<<4);
    36e6:	8c a5       	ldd	r24, Y+44	; 0x2c
    36e8:	98 2f       	mov	r25, r24
    36ea:	92 95       	swap	r25
    36ec:	90 7f       	andi	r25, 0xF0	; 240
    36ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    36f0:	69 2f       	mov	r22, r25
    36f2:	0e 94 aa 18 	call	0x3154	; 0x3154 <LCDHelp>
    36f6:	80 e0       	ldi	r24, 0x00	; 0
    36f8:	90 e0       	ldi	r25, 0x00	; 0
    36fa:	a0 e8       	ldi	r26, 0x80	; 128
    36fc:	bf e3       	ldi	r27, 0x3F	; 63
    36fe:	8b 87       	std	Y+11, r24	; 0x0b
    3700:	9c 87       	std	Y+12, r25	; 0x0c
    3702:	ad 87       	std	Y+13, r26	; 0x0d
    3704:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3706:	6b 85       	ldd	r22, Y+11	; 0x0b
    3708:	7c 85       	ldd	r23, Y+12	; 0x0c
    370a:	8d 85       	ldd	r24, Y+13	; 0x0d
    370c:	9e 85       	ldd	r25, Y+14	; 0x0e
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	30 e0       	ldi	r19, 0x00	; 0
    3712:	4a ef       	ldi	r20, 0xFA	; 250
    3714:	54 e4       	ldi	r21, 0x44	; 68
    3716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371a:	dc 01       	movw	r26, r24
    371c:	cb 01       	movw	r24, r22
    371e:	8f 83       	std	Y+7, r24	; 0x07
    3720:	98 87       	std	Y+8, r25	; 0x08
    3722:	a9 87       	std	Y+9, r26	; 0x09
    3724:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3726:	6f 81       	ldd	r22, Y+7	; 0x07
    3728:	78 85       	ldd	r23, Y+8	; 0x08
    372a:	89 85       	ldd	r24, Y+9	; 0x09
    372c:	9a 85       	ldd	r25, Y+10	; 0x0a
    372e:	20 e0       	ldi	r18, 0x00	; 0
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	40 e8       	ldi	r20, 0x80	; 128
    3734:	5f e3       	ldi	r21, 0x3F	; 63
    3736:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    373a:	88 23       	and	r24, r24
    373c:	2c f4       	brge	.+10     	; 0x3748 <LCD_voidSendChar+0x2a2>
		__ticks = 1;
    373e:	81 e0       	ldi	r24, 0x01	; 1
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	9e 83       	std	Y+6, r25	; 0x06
    3744:	8d 83       	std	Y+5, r24	; 0x05
    3746:	3f c0       	rjmp	.+126    	; 0x37c6 <LCD_voidSendChar+0x320>
	else if (__tmp > 65535)
    3748:	6f 81       	ldd	r22, Y+7	; 0x07
    374a:	78 85       	ldd	r23, Y+8	; 0x08
    374c:	89 85       	ldd	r24, Y+9	; 0x09
    374e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3750:	20 e0       	ldi	r18, 0x00	; 0
    3752:	3f ef       	ldi	r19, 0xFF	; 255
    3754:	4f e7       	ldi	r20, 0x7F	; 127
    3756:	57 e4       	ldi	r21, 0x47	; 71
    3758:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    375c:	18 16       	cp	r1, r24
    375e:	4c f5       	brge	.+82     	; 0x37b2 <LCD_voidSendChar+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3760:	6b 85       	ldd	r22, Y+11	; 0x0b
    3762:	7c 85       	ldd	r23, Y+12	; 0x0c
    3764:	8d 85       	ldd	r24, Y+13	; 0x0d
    3766:	9e 85       	ldd	r25, Y+14	; 0x0e
    3768:	20 e0       	ldi	r18, 0x00	; 0
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	40 e2       	ldi	r20, 0x20	; 32
    376e:	51 e4       	ldi	r21, 0x41	; 65
    3770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3774:	dc 01       	movw	r26, r24
    3776:	cb 01       	movw	r24, r22
    3778:	bc 01       	movw	r22, r24
    377a:	cd 01       	movw	r24, r26
    377c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3780:	dc 01       	movw	r26, r24
    3782:	cb 01       	movw	r24, r22
    3784:	9e 83       	std	Y+6, r25	; 0x06
    3786:	8d 83       	std	Y+5, r24	; 0x05
    3788:	0f c0       	rjmp	.+30     	; 0x37a8 <LCD_voidSendChar+0x302>
    378a:	88 ec       	ldi	r24, 0xC8	; 200
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	9c 83       	std	Y+4, r25	; 0x04
    3790:	8b 83       	std	Y+3, r24	; 0x03
    3792:	8b 81       	ldd	r24, Y+3	; 0x03
    3794:	9c 81       	ldd	r25, Y+4	; 0x04
    3796:	01 97       	sbiw	r24, 0x01	; 1
    3798:	f1 f7       	brne	.-4      	; 0x3796 <LCD_voidSendChar+0x2f0>
    379a:	9c 83       	std	Y+4, r25	; 0x04
    379c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    379e:	8d 81       	ldd	r24, Y+5	; 0x05
    37a0:	9e 81       	ldd	r25, Y+6	; 0x06
    37a2:	01 97       	sbiw	r24, 0x01	; 1
    37a4:	9e 83       	std	Y+6, r25	; 0x06
    37a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37a8:	8d 81       	ldd	r24, Y+5	; 0x05
    37aa:	9e 81       	ldd	r25, Y+6	; 0x06
    37ac:	00 97       	sbiw	r24, 0x00	; 0
    37ae:	69 f7       	brne	.-38     	; 0x378a <LCD_voidSendChar+0x2e4>
    37b0:	14 c0       	rjmp	.+40     	; 0x37da <LCD_voidSendChar+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37b2:	6f 81       	ldd	r22, Y+7	; 0x07
    37b4:	78 85       	ldd	r23, Y+8	; 0x08
    37b6:	89 85       	ldd	r24, Y+9	; 0x09
    37b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37be:	dc 01       	movw	r26, r24
    37c0:	cb 01       	movw	r24, r22
    37c2:	9e 83       	std	Y+6, r25	; 0x06
    37c4:	8d 83       	std	Y+5, r24	; 0x05
    37c6:	8d 81       	ldd	r24, Y+5	; 0x05
    37c8:	9e 81       	ldd	r25, Y+6	; 0x06
    37ca:	9a 83       	std	Y+2, r25	; 0x02
    37cc:	89 83       	std	Y+1, r24	; 0x01
    37ce:	89 81       	ldd	r24, Y+1	; 0x01
    37d0:	9a 81       	ldd	r25, Y+2	; 0x02
    37d2:	01 97       	sbiw	r24, 0x01	; 1
    37d4:	f1 f7       	brne	.-4      	; 0x37d2 <LCD_voidSendChar+0x32c>
    37d6:	9a 83       	std	Y+2, r25	; 0x02
    37d8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);

	}

	}
    37da:	ac 96       	adiw	r28, 0x2c	; 44
    37dc:	0f b6       	in	r0, 0x3f	; 63
    37de:	f8 94       	cli
    37e0:	de bf       	out	0x3e, r29	; 62
    37e2:	0f be       	out	0x3f, r0	; 63
    37e4:	cd bf       	out	0x3d, r28	; 61
    37e6:	cf 91       	pop	r28
    37e8:	df 91       	pop	r29
    37ea:	08 95       	ret

000037ec <LCD_voidSendCommand>:



void LCD_voidSendCommand(uint8 u8IndexCpy, uint8 u8CommandCpy)
{
    37ec:	df 93       	push	r29
    37ee:	cf 93       	push	r28
    37f0:	cd b7       	in	r28, 0x3d	; 61
    37f2:	de b7       	in	r29, 0x3e	; 62
    37f4:	ac 97       	sbiw	r28, 0x2c	; 44
    37f6:	0f b6       	in	r0, 0x3f	; 63
    37f8:	f8 94       	cli
    37fa:	de bf       	out	0x3e, r29	; 62
    37fc:	0f be       	out	0x3f, r0	; 63
    37fe:	cd bf       	out	0x3d, r28	; 61
    3800:	8b a7       	std	Y+43, r24	; 0x2b
    3802:	6c a7       	std	Y+44, r22	; 0x2c
	if (lcdarr[u8IndexCpy].lcdswconfig.u8mode==LCD_8_BIT_MODE)
    3804:	8b a5       	ldd	r24, Y+43	; 0x2b
    3806:	28 2f       	mov	r18, r24
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	c9 01       	movw	r24, r18
    380c:	88 0f       	add	r24, r24
    380e:	99 1f       	adc	r25, r25
    3810:	82 0f       	add	r24, r18
    3812:	93 1f       	adc	r25, r19
    3814:	88 0f       	add	r24, r24
    3816:	99 1f       	adc	r25, r25
    3818:	88 0f       	add	r24, r24
    381a:	99 1f       	adc	r25, r25
    381c:	fc 01       	movw	r30, r24
    381e:	e0 55       	subi	r30, 0x50	; 80
    3820:	ff 4f       	sbci	r31, 0xFF	; 255
    3822:	80 81       	ld	r24, Z
    3824:	81 70       	andi	r24, 0x01	; 1
    3826:	81 30       	cpi	r24, 0x01	; 1
    3828:	09 f0       	breq	.+2      	; 0x382c <LCD_voidSendCommand+0x40>
    382a:	77 c0       	rjmp	.+238    	; 0x391a <LCD_voidSendCommand+0x12e>
		{
			voidWriteCmd(u8IndexCpy,u8CommandCpy);
    382c:	8b a5       	ldd	r24, Y+43	; 0x2b
    382e:	6c a5       	ldd	r22, Y+44	; 0x2c
    3830:	0e 94 87 18 	call	0x310e	; 0x310e <voidWriteCmd>
    3834:	80 e0       	ldi	r24, 0x00	; 0
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	a0 e8       	ldi	r26, 0x80	; 128
    383a:	bf e3       	ldi	r27, 0x3F	; 63
    383c:	8f a3       	std	Y+39, r24	; 0x27
    383e:	98 a7       	std	Y+40, r25	; 0x28
    3840:	a9 a7       	std	Y+41, r26	; 0x29
    3842:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3844:	6f a1       	ldd	r22, Y+39	; 0x27
    3846:	78 a5       	ldd	r23, Y+40	; 0x28
    3848:	89 a5       	ldd	r24, Y+41	; 0x29
    384a:	9a a5       	ldd	r25, Y+42	; 0x2a
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	4a ef       	ldi	r20, 0xFA	; 250
    3852:	54 e4       	ldi	r21, 0x44	; 68
    3854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3858:	dc 01       	movw	r26, r24
    385a:	cb 01       	movw	r24, r22
    385c:	8b a3       	std	Y+35, r24	; 0x23
    385e:	9c a3       	std	Y+36, r25	; 0x24
    3860:	ad a3       	std	Y+37, r26	; 0x25
    3862:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3864:	6b a1       	ldd	r22, Y+35	; 0x23
    3866:	7c a1       	ldd	r23, Y+36	; 0x24
    3868:	8d a1       	ldd	r24, Y+37	; 0x25
    386a:	9e a1       	ldd	r25, Y+38	; 0x26
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	40 e8       	ldi	r20, 0x80	; 128
    3872:	5f e3       	ldi	r21, 0x3F	; 63
    3874:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3878:	88 23       	and	r24, r24
    387a:	2c f4       	brge	.+10     	; 0x3886 <LCD_voidSendCommand+0x9a>
		__ticks = 1;
    387c:	81 e0       	ldi	r24, 0x01	; 1
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	9a a3       	std	Y+34, r25	; 0x22
    3882:	89 a3       	std	Y+33, r24	; 0x21
    3884:	3f c0       	rjmp	.+126    	; 0x3904 <LCD_voidSendCommand+0x118>
	else if (__tmp > 65535)
    3886:	6b a1       	ldd	r22, Y+35	; 0x23
    3888:	7c a1       	ldd	r23, Y+36	; 0x24
    388a:	8d a1       	ldd	r24, Y+37	; 0x25
    388c:	9e a1       	ldd	r25, Y+38	; 0x26
    388e:	20 e0       	ldi	r18, 0x00	; 0
    3890:	3f ef       	ldi	r19, 0xFF	; 255
    3892:	4f e7       	ldi	r20, 0x7F	; 127
    3894:	57 e4       	ldi	r21, 0x47	; 71
    3896:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    389a:	18 16       	cp	r1, r24
    389c:	4c f5       	brge	.+82     	; 0x38f0 <LCD_voidSendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    389e:	6f a1       	ldd	r22, Y+39	; 0x27
    38a0:	78 a5       	ldd	r23, Y+40	; 0x28
    38a2:	89 a5       	ldd	r24, Y+41	; 0x29
    38a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    38a6:	20 e0       	ldi	r18, 0x00	; 0
    38a8:	30 e0       	ldi	r19, 0x00	; 0
    38aa:	40 e2       	ldi	r20, 0x20	; 32
    38ac:	51 e4       	ldi	r21, 0x41	; 65
    38ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b2:	dc 01       	movw	r26, r24
    38b4:	cb 01       	movw	r24, r22
    38b6:	bc 01       	movw	r22, r24
    38b8:	cd 01       	movw	r24, r26
    38ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38be:	dc 01       	movw	r26, r24
    38c0:	cb 01       	movw	r24, r22
    38c2:	9a a3       	std	Y+34, r25	; 0x22
    38c4:	89 a3       	std	Y+33, r24	; 0x21
    38c6:	0f c0       	rjmp	.+30     	; 0x38e6 <LCD_voidSendCommand+0xfa>
    38c8:	88 ec       	ldi	r24, 0xC8	; 200
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	98 a3       	std	Y+32, r25	; 0x20
    38ce:	8f 8f       	std	Y+31, r24	; 0x1f
    38d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38d2:	98 a1       	ldd	r25, Y+32	; 0x20
    38d4:	01 97       	sbiw	r24, 0x01	; 1
    38d6:	f1 f7       	brne	.-4      	; 0x38d4 <LCD_voidSendCommand+0xe8>
    38d8:	98 a3       	std	Y+32, r25	; 0x20
    38da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38dc:	89 a1       	ldd	r24, Y+33	; 0x21
    38de:	9a a1       	ldd	r25, Y+34	; 0x22
    38e0:	01 97       	sbiw	r24, 0x01	; 1
    38e2:	9a a3       	std	Y+34, r25	; 0x22
    38e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38e6:	89 a1       	ldd	r24, Y+33	; 0x21
    38e8:	9a a1       	ldd	r25, Y+34	; 0x22
    38ea:	00 97       	sbiw	r24, 0x00	; 0
    38ec:	69 f7       	brne	.-38     	; 0x38c8 <LCD_voidSendCommand+0xdc>
    38ee:	05 c1       	rjmp	.+522    	; 0x3afa <LCD_voidSendCommand+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38f0:	6b a1       	ldd	r22, Y+35	; 0x23
    38f2:	7c a1       	ldd	r23, Y+36	; 0x24
    38f4:	8d a1       	ldd	r24, Y+37	; 0x25
    38f6:	9e a1       	ldd	r25, Y+38	; 0x26
    38f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38fc:	dc 01       	movw	r26, r24
    38fe:	cb 01       	movw	r24, r22
    3900:	9a a3       	std	Y+34, r25	; 0x22
    3902:	89 a3       	std	Y+33, r24	; 0x21
    3904:	89 a1       	ldd	r24, Y+33	; 0x21
    3906:	9a a1       	ldd	r25, Y+34	; 0x22
    3908:	9e 8f       	std	Y+30, r25	; 0x1e
    390a:	8d 8f       	std	Y+29, r24	; 0x1d
    390c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    390e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3910:	01 97       	sbiw	r24, 0x01	; 1
    3912:	f1 f7       	brne	.-4      	; 0x3910 <LCD_voidSendCommand+0x124>
    3914:	9e 8f       	std	Y+30, r25	; 0x1e
    3916:	8d 8f       	std	Y+29, r24	; 0x1d
    3918:	f0 c0       	rjmp	.+480    	; 0x3afa <LCD_voidSendCommand+0x30e>
			_delay_ms(1);

		}
		else
		{
			voidWriteCmd(u8IndexCpy,u8CommandCpy);
    391a:	8b a5       	ldd	r24, Y+43	; 0x2b
    391c:	6c a5       	ldd	r22, Y+44	; 0x2c
    391e:	0e 94 87 18 	call	0x310e	; 0x310e <voidWriteCmd>
    3922:	80 e0       	ldi	r24, 0x00	; 0
    3924:	90 e0       	ldi	r25, 0x00	; 0
    3926:	a0 e8       	ldi	r26, 0x80	; 128
    3928:	bf e3       	ldi	r27, 0x3F	; 63
    392a:	89 8f       	std	Y+25, r24	; 0x19
    392c:	9a 8f       	std	Y+26, r25	; 0x1a
    392e:	ab 8f       	std	Y+27, r26	; 0x1b
    3930:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3932:	69 8d       	ldd	r22, Y+25	; 0x19
    3934:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3936:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3938:	9c 8d       	ldd	r25, Y+28	; 0x1c
    393a:	20 e0       	ldi	r18, 0x00	; 0
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	4a ef       	ldi	r20, 0xFA	; 250
    3940:	54 e4       	ldi	r21, 0x44	; 68
    3942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3946:	dc 01       	movw	r26, r24
    3948:	cb 01       	movw	r24, r22
    394a:	8d 8b       	std	Y+21, r24	; 0x15
    394c:	9e 8b       	std	Y+22, r25	; 0x16
    394e:	af 8b       	std	Y+23, r26	; 0x17
    3950:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3952:	6d 89       	ldd	r22, Y+21	; 0x15
    3954:	7e 89       	ldd	r23, Y+22	; 0x16
    3956:	8f 89       	ldd	r24, Y+23	; 0x17
    3958:	98 8d       	ldd	r25, Y+24	; 0x18
    395a:	20 e0       	ldi	r18, 0x00	; 0
    395c:	30 e0       	ldi	r19, 0x00	; 0
    395e:	40 e8       	ldi	r20, 0x80	; 128
    3960:	5f e3       	ldi	r21, 0x3F	; 63
    3962:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3966:	88 23       	and	r24, r24
    3968:	2c f4       	brge	.+10     	; 0x3974 <LCD_voidSendCommand+0x188>
		__ticks = 1;
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	9c 8b       	std	Y+20, r25	; 0x14
    3970:	8b 8b       	std	Y+19, r24	; 0x13
    3972:	3f c0       	rjmp	.+126    	; 0x39f2 <LCD_voidSendCommand+0x206>
	else if (__tmp > 65535)
    3974:	6d 89       	ldd	r22, Y+21	; 0x15
    3976:	7e 89       	ldd	r23, Y+22	; 0x16
    3978:	8f 89       	ldd	r24, Y+23	; 0x17
    397a:	98 8d       	ldd	r25, Y+24	; 0x18
    397c:	20 e0       	ldi	r18, 0x00	; 0
    397e:	3f ef       	ldi	r19, 0xFF	; 255
    3980:	4f e7       	ldi	r20, 0x7F	; 127
    3982:	57 e4       	ldi	r21, 0x47	; 71
    3984:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3988:	18 16       	cp	r1, r24
    398a:	4c f5       	brge	.+82     	; 0x39de <LCD_voidSendCommand+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    398c:	69 8d       	ldd	r22, Y+25	; 0x19
    398e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3990:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3992:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3994:	20 e0       	ldi	r18, 0x00	; 0
    3996:	30 e0       	ldi	r19, 0x00	; 0
    3998:	40 e2       	ldi	r20, 0x20	; 32
    399a:	51 e4       	ldi	r21, 0x41	; 65
    399c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a0:	dc 01       	movw	r26, r24
    39a2:	cb 01       	movw	r24, r22
    39a4:	bc 01       	movw	r22, r24
    39a6:	cd 01       	movw	r24, r26
    39a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ac:	dc 01       	movw	r26, r24
    39ae:	cb 01       	movw	r24, r22
    39b0:	9c 8b       	std	Y+20, r25	; 0x14
    39b2:	8b 8b       	std	Y+19, r24	; 0x13
    39b4:	0f c0       	rjmp	.+30     	; 0x39d4 <LCD_voidSendCommand+0x1e8>
    39b6:	88 ec       	ldi	r24, 0xC8	; 200
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	9a 8b       	std	Y+18, r25	; 0x12
    39bc:	89 8b       	std	Y+17, r24	; 0x11
    39be:	89 89       	ldd	r24, Y+17	; 0x11
    39c0:	9a 89       	ldd	r25, Y+18	; 0x12
    39c2:	01 97       	sbiw	r24, 0x01	; 1
    39c4:	f1 f7       	brne	.-4      	; 0x39c2 <LCD_voidSendCommand+0x1d6>
    39c6:	9a 8b       	std	Y+18, r25	; 0x12
    39c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ca:	8b 89       	ldd	r24, Y+19	; 0x13
    39cc:	9c 89       	ldd	r25, Y+20	; 0x14
    39ce:	01 97       	sbiw	r24, 0x01	; 1
    39d0:	9c 8b       	std	Y+20, r25	; 0x14
    39d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39d4:	8b 89       	ldd	r24, Y+19	; 0x13
    39d6:	9c 89       	ldd	r25, Y+20	; 0x14
    39d8:	00 97       	sbiw	r24, 0x00	; 0
    39da:	69 f7       	brne	.-38     	; 0x39b6 <LCD_voidSendCommand+0x1ca>
    39dc:	14 c0       	rjmp	.+40     	; 0x3a06 <LCD_voidSendCommand+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39de:	6d 89       	ldd	r22, Y+21	; 0x15
    39e0:	7e 89       	ldd	r23, Y+22	; 0x16
    39e2:	8f 89       	ldd	r24, Y+23	; 0x17
    39e4:	98 8d       	ldd	r25, Y+24	; 0x18
    39e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ea:	dc 01       	movw	r26, r24
    39ec:	cb 01       	movw	r24, r22
    39ee:	9c 8b       	std	Y+20, r25	; 0x14
    39f0:	8b 8b       	std	Y+19, r24	; 0x13
    39f2:	8b 89       	ldd	r24, Y+19	; 0x13
    39f4:	9c 89       	ldd	r25, Y+20	; 0x14
    39f6:	98 8b       	std	Y+16, r25	; 0x10
    39f8:	8f 87       	std	Y+15, r24	; 0x0f
    39fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    39fc:	98 89       	ldd	r25, Y+16	; 0x10
    39fe:	01 97       	sbiw	r24, 0x01	; 1
    3a00:	f1 f7       	brne	.-4      	; 0x39fe <LCD_voidSendCommand+0x212>
    3a02:	98 8b       	std	Y+16, r25	; 0x10
    3a04:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);
			voidWriteCmd(u8IndexCpy,u8CommandCpy<<4);
    3a06:	8c a5       	ldd	r24, Y+44	; 0x2c
    3a08:	98 2f       	mov	r25, r24
    3a0a:	92 95       	swap	r25
    3a0c:	90 7f       	andi	r25, 0xF0	; 240
    3a0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a10:	69 2f       	mov	r22, r25
    3a12:	0e 94 87 18 	call	0x310e	; 0x310e <voidWriteCmd>
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	a0 e8       	ldi	r26, 0x80	; 128
    3a1c:	bf e3       	ldi	r27, 0x3F	; 63
    3a1e:	8b 87       	std	Y+11, r24	; 0x0b
    3a20:	9c 87       	std	Y+12, r25	; 0x0c
    3a22:	ad 87       	std	Y+13, r26	; 0x0d
    3a24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a26:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a28:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	4a ef       	ldi	r20, 0xFA	; 250
    3a34:	54 e4       	ldi	r21, 0x44	; 68
    3a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3a:	dc 01       	movw	r26, r24
    3a3c:	cb 01       	movw	r24, r22
    3a3e:	8f 83       	std	Y+7, r24	; 0x07
    3a40:	98 87       	std	Y+8, r25	; 0x08
    3a42:	a9 87       	std	Y+9, r26	; 0x09
    3a44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a46:	6f 81       	ldd	r22, Y+7	; 0x07
    3a48:	78 85       	ldd	r23, Y+8	; 0x08
    3a4a:	89 85       	ldd	r24, Y+9	; 0x09
    3a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	40 e8       	ldi	r20, 0x80	; 128
    3a54:	5f e3       	ldi	r21, 0x3F	; 63
    3a56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a5a:	88 23       	and	r24, r24
    3a5c:	2c f4       	brge	.+10     	; 0x3a68 <LCD_voidSendCommand+0x27c>
		__ticks = 1;
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	9e 83       	std	Y+6, r25	; 0x06
    3a64:	8d 83       	std	Y+5, r24	; 0x05
    3a66:	3f c0       	rjmp	.+126    	; 0x3ae6 <LCD_voidSendCommand+0x2fa>
	else if (__tmp > 65535)
    3a68:	6f 81       	ldd	r22, Y+7	; 0x07
    3a6a:	78 85       	ldd	r23, Y+8	; 0x08
    3a6c:	89 85       	ldd	r24, Y+9	; 0x09
    3a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a70:	20 e0       	ldi	r18, 0x00	; 0
    3a72:	3f ef       	ldi	r19, 0xFF	; 255
    3a74:	4f e7       	ldi	r20, 0x7F	; 127
    3a76:	57 e4       	ldi	r21, 0x47	; 71
    3a78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a7c:	18 16       	cp	r1, r24
    3a7e:	4c f5       	brge	.+82     	; 0x3ad2 <LCD_voidSendCommand+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a80:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a82:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	40 e2       	ldi	r20, 0x20	; 32
    3a8e:	51 e4       	ldi	r21, 0x41	; 65
    3a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a94:	dc 01       	movw	r26, r24
    3a96:	cb 01       	movw	r24, r22
    3a98:	bc 01       	movw	r22, r24
    3a9a:	cd 01       	movw	r24, r26
    3a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	9e 83       	std	Y+6, r25	; 0x06
    3aa6:	8d 83       	std	Y+5, r24	; 0x05
    3aa8:	0f c0       	rjmp	.+30     	; 0x3ac8 <LCD_voidSendCommand+0x2dc>
    3aaa:	88 ec       	ldi	r24, 0xC8	; 200
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	9c 83       	std	Y+4, r25	; 0x04
    3ab0:	8b 83       	std	Y+3, r24	; 0x03
    3ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	f1 f7       	brne	.-4      	; 0x3ab6 <LCD_voidSendCommand+0x2ca>
    3aba:	9c 83       	std	Y+4, r25	; 0x04
    3abc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3abe:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac2:	01 97       	sbiw	r24, 0x01	; 1
    3ac4:	9e 83       	std	Y+6, r25	; 0x06
    3ac6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aca:	9e 81       	ldd	r25, Y+6	; 0x06
    3acc:	00 97       	sbiw	r24, 0x00	; 0
    3ace:	69 f7       	brne	.-38     	; 0x3aaa <LCD_voidSendCommand+0x2be>
    3ad0:	14 c0       	rjmp	.+40     	; 0x3afa <LCD_voidSendCommand+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ad4:	78 85       	ldd	r23, Y+8	; 0x08
    3ad6:	89 85       	ldd	r24, Y+9	; 0x09
    3ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ade:	dc 01       	movw	r26, r24
    3ae0:	cb 01       	movw	r24, r22
    3ae2:	9e 83       	std	Y+6, r25	; 0x06
    3ae4:	8d 83       	std	Y+5, r24	; 0x05
    3ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    3aea:	9a 83       	std	Y+2, r25	; 0x02
    3aec:	89 83       	std	Y+1, r24	; 0x01
    3aee:	89 81       	ldd	r24, Y+1	; 0x01
    3af0:	9a 81       	ldd	r25, Y+2	; 0x02
    3af2:	01 97       	sbiw	r24, 0x01	; 1
    3af4:	f1 f7       	brne	.-4      	; 0x3af2 <LCD_voidSendCommand+0x306>
    3af6:	9a 83       	std	Y+2, r25	; 0x02
    3af8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);
		}

}
    3afa:	ac 96       	adiw	r28, 0x2c	; 44
    3afc:	0f b6       	in	r0, 0x3f	; 63
    3afe:	f8 94       	cli
    3b00:	de bf       	out	0x3e, r29	; 62
    3b02:	0f be       	out	0x3f, r0	; 63
    3b04:	cd bf       	out	0x3d, r28	; 61
    3b06:	cf 91       	pop	r28
    3b08:	df 91       	pop	r29
    3b0a:	08 95       	ret

00003b0c <LCD_voidSendString>:



void LCD_voidSendString(uint8 u8IndexCpy, uint8* pau8CharCpy)
{
    3b0c:	df 93       	push	r29
    3b0e:	cf 93       	push	r28
    3b10:	00 d0       	rcall	.+0      	; 0x3b12 <LCD_voidSendString+0x6>
    3b12:	00 d0       	rcall	.+0      	; 0x3b14 <LCD_voidSendString+0x8>
    3b14:	cd b7       	in	r28, 0x3d	; 61
    3b16:	de b7       	in	r29, 0x3e	; 62
    3b18:	8a 83       	std	Y+2, r24	; 0x02
    3b1a:	7c 83       	std	Y+4, r23	; 0x04
    3b1c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 u8CntLoc=0;
    3b1e:	19 82       	std	Y+1, r1	; 0x01
    3b20:	10 c0       	rjmp	.+32     	; 0x3b42 <LCD_voidSendString+0x36>
	while(pau8CharCpy[u8CntLoc]!= '\0')
			{
				LCD_voidSendChar(u8IndexCpy,pau8CharCpy[u8CntLoc])	;
    3b22:	89 81       	ldd	r24, Y+1	; 0x01
    3b24:	28 2f       	mov	r18, r24
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	8b 81       	ldd	r24, Y+3	; 0x03
    3b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b2c:	fc 01       	movw	r30, r24
    3b2e:	e2 0f       	add	r30, r18
    3b30:	f3 1f       	adc	r31, r19
    3b32:	90 81       	ld	r25, Z
    3b34:	8a 81       	ldd	r24, Y+2	; 0x02
    3b36:	69 2f       	mov	r22, r25
    3b38:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <LCD_voidSendChar>
				u8CntLoc++;
    3b3c:	89 81       	ldd	r24, Y+1	; 0x01
    3b3e:	8f 5f       	subi	r24, 0xFF	; 255
    3b40:	89 83       	std	Y+1, r24	; 0x01


void LCD_voidSendString(uint8 u8IndexCpy, uint8* pau8CharCpy)
{
	uint8 u8CntLoc=0;
	while(pau8CharCpy[u8CntLoc]!= '\0')
    3b42:	89 81       	ldd	r24, Y+1	; 0x01
    3b44:	28 2f       	mov	r18, r24
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	8b 81       	ldd	r24, Y+3	; 0x03
    3b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b4c:	fc 01       	movw	r30, r24
    3b4e:	e2 0f       	add	r30, r18
    3b50:	f3 1f       	adc	r31, r19
    3b52:	80 81       	ld	r24, Z
    3b54:	88 23       	and	r24, r24
    3b56:	29 f7       	brne	.-54     	; 0x3b22 <LCD_voidSendString+0x16>
			{
				LCD_voidSendChar(u8IndexCpy,pau8CharCpy[u8CntLoc])	;
				u8CntLoc++;
			}
}
    3b58:	0f 90       	pop	r0
    3b5a:	0f 90       	pop	r0
    3b5c:	0f 90       	pop	r0
    3b5e:	0f 90       	pop	r0
    3b60:	cf 91       	pop	r28
    3b62:	df 91       	pop	r29
    3b64:	08 95       	ret

00003b66 <LCD_voidClrScr>:

void LCD_voidClrScr(uint8 u8IndexCpy)
	{
    3b66:	df 93       	push	r29
    3b68:	cf 93       	push	r28
    3b6a:	0f 92       	push	r0
    3b6c:	cd b7       	in	r28, 0x3d	; 61
    3b6e:	de b7       	in	r29, 0x3e	; 62
    3b70:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidSendCommand(u8IndexCpy,0x01);
    3b72:	89 81       	ldd	r24, Y+1	; 0x01
    3b74:	61 e0       	ldi	r22, 0x01	; 1
    3b76:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <LCD_voidSendCommand>
	}
    3b7a:	0f 90       	pop	r0
    3b7c:	cf 91       	pop	r28
    3b7e:	df 91       	pop	r29
    3b80:	08 95       	ret

00003b82 <LCD_voidSendNumber>:

void LCD_voidSendNumber(uint8 u8IndexCpy,uint32 u32NumberCpy )
{
    3b82:	0f 93       	push	r16
    3b84:	1f 93       	push	r17
    3b86:	df 93       	push	r29
    3b88:	cf 93       	push	r28
    3b8a:	cd b7       	in	r28, 0x3d	; 61
    3b8c:	de b7       	in	r29, 0x3e	; 62
    3b8e:	62 97       	sbiw	r28, 0x12	; 18
    3b90:	0f b6       	in	r0, 0x3f	; 63
    3b92:	f8 94       	cli
    3b94:	de bf       	out	0x3e, r29	; 62
    3b96:	0f be       	out	0x3f, r0	; 63
    3b98:	cd bf       	out	0x3d, r28	; 61
    3b9a:	8e 87       	std	Y+14, r24	; 0x0e
    3b9c:	4f 87       	std	Y+15, r20	; 0x0f
    3b9e:	58 8b       	std	Y+16, r21	; 0x10
    3ba0:	69 8b       	std	Y+17, r22	; 0x11
    3ba2:	7a 8b       	std	Y+18, r23	; 0x12
	uint8 i=0, Num[10]={'\0'};
    3ba4:	1b 82       	std	Y+3, r1	; 0x03
    3ba6:	8a e0       	ldi	r24, 0x0A	; 10
    3ba8:	fe 01       	movw	r30, r28
    3baa:	34 96       	adiw	r30, 0x04	; 4
    3bac:	df 01       	movw	r26, r30
    3bae:	98 2f       	mov	r25, r24
    3bb0:	1d 92       	st	X+, r1
    3bb2:	9a 95       	dec	r25
    3bb4:	e9 f7       	brne	.-6      	; 0x3bb0 <LCD_voidSendNumber+0x2e>
	do
	{
		Num[i] = (u32NumberCpy%10);
    3bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb8:	08 2f       	mov	r16, r24
    3bba:	10 e0       	ldi	r17, 0x00	; 0
    3bbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bbe:	98 89       	ldd	r25, Y+16	; 0x10
    3bc0:	a9 89       	ldd	r26, Y+17	; 0x11
    3bc2:	ba 89       	ldd	r27, Y+18	; 0x12
    3bc4:	2a e0       	ldi	r18, 0x0A	; 10
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	40 e0       	ldi	r20, 0x00	; 0
    3bca:	50 e0       	ldi	r21, 0x00	; 0
    3bcc:	bc 01       	movw	r22, r24
    3bce:	cd 01       	movw	r24, r26
    3bd0:	0e 94 8c 23 	call	0x4718	; 0x4718 <__udivmodsi4>
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	cb 01       	movw	r24, r22
    3bd8:	28 2f       	mov	r18, r24
    3bda:	ce 01       	movw	r24, r28
    3bdc:	04 96       	adiw	r24, 0x04	; 4
    3bde:	fc 01       	movw	r30, r24
    3be0:	e0 0f       	add	r30, r16
    3be2:	f1 1f       	adc	r31, r17
    3be4:	20 83       	st	Z, r18
		u32NumberCpy /= 10;
    3be6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3be8:	98 89       	ldd	r25, Y+16	; 0x10
    3bea:	a9 89       	ldd	r26, Y+17	; 0x11
    3bec:	ba 89       	ldd	r27, Y+18	; 0x12
    3bee:	2a e0       	ldi	r18, 0x0A	; 10
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	40 e0       	ldi	r20, 0x00	; 0
    3bf4:	50 e0       	ldi	r21, 0x00	; 0
    3bf6:	bc 01       	movw	r22, r24
    3bf8:	cd 01       	movw	r24, r26
    3bfa:	0e 94 8c 23 	call	0x4718	; 0x4718 <__udivmodsi4>
    3bfe:	da 01       	movw	r26, r20
    3c00:	c9 01       	movw	r24, r18
    3c02:	8f 87       	std	Y+15, r24	; 0x0f
    3c04:	98 8b       	std	Y+16, r25	; 0x10
    3c06:	a9 8b       	std	Y+17, r26	; 0x11
    3c08:	ba 8b       	std	Y+18, r27	; 0x12
		i++;
    3c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c0c:	8f 5f       	subi	r24, 0xFF	; 255
    3c0e:	8b 83       	std	Y+3, r24	; 0x03
	}while(u32NumberCpy != 0);
    3c10:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c12:	98 89       	ldd	r25, Y+16	; 0x10
    3c14:	a9 89       	ldd	r26, Y+17	; 0x11
    3c16:	ba 89       	ldd	r27, Y+18	; 0x12
    3c18:	00 97       	sbiw	r24, 0x00	; 0
    3c1a:	a1 05       	cpc	r26, r1
    3c1c:	b1 05       	cpc	r27, r1
    3c1e:	59 f6       	brne	.-106    	; 0x3bb6 <LCD_voidSendNumber+0x34>
	i=10;
    3c20:	8a e0       	ldi	r24, 0x0A	; 10
    3c22:	8b 83       	std	Y+3, r24	; 0x03
    3c24:	2a c0       	rjmp	.+84     	; 0x3c7a <LCD_voidSendNumber+0xf8>
	while(i != 0)
	{
		i--;
    3c26:	8b 81       	ldd	r24, Y+3	; 0x03
    3c28:	81 50       	subi	r24, 0x01	; 1
    3c2a:	8b 83       	std	Y+3, r24	; 0x03
		if(Num[i] != '\0')
    3c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c2e:	28 2f       	mov	r18, r24
    3c30:	30 e0       	ldi	r19, 0x00	; 0
    3c32:	ce 01       	movw	r24, r28
    3c34:	04 96       	adiw	r24, 0x04	; 4
    3c36:	fc 01       	movw	r30, r24
    3c38:	e2 0f       	add	r30, r18
    3c3a:	f3 1f       	adc	r31, r19
    3c3c:	80 81       	ld	r24, Z
    3c3e:	88 23       	and	r24, r24
    3c40:	e1 f0       	breq	.+56     	; 0x3c7a <LCD_voidSendNumber+0xf8>
		{
			for(int j=i;i>0;i--)
    3c42:	8b 81       	ldd	r24, Y+3	; 0x03
    3c44:	88 2f       	mov	r24, r24
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	9a 83       	std	Y+2, r25	; 0x02
    3c4a:	89 83       	std	Y+1, r24	; 0x01
    3c4c:	12 c0       	rjmp	.+36     	; 0x3c72 <LCD_voidSendNumber+0xf0>
			{
				LCD_voidSendChar(u8IndexCpy,Num[i]+'0');
    3c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c50:	28 2f       	mov	r18, r24
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	ce 01       	movw	r24, r28
    3c56:	04 96       	adiw	r24, 0x04	; 4
    3c58:	fc 01       	movw	r30, r24
    3c5a:	e2 0f       	add	r30, r18
    3c5c:	f3 1f       	adc	r31, r19
    3c5e:	80 81       	ld	r24, Z
    3c60:	98 2f       	mov	r25, r24
    3c62:	90 5d       	subi	r25, 0xD0	; 208
    3c64:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c66:	69 2f       	mov	r22, r25
    3c68:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <LCD_voidSendChar>
	while(i != 0)
	{
		i--;
		if(Num[i] != '\0')
		{
			for(int j=i;i>0;i--)
    3c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c6e:	81 50       	subi	r24, 0x01	; 1
    3c70:	8b 83       	std	Y+3, r24	; 0x03
    3c72:	8b 81       	ldd	r24, Y+3	; 0x03
    3c74:	88 23       	and	r24, r24
    3c76:	59 f7       	brne	.-42     	; 0x3c4e <LCD_voidSendNumber+0xcc>
    3c78:	03 c0       	rjmp	.+6      	; 0x3c80 <LCD_voidSendNumber+0xfe>
		Num[i] = (u32NumberCpy%10);
		u32NumberCpy /= 10;
		i++;
	}while(u32NumberCpy != 0);
	i=10;
	while(i != 0)
    3c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c7c:	88 23       	and	r24, r24
    3c7e:	99 f6       	brne	.-90     	; 0x3c26 <LCD_voidSendNumber+0xa4>
				LCD_voidSendChar(u8IndexCpy,Num[i]+'0');
			}
			break;
		}
	}
	LCD_voidSendChar(u8IndexCpy,Num[0]+'0');
    3c80:	8c 81       	ldd	r24, Y+4	; 0x04
    3c82:	98 2f       	mov	r25, r24
    3c84:	90 5d       	subi	r25, 0xD0	; 208
    3c86:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c88:	69 2f       	mov	r22, r25
    3c8a:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <LCD_voidSendChar>
}
    3c8e:	62 96       	adiw	r28, 0x12	; 18
    3c90:	0f b6       	in	r0, 0x3f	; 63
    3c92:	f8 94       	cli
    3c94:	de bf       	out	0x3e, r29	; 62
    3c96:	0f be       	out	0x3f, r0	; 63
    3c98:	cd bf       	out	0x3d, r28	; 61
    3c9a:	cf 91       	pop	r28
    3c9c:	df 91       	pop	r29
    3c9e:	1f 91       	pop	r17
    3ca0:	0f 91       	pop	r16
    3ca2:	08 95       	ret

00003ca4 <LCD_voidDisplayHex>:


void LCD_voidDisplayHex(uint8 u8IndexCpy,uint16 u16HexNumberCpy )
{}
    3ca4:	df 93       	push	r29
    3ca6:	cf 93       	push	r28
    3ca8:	00 d0       	rcall	.+0      	; 0x3caa <LCD_voidDisplayHex+0x6>
    3caa:	0f 92       	push	r0
    3cac:	cd b7       	in	r28, 0x3d	; 61
    3cae:	de b7       	in	r29, 0x3e	; 62
    3cb0:	89 83       	std	Y+1, r24	; 0x01
    3cb2:	7b 83       	std	Y+3, r23	; 0x03
    3cb4:	6a 83       	std	Y+2, r22	; 0x02
    3cb6:	0f 90       	pop	r0
    3cb8:	0f 90       	pop	r0
    3cba:	0f 90       	pop	r0
    3cbc:	cf 91       	pop	r28
    3cbe:	df 91       	pop	r29
    3cc0:	08 95       	ret

00003cc2 <LCD_voidMoveCourser>:
void LCD_voidMoveCourser(uint8 u8IndexCpy,uint8 u8RowCPy,uint8 u8ColmCpy)
{
    3cc2:	df 93       	push	r29
    3cc4:	cf 93       	push	r28
    3cc6:	00 d0       	rcall	.+0      	; 0x3cc8 <LCD_voidMoveCourser+0x6>
    3cc8:	00 d0       	rcall	.+0      	; 0x3cca <LCD_voidMoveCourser+0x8>
    3cca:	cd b7       	in	r28, 0x3d	; 61
    3ccc:	de b7       	in	r29, 0x3e	; 62
    3cce:	8a 83       	std	Y+2, r24	; 0x02
    3cd0:	6b 83       	std	Y+3, r22	; 0x03
    3cd2:	4c 83       	std	Y+4, r20	; 0x04
	uint8 u8commnad=0;
    3cd4:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuWritePin(lcdarr[u8IndexCpy].lcdhwconfig.u8RS,DIO_LOW);
    3cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd8:	28 2f       	mov	r18, r24
    3cda:	30 e0       	ldi	r19, 0x00	; 0
    3cdc:	c9 01       	movw	r24, r18
    3cde:	88 0f       	add	r24, r24
    3ce0:	99 1f       	adc	r25, r25
    3ce2:	82 0f       	add	r24, r18
    3ce4:	93 1f       	adc	r25, r19
    3ce6:	88 0f       	add	r24, r24
    3ce8:	99 1f       	adc	r25, r25
    3cea:	88 0f       	add	r24, r24
    3cec:	99 1f       	adc	r25, r25
    3cee:	fc 01       	movw	r30, r24
    3cf0:	ef 54       	subi	r30, 0x4F	; 79
    3cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf4:	80 81       	ld	r24, Z
    3cf6:	60 e0       	ldi	r22, 0x00	; 0
    3cf8:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>
	if(u8RowCPy == 1)
    3cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    3cfe:	81 30       	cpi	r24, 0x01	; 1
    3d00:	41 f4       	brne	.+16     	; 0x3d12 <LCD_voidMoveCourser+0x50>
	{
		u8commnad = LCD_FIRST_POS_IN_L1 + u8ColmCpy -1;
    3d02:	8c 81       	ldd	r24, Y+4	; 0x04
    3d04:	81 58       	subi	r24, 0x81	; 129
    3d06:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidSendCommand(u8IndexCpy,u8commnad);
    3d08:	8a 81       	ldd	r24, Y+2	; 0x02
    3d0a:	69 81       	ldd	r22, Y+1	; 0x01
    3d0c:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <LCD_voidSendCommand>
    3d10:	0a c0       	rjmp	.+20     	; 0x3d26 <LCD_voidMoveCourser+0x64>
	}
	else if(u8RowCPy == 2)
    3d12:	8b 81       	ldd	r24, Y+3	; 0x03
    3d14:	82 30       	cpi	r24, 0x02	; 2
    3d16:	39 f4       	brne	.+14     	; 0x3d26 <LCD_voidMoveCourser+0x64>
	{
		u8commnad = LCD_FIRST_POS_IN_L2 + u8ColmCpy -1;
    3d18:	8c 81       	ldd	r24, Y+4	; 0x04
    3d1a:	81 54       	subi	r24, 0x41	; 65
    3d1c:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidSendCommand(u8IndexCpy,u8commnad);
    3d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d20:	69 81       	ldd	r22, Y+1	; 0x01
    3d22:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <LCD_voidSendCommand>
	}
	else
	{
		/* NOTHING */
	}
}
    3d26:	0f 90       	pop	r0
    3d28:	0f 90       	pop	r0
    3d2a:	0f 90       	pop	r0
    3d2c:	0f 90       	pop	r0
    3d2e:	cf 91       	pop	r28
    3d30:	df 91       	pop	r29
    3d32:	08 95       	ret

00003d34 <KPD_voidInit>:
#include "Keypad_Private.h"



void KPD_voidInit(void)
{
    3d34:	df 93       	push	r29
    3d36:	cf 93       	push	r28
    3d38:	cd b7       	in	r28, 0x3d	; 61
    3d3a:	de b7       	in	r29, 0x3e	; 62
	DIO_enuWritePin(KPD_COL0,DIO_HIGH);
    3d3c:	8c e1       	ldi	r24, 0x1C	; 28
    3d3e:	61 e0       	ldi	r22, 0x01	; 1
    3d40:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>
	DIO_enuWritePin(KPD_COL1,DIO_HIGH);
    3d44:	8d e1       	ldi	r24, 0x1D	; 29
    3d46:	61 e0       	ldi	r22, 0x01	; 1
    3d48:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>
	DIO_enuWritePin(KPD_COL2,DIO_HIGH);
    3d4c:	8e e1       	ldi	r24, 0x1E	; 30
    3d4e:	61 e0       	ldi	r22, 0x01	; 1
    3d50:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>
	DIO_enuWritePin(KPD_COL3,DIO_HIGH);
    3d54:	8f e1       	ldi	r24, 0x1F	; 31
    3d56:	61 e0       	ldi	r22, 0x01	; 1
    3d58:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>

	DIO_enuStatePullup(KPD_ROW0,DIO_ACTIVATE_PULLUP);
    3d5c:	88 e1       	ldi	r24, 0x18	; 24
    3d5e:	61 e0       	ldi	r22, 0x01	; 1
    3d60:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_enuStatePullup>
	DIO_enuStatePullup(KPD_ROW1,DIO_ACTIVATE_PULLUP);
    3d64:	89 e1       	ldi	r24, 0x19	; 25
    3d66:	61 e0       	ldi	r22, 0x01	; 1
    3d68:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_enuStatePullup>
	DIO_enuStatePullup(KPD_ROW2,DIO_ACTIVATE_PULLUP);
    3d6c:	8a e1       	ldi	r24, 0x1A	; 26
    3d6e:	61 e0       	ldi	r22, 0x01	; 1
    3d70:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_enuStatePullup>
	DIO_enuStatePullup(KPD_ROW3,DIO_ACTIVATE_PULLUP);
    3d74:	8b e1       	ldi	r24, 0x1B	; 27
    3d76:	61 e0       	ldi	r22, 0x01	; 1
    3d78:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_enuStatePullup>

}
    3d7c:	cf 91       	pop	r28
    3d7e:	df 91       	pop	r29
    3d80:	08 95       	ret

00003d82 <KPD_u8GetPressedKey>:
uint8 KPD_u8GetPressedKey(void)
{
    3d82:	df 93       	push	r29
    3d84:	cf 93       	push	r28
    3d86:	00 d0       	rcall	.+0      	; 0x3d88 <KPD_u8GetPressedKey+0x6>
    3d88:	cd b7       	in	r28, 0x3d	; 61
    3d8a:	de b7       	in	r29, 0x3e	; 62
	static uint8 u8KpdColArr[4]={KPD_COL0,KPD_COL1,KPD_COL2,KPD_COL3};
	static uint8 u8KpdRowArr[4]={KPD_ROW0,KPD_ROW1,KPD_ROW2,KPD_ROW3};
	static uint8 u8KpdColIdx;
	static uint8 u8KpdRowIdx;
	static uint8 u8KpdPinState;
	uint8 u8KpdPressedKeyLoc=NOT_KEY_PRESSED;
    3d8c:	8f ef       	ldi	r24, 0xFF	; 255
    3d8e:	89 83       	std	Y+1, r24	; 0x01

	static uint8 au8KpdArrLoc[4][4]= KPD_PUTTONS;


	for (u8KpdColIdx=0 ;u8KpdColIdx<4 ;u8KpdColIdx++)
    3d90:	10 92 ee 00 	sts	0x00EE, r1
    3d94:	6d c0       	rjmp	.+218    	; 0x3e70 <KPD_u8GetPressedKey+0xee>
	{
		DIO_enuWritePin(u8KpdColArr[u8KpdColIdx],DIO_LOW);
    3d96:	80 91 ee 00 	lds	r24, 0x00EE
    3d9a:	88 2f       	mov	r24, r24
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	fc 01       	movw	r30, r24
    3da0:	e4 52       	subi	r30, 0x24	; 36
    3da2:	ff 4f       	sbci	r31, 0xFF	; 255
    3da4:	80 81       	ld	r24, Z
    3da6:	60 e0       	ldi	r22, 0x00	; 0
    3da8:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>


		for(u8KpdRowIdx=0;u8KpdRowIdx<4;u8KpdRowIdx++)
    3dac:	10 92 ed 00 	sts	0x00ED, r1
    3db0:	4a c0       	rjmp	.+148    	; 0x3e46 <KPD_u8GetPressedKey+0xc4>
		{
			DIO_enuReadPin(u8KpdRowArr[u8KpdRowIdx],&u8KpdPinState);
    3db2:	80 91 ed 00 	lds	r24, 0x00ED
    3db6:	88 2f       	mov	r24, r24
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	fc 01       	movw	r30, r24
    3dbc:	e8 52       	subi	r30, 0x28	; 40
    3dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc0:	80 81       	ld	r24, Z
    3dc2:	2c ee       	ldi	r18, 0xEC	; 236
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	b9 01       	movw	r22, r18
    3dc8:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_enuReadPin>
			if (u8KpdPinState==DIO_LOW)
    3dcc:	80 91 ec 00 	lds	r24, 0x00EC
    3dd0:	88 23       	and	r24, r24
    3dd2:	a1 f5       	brne	.+104    	; 0x3e3c <KPD_u8GetPressedKey+0xba>
			{
				u8KpdPressedKeyLoc=au8KpdArrLoc[u8KpdRowIdx][u8KpdColIdx];
    3dd4:	80 91 ed 00 	lds	r24, 0x00ED
    3dd8:	48 2f       	mov	r20, r24
    3dda:	50 e0       	ldi	r21, 0x00	; 0
    3ddc:	80 91 ee 00 	lds	r24, 0x00EE
    3de0:	28 2f       	mov	r18, r24
    3de2:	30 e0       	ldi	r19, 0x00	; 0
    3de4:	ca 01       	movw	r24, r20
    3de6:	88 0f       	add	r24, r24
    3de8:	99 1f       	adc	r25, r25
    3dea:	88 0f       	add	r24, r24
    3dec:	99 1f       	adc	r25, r25
    3dee:	82 0f       	add	r24, r18
    3df0:	93 1f       	adc	r25, r19
    3df2:	fc 01       	movw	r30, r24
    3df4:	e8 53       	subi	r30, 0x38	; 56
    3df6:	ff 4f       	sbci	r31, 0xFF	; 255
    3df8:	80 81       	ld	r24, Z
    3dfa:	89 83       	std	Y+1, r24	; 0x01
    3dfc:	0d c0       	rjmp	.+26     	; 0x3e18 <KPD_u8GetPressedKey+0x96>

				while(u8KpdPinState==DIO_LOW)
				{
					DIO_enuReadPin(u8KpdRowArr[u8KpdRowIdx],&u8KpdPinState);
    3dfe:	80 91 ed 00 	lds	r24, 0x00ED
    3e02:	88 2f       	mov	r24, r24
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	fc 01       	movw	r30, r24
    3e08:	e8 52       	subi	r30, 0x28	; 40
    3e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0c:	80 81       	ld	r24, Z
    3e0e:	2c ee       	ldi	r18, 0xEC	; 236
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	b9 01       	movw	r22, r18
    3e14:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_enuReadPin>
			DIO_enuReadPin(u8KpdRowArr[u8KpdRowIdx],&u8KpdPinState);
			if (u8KpdPinState==DIO_LOW)
			{
				u8KpdPressedKeyLoc=au8KpdArrLoc[u8KpdRowIdx][u8KpdColIdx];

				while(u8KpdPinState==DIO_LOW)
    3e18:	80 91 ec 00 	lds	r24, 0x00EC
    3e1c:	88 23       	and	r24, r24
    3e1e:	79 f3       	breq	.-34     	; 0x3dfe <KPD_u8GetPressedKey+0x7c>
				{
					DIO_enuReadPin(u8KpdRowArr[u8KpdRowIdx],&u8KpdPinState);
				}
				DIO_enuWritePin(u8KpdColArr[u8KpdColIdx],DIO_HIGH);
    3e20:	80 91 ee 00 	lds	r24, 0x00EE
    3e24:	88 2f       	mov	r24, r24
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	fc 01       	movw	r30, r24
    3e2a:	e4 52       	subi	r30, 0x24	; 36
    3e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2e:	80 81       	ld	r24, Z
    3e30:	61 e0       	ldi	r22, 0x01	; 1
    3e32:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>

				return u8KpdPressedKeyLoc;
    3e36:	89 81       	ldd	r24, Y+1	; 0x01
    3e38:	8a 83       	std	Y+2, r24	; 0x02
    3e3a:	21 c0       	rjmp	.+66     	; 0x3e7e <KPD_u8GetPressedKey+0xfc>
	for (u8KpdColIdx=0 ;u8KpdColIdx<4 ;u8KpdColIdx++)
	{
		DIO_enuWritePin(u8KpdColArr[u8KpdColIdx],DIO_LOW);


		for(u8KpdRowIdx=0;u8KpdRowIdx<4;u8KpdRowIdx++)
    3e3c:	80 91 ed 00 	lds	r24, 0x00ED
    3e40:	8f 5f       	subi	r24, 0xFF	; 255
    3e42:	80 93 ed 00 	sts	0x00ED, r24
    3e46:	80 91 ed 00 	lds	r24, 0x00ED
    3e4a:	84 30       	cpi	r24, 0x04	; 4
    3e4c:	08 f4       	brcc	.+2      	; 0x3e50 <KPD_u8GetPressedKey+0xce>
    3e4e:	b1 cf       	rjmp	.-158    	; 0x3db2 <KPD_u8GetPressedKey+0x30>

				return u8KpdPressedKeyLoc;
			}

		}
		DIO_enuWritePin(u8KpdColArr[u8KpdColIdx],DIO_HIGH);
    3e50:	80 91 ee 00 	lds	r24, 0x00EE
    3e54:	88 2f       	mov	r24, r24
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	fc 01       	movw	r30, r24
    3e5a:	e4 52       	subi	r30, 0x24	; 36
    3e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5e:	80 81       	ld	r24, Z
    3e60:	61 e0       	ldi	r22, 0x01	; 1
    3e62:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>
	uint8 u8KpdPressedKeyLoc=NOT_KEY_PRESSED;

	static uint8 au8KpdArrLoc[4][4]= KPD_PUTTONS;


	for (u8KpdColIdx=0 ;u8KpdColIdx<4 ;u8KpdColIdx++)
    3e66:	80 91 ee 00 	lds	r24, 0x00EE
    3e6a:	8f 5f       	subi	r24, 0xFF	; 255
    3e6c:	80 93 ee 00 	sts	0x00EE, r24
    3e70:	80 91 ee 00 	lds	r24, 0x00EE
    3e74:	84 30       	cpi	r24, 0x04	; 4
    3e76:	08 f4       	brcc	.+2      	; 0x3e7a <KPD_u8GetPressedKey+0xf8>
    3e78:	8e cf       	rjmp	.-228    	; 0x3d96 <KPD_u8GetPressedKey+0x14>

		}
		DIO_enuWritePin(u8KpdColArr[u8KpdColIdx],DIO_HIGH);

	}
	return u8KpdPressedKeyLoc;
    3e7a:	89 81       	ldd	r24, Y+1	; 0x01
    3e7c:	8a 83       	std	Y+2, r24	; 0x02
    3e7e:	8a 81       	ldd	r24, Y+2	; 0x02


}
    3e80:	0f 90       	pop	r0
    3e82:	0f 90       	pop	r0
    3e84:	cf 91       	pop	r28
    3e86:	df 91       	pop	r29
    3e88:	08 95       	ret

00003e8a <DCM_voidRotateCW>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include "../DCM/DC_Motor_Config.h"
#include "../DCM/DC_Motor_Interface.h"

void DCM_voidRotateCW(void)
{
    3e8a:	df 93       	push	r29
    3e8c:	cf 93       	push	r28
    3e8e:	cd b7       	in	r28, 0x3d	; 61
    3e90:	de b7       	in	r29, 0x3e	; 62
	DIO_enuWritePin(DCM_PIN0,DIO_LOW);
    3e92:	80 e1       	ldi	r24, 0x10	; 16
    3e94:	60 e0       	ldi	r22, 0x00	; 0
    3e96:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>
	DIO_enuWritePin(DCM_PIN1,DIO_HIGH);
    3e9a:	81 e1       	ldi	r24, 0x11	; 17
    3e9c:	61 e0       	ldi	r22, 0x01	; 1
    3e9e:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>
}
    3ea2:	cf 91       	pop	r28
    3ea4:	df 91       	pop	r29
    3ea6:	08 95       	ret

00003ea8 <DCM_voidRotateCCW>:

void DCM_voidRotateCCW(void)
{
    3ea8:	df 93       	push	r29
    3eaa:	cf 93       	push	r28
    3eac:	cd b7       	in	r28, 0x3d	; 61
    3eae:	de b7       	in	r29, 0x3e	; 62
	DIO_enuWritePin(DCM_PIN0,DIO_HIGH);
    3eb0:	80 e1       	ldi	r24, 0x10	; 16
    3eb2:	61 e0       	ldi	r22, 0x01	; 1
    3eb4:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>
	DIO_enuWritePin(DCM_PIN1,DIO_LOW);
    3eb8:	81 e1       	ldi	r24, 0x11	; 17
    3eba:	60 e0       	ldi	r22, 0x00	; 0
    3ebc:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>
}
    3ec0:	cf 91       	pop	r28
    3ec2:	df 91       	pop	r29
    3ec4:	08 95       	ret

00003ec6 <DCM_voidStop>:

void DCM_voidStop(void)
{
    3ec6:	df 93       	push	r29
    3ec8:	cf 93       	push	r28
    3eca:	cd b7       	in	r28, 0x3d	; 61
    3ecc:	de b7       	in	r29, 0x3e	; 62
	DIO_enuWritePin(DCM_PIN0,DIO_LOW);
    3ece:	80 e1       	ldi	r24, 0x10	; 16
    3ed0:	60 e0       	ldi	r22, 0x00	; 0
    3ed2:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>
	DIO_enuWritePin(DCM_PIN1,DIO_LOW);
    3ed6:	81 e1       	ldi	r24, 0x11	; 17
    3ed8:	60 e0       	ldi	r22, 0x00	; 0
    3eda:	0e 94 44 0b 	call	0x1688	; 0x1688 <DIO_enuWritePin>
}
    3ede:	cf 91       	pop	r28
    3ee0:	df 91       	pop	r29
    3ee2:	08 95       	ret

00003ee4 <main>:
#include "../MCAL/TIMER0/TIMER0_Interface.h"
#include "../MCAL/WDT/WDT_Interface.h"
#include <util/delay.h>

int main (void)
{
    3ee4:	df 93       	push	r29
    3ee6:	cf 93       	push	r28
    3ee8:	cd b7       	in	r28, 0x3d	; 61
    3eea:	de b7       	in	r29, 0x3e	; 62
    3eec:	ab 97       	sbiw	r28, 0x2b	; 43
    3eee:	0f b6       	in	r0, 0x3f	; 63
    3ef0:	f8 94       	cli
    3ef2:	de bf       	out	0x3e, r29	; 62
    3ef4:	0f be       	out	0x3f, r0	; 63
    3ef6:	cd bf       	out	0x3d, r28	; 61
	uint8 arr[9]={'\0'},u8key=0xff;
    3ef8:	89 e0       	ldi	r24, 0x09	; 9
    3efa:	fe 01       	movw	r30, r28
    3efc:	b3 96       	adiw	r30, 0x23	; 35
    3efe:	df 01       	movw	r26, r30
    3f00:	98 2f       	mov	r25, r24
    3f02:	1d 92       	st	X+, r1
    3f04:	9a 95       	dec	r25
    3f06:	e9 f7       	brne	.-6      	; 0x3f02 <main+0x1e>
    3f08:	8f ef       	ldi	r24, 0xFF	; 255
    3f0a:	8a a3       	std	Y+34, r24	; 0x22
	uint8 cursorposition=1,h=0,flag=0;
    3f0c:	81 e0       	ldi	r24, 0x01	; 1
    3f0e:	89 a3       	std	Y+33, r24	; 0x21
    3f10:	18 a2       	std	Y+32, r1	; 0x20
    3f12:	1f 8e       	std	Y+31, r1	; 0x1f
	DIO_voidInit();
    3f14:	0e 94 2d 0b 	call	0x165a	; 0x165a <DIO_voidInit>
	LCD_voidInit();
    3f18:	0e 94 3f 10 	call	0x207e	; 0x207e <LCD_voidInit>
	KPD_voidInit();
    3f1c:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <KPD_voidInit>
	LCD_voidClrScr(0);
    3f20:	80 e0       	ldi	r24, 0x00	; 0
    3f22:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <LCD_voidClrScr>
	LCD_voidSendString(0,"00:00:00");
    3f26:	20 e6       	ldi	r18, 0x60	; 96
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	80 e0       	ldi	r24, 0x00	; 0
    3f2c:	b9 01       	movw	r22, r18
    3f2e:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <LCD_voidSendString>
	LCD_voidMoveCourser(0,2,1);
    3f32:	80 e0       	ldi	r24, 0x00	; 0
    3f34:	62 e0       	ldi	r22, 0x02	; 2
    3f36:	41 e0       	ldi	r20, 0x01	; 1
    3f38:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
	LCD_voidSendString(0,"Set your time");
    3f3c:	29 e6       	ldi	r18, 0x69	; 105
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	80 e0       	ldi	r24, 0x00	; 0
    3f42:	b9 01       	movw	r22, r18
    3f44:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <LCD_voidSendString>
	LCD_voidMoveCourser(0,1,1);
    3f48:	80 e0       	ldi	r24, 0x00	; 0
    3f4a:	61 e0       	ldi	r22, 0x01	; 1
    3f4c:	41 e0       	ldi	r20, 0x01	; 1
    3f4e:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
	while(1)
	{
		u8key= KPD_u8GetPressedKey();
    3f52:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <KPD_u8GetPressedKey>
    3f56:	8a a3       	std	Y+34, r24	; 0x22
		if(u8key != 0xff && u8key != '=')
    3f58:	8a a1       	ldd	r24, Y+34	; 0x22
    3f5a:	8f 3f       	cpi	r24, 0xFF	; 255
    3f5c:	09 f4       	brne	.+2      	; 0x3f60 <main+0x7c>
    3f5e:	fa c1       	rjmp	.+1012   	; 0x4354 <main+0x470>
    3f60:	8a a1       	ldd	r24, Y+34	; 0x22
    3f62:	8d 33       	cpi	r24, 0x3D	; 61
    3f64:	09 f4       	brne	.+2      	; 0x3f68 <main+0x84>
    3f66:	f6 c1       	rjmp	.+1004   	; 0x4354 <main+0x470>
		{
			if(u8key == '6' && cursorposition != 8)
    3f68:	8a a1       	ldd	r24, Y+34	; 0x22
    3f6a:	86 33       	cpi	r24, 0x36	; 54
    3f6c:	61 f4       	brne	.+24     	; 0x3f86 <main+0xa2>
    3f6e:	89 a1       	ldd	r24, Y+33	; 0x21
    3f70:	88 30       	cpi	r24, 0x08	; 8
    3f72:	49 f0       	breq	.+18     	; 0x3f86 <main+0xa2>
			{
				cursorposition++;
    3f74:	89 a1       	ldd	r24, Y+33	; 0x21
    3f76:	8f 5f       	subi	r24, 0xFF	; 255
    3f78:	89 a3       	std	Y+33, r24	; 0x21
				LCD_voidMoveCourser(0,1,cursorposition);
    3f7a:	80 e0       	ldi	r24, 0x00	; 0
    3f7c:	61 e0       	ldi	r22, 0x01	; 1
    3f7e:	49 a1       	ldd	r20, Y+33	; 0x21
    3f80:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
    3f84:	e7 c1       	rjmp	.+974    	; 0x4354 <main+0x470>
			}
			else if(u8key == '4' && cursorposition != 1)
    3f86:	8a a1       	ldd	r24, Y+34	; 0x22
    3f88:	84 33       	cpi	r24, 0x34	; 52
    3f8a:	61 f4       	brne	.+24     	; 0x3fa4 <main+0xc0>
    3f8c:	89 a1       	ldd	r24, Y+33	; 0x21
    3f8e:	81 30       	cpi	r24, 0x01	; 1
    3f90:	49 f0       	breq	.+18     	; 0x3fa4 <main+0xc0>
			{
				cursorposition--;
    3f92:	89 a1       	ldd	r24, Y+33	; 0x21
    3f94:	81 50       	subi	r24, 0x01	; 1
    3f96:	89 a3       	std	Y+33, r24	; 0x21
				LCD_voidMoveCourser(0,1,cursorposition);
    3f98:	80 e0       	ldi	r24, 0x00	; 0
    3f9a:	61 e0       	ldi	r22, 0x01	; 1
    3f9c:	49 a1       	ldd	r20, Y+33	; 0x21
    3f9e:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
    3fa2:	d8 c1       	rjmp	.+944    	; 0x4354 <main+0x470>
			}
			else if(u8key == '8' && cursorposition != 3 && cursorposition != 6)
    3fa4:	8a a1       	ldd	r24, Y+34	; 0x22
    3fa6:	88 33       	cpi	r24, 0x38	; 56
    3fa8:	09 f0       	breq	.+2      	; 0x3fac <main+0xc8>
    3faa:	e2 c0       	rjmp	.+452    	; 0x4170 <main+0x28c>
    3fac:	89 a1       	ldd	r24, Y+33	; 0x21
    3fae:	83 30       	cpi	r24, 0x03	; 3
    3fb0:	09 f4       	brne	.+2      	; 0x3fb4 <main+0xd0>
    3fb2:	de c0       	rjmp	.+444    	; 0x4170 <main+0x28c>
    3fb4:	89 a1       	ldd	r24, Y+33	; 0x21
    3fb6:	86 30       	cpi	r24, 0x06	; 6
    3fb8:	09 f4       	brne	.+2      	; 0x3fbc <main+0xd8>
    3fba:	da c0       	rjmp	.+436    	; 0x4170 <main+0x28c>
			{
				if(arr[cursorposition] < 9)
    3fbc:	89 a1       	ldd	r24, Y+33	; 0x21
    3fbe:	28 2f       	mov	r18, r24
    3fc0:	30 e0       	ldi	r19, 0x00	; 0
    3fc2:	ce 01       	movw	r24, r28
    3fc4:	83 96       	adiw	r24, 0x23	; 35
    3fc6:	fc 01       	movw	r30, r24
    3fc8:	e2 0f       	add	r30, r18
    3fca:	f3 1f       	adc	r31, r19
    3fcc:	80 81       	ld	r24, Z
    3fce:	89 30       	cpi	r24, 0x09	; 9
    3fd0:	08 f0       	brcs	.+2      	; 0x3fd4 <main+0xf0>
    3fd2:	ad c0       	rjmp	.+346    	; 0x412e <main+0x24a>
				{
					if((arr[cursorposition] == 5 || arr[cursorposition] == 6) && (cursorposition == 1 || cursorposition == 4 || cursorposition == 7))
    3fd4:	89 a1       	ldd	r24, Y+33	; 0x21
    3fd6:	28 2f       	mov	r18, r24
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	ce 01       	movw	r24, r28
    3fdc:	83 96       	adiw	r24, 0x23	; 35
    3fde:	fc 01       	movw	r30, r24
    3fe0:	e2 0f       	add	r30, r18
    3fe2:	f3 1f       	adc	r31, r19
    3fe4:	80 81       	ld	r24, Z
    3fe6:	85 30       	cpi	r24, 0x05	; 5
    3fe8:	61 f0       	breq	.+24     	; 0x4002 <main+0x11e>
    3fea:	89 a1       	ldd	r24, Y+33	; 0x21
    3fec:	28 2f       	mov	r18, r24
    3fee:	30 e0       	ldi	r19, 0x00	; 0
    3ff0:	ce 01       	movw	r24, r28
    3ff2:	83 96       	adiw	r24, 0x23	; 35
    3ff4:	fc 01       	movw	r30, r24
    3ff6:	e2 0f       	add	r30, r18
    3ff8:	f3 1f       	adc	r31, r19
    3ffa:	80 81       	ld	r24, Z
    3ffc:	86 30       	cpi	r24, 0x06	; 6
    3ffe:	09 f0       	breq	.+2      	; 0x4002 <main+0x11e>
    4000:	6d c0       	rjmp	.+218    	; 0x40dc <main+0x1f8>
    4002:	89 a1       	ldd	r24, Y+33	; 0x21
    4004:	81 30       	cpi	r24, 0x01	; 1
    4006:	39 f0       	breq	.+14     	; 0x4016 <main+0x132>
    4008:	89 a1       	ldd	r24, Y+33	; 0x21
    400a:	84 30       	cpi	r24, 0x04	; 4
    400c:	21 f0       	breq	.+8      	; 0x4016 <main+0x132>
    400e:	89 a1       	ldd	r24, Y+33	; 0x21
    4010:	87 30       	cpi	r24, 0x07	; 7
    4012:	09 f0       	breq	.+2      	; 0x4016 <main+0x132>
    4014:	63 c0       	rjmp	.+198    	; 0x40dc <main+0x1f8>
					{
						if(arr[cursorposition] == 5 && arr[cursorposition+1] <= 0)
    4016:	89 a1       	ldd	r24, Y+33	; 0x21
    4018:	28 2f       	mov	r18, r24
    401a:	30 e0       	ldi	r19, 0x00	; 0
    401c:	ce 01       	movw	r24, r28
    401e:	83 96       	adiw	r24, 0x23	; 35
    4020:	fc 01       	movw	r30, r24
    4022:	e2 0f       	add	r30, r18
    4024:	f3 1f       	adc	r31, r19
    4026:	80 81       	ld	r24, Z
    4028:	85 30       	cpi	r24, 0x05	; 5
    402a:	b9 f5       	brne	.+110    	; 0x409a <main+0x1b6>
    402c:	89 a1       	ldd	r24, Y+33	; 0x21
    402e:	88 2f       	mov	r24, r24
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	9c 01       	movw	r18, r24
    4034:	2f 5f       	subi	r18, 0xFF	; 255
    4036:	3f 4f       	sbci	r19, 0xFF	; 255
    4038:	ce 01       	movw	r24, r28
    403a:	83 96       	adiw	r24, 0x23	; 35
    403c:	fc 01       	movw	r30, r24
    403e:	e2 0f       	add	r30, r18
    4040:	f3 1f       	adc	r31, r19
    4042:	80 81       	ld	r24, Z
    4044:	88 23       	and	r24, r24
    4046:	49 f5       	brne	.+82     	; 0x409a <main+0x1b6>
						{
							arr[cursorposition]++;
    4048:	89 a1       	ldd	r24, Y+33	; 0x21
    404a:	28 2f       	mov	r18, r24
    404c:	30 e0       	ldi	r19, 0x00	; 0
    404e:	ce 01       	movw	r24, r28
    4050:	83 96       	adiw	r24, 0x23	; 35
    4052:	fc 01       	movw	r30, r24
    4054:	e2 0f       	add	r30, r18
    4056:	f3 1f       	adc	r31, r19
    4058:	80 81       	ld	r24, Z
    405a:	48 2f       	mov	r20, r24
    405c:	4f 5f       	subi	r20, 0xFF	; 255
    405e:	ce 01       	movw	r24, r28
    4060:	83 96       	adiw	r24, 0x23	; 35
    4062:	fc 01       	movw	r30, r24
    4064:	e2 0f       	add	r30, r18
    4066:	f3 1f       	adc	r31, r19
    4068:	40 83       	st	Z, r20
							LCD_voidSendNumber(0,arr[cursorposition]);
    406a:	89 a1       	ldd	r24, Y+33	; 0x21
    406c:	28 2f       	mov	r18, r24
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	ce 01       	movw	r24, r28
    4072:	83 96       	adiw	r24, 0x23	; 35
    4074:	fc 01       	movw	r30, r24
    4076:	e2 0f       	add	r30, r18
    4078:	f3 1f       	adc	r31, r19
    407a:	80 81       	ld	r24, Z
    407c:	28 2f       	mov	r18, r24
    407e:	30 e0       	ldi	r19, 0x00	; 0
    4080:	40 e0       	ldi	r20, 0x00	; 0
    4082:	50 e0       	ldi	r21, 0x00	; 0
    4084:	80 e0       	ldi	r24, 0x00	; 0
    4086:	ba 01       	movw	r22, r20
    4088:	a9 01       	movw	r20, r18
    408a:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <LCD_voidSendNumber>
							LCD_voidMoveCourser(0,1,cursorposition);
    408e:	80 e0       	ldi	r24, 0x00	; 0
    4090:	61 e0       	ldi	r22, 0x01	; 1
    4092:	49 a1       	ldd	r20, Y+33	; 0x21
    4094:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
    4098:	5d c1       	rjmp	.+698    	; 0x4354 <main+0x470>
						}
						else
						{
							arr[cursorposition]=0;
    409a:	89 a1       	ldd	r24, Y+33	; 0x21
    409c:	28 2f       	mov	r18, r24
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	ce 01       	movw	r24, r28
    40a2:	83 96       	adiw	r24, 0x23	; 35
    40a4:	fc 01       	movw	r30, r24
    40a6:	e2 0f       	add	r30, r18
    40a8:	f3 1f       	adc	r31, r19
    40aa:	10 82       	st	Z, r1
							LCD_voidSendNumber(0,arr[cursorposition]);
    40ac:	89 a1       	ldd	r24, Y+33	; 0x21
    40ae:	28 2f       	mov	r18, r24
    40b0:	30 e0       	ldi	r19, 0x00	; 0
    40b2:	ce 01       	movw	r24, r28
    40b4:	83 96       	adiw	r24, 0x23	; 35
    40b6:	fc 01       	movw	r30, r24
    40b8:	e2 0f       	add	r30, r18
    40ba:	f3 1f       	adc	r31, r19
    40bc:	80 81       	ld	r24, Z
    40be:	28 2f       	mov	r18, r24
    40c0:	30 e0       	ldi	r19, 0x00	; 0
    40c2:	40 e0       	ldi	r20, 0x00	; 0
    40c4:	50 e0       	ldi	r21, 0x00	; 0
    40c6:	80 e0       	ldi	r24, 0x00	; 0
    40c8:	ba 01       	movw	r22, r20
    40ca:	a9 01       	movw	r20, r18
    40cc:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <LCD_voidSendNumber>
							LCD_voidMoveCourser(0,1,cursorposition);
    40d0:	80 e0       	ldi	r24, 0x00	; 0
    40d2:	61 e0       	ldi	r22, 0x01	; 1
    40d4:	49 a1       	ldd	r20, Y+33	; 0x21
    40d6:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
    40da:	3c c1       	rjmp	.+632    	; 0x4354 <main+0x470>
						}
					}
					else
					{
						arr[cursorposition]++;
    40dc:	89 a1       	ldd	r24, Y+33	; 0x21
    40de:	28 2f       	mov	r18, r24
    40e0:	30 e0       	ldi	r19, 0x00	; 0
    40e2:	ce 01       	movw	r24, r28
    40e4:	83 96       	adiw	r24, 0x23	; 35
    40e6:	fc 01       	movw	r30, r24
    40e8:	e2 0f       	add	r30, r18
    40ea:	f3 1f       	adc	r31, r19
    40ec:	80 81       	ld	r24, Z
    40ee:	48 2f       	mov	r20, r24
    40f0:	4f 5f       	subi	r20, 0xFF	; 255
    40f2:	ce 01       	movw	r24, r28
    40f4:	83 96       	adiw	r24, 0x23	; 35
    40f6:	fc 01       	movw	r30, r24
    40f8:	e2 0f       	add	r30, r18
    40fa:	f3 1f       	adc	r31, r19
    40fc:	40 83       	st	Z, r20
						LCD_voidSendNumber(0,arr[cursorposition]);
    40fe:	89 a1       	ldd	r24, Y+33	; 0x21
    4100:	28 2f       	mov	r18, r24
    4102:	30 e0       	ldi	r19, 0x00	; 0
    4104:	ce 01       	movw	r24, r28
    4106:	83 96       	adiw	r24, 0x23	; 35
    4108:	fc 01       	movw	r30, r24
    410a:	e2 0f       	add	r30, r18
    410c:	f3 1f       	adc	r31, r19
    410e:	80 81       	ld	r24, Z
    4110:	28 2f       	mov	r18, r24
    4112:	30 e0       	ldi	r19, 0x00	; 0
    4114:	40 e0       	ldi	r20, 0x00	; 0
    4116:	50 e0       	ldi	r21, 0x00	; 0
    4118:	80 e0       	ldi	r24, 0x00	; 0
    411a:	ba 01       	movw	r22, r20
    411c:	a9 01       	movw	r20, r18
    411e:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <LCD_voidSendNumber>
						LCD_voidMoveCourser(0,1,cursorposition);
    4122:	80 e0       	ldi	r24, 0x00	; 0
    4124:	61 e0       	ldi	r22, 0x01	; 1
    4126:	49 a1       	ldd	r20, Y+33	; 0x21
    4128:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
    412c:	13 c1       	rjmp	.+550    	; 0x4354 <main+0x470>
					}
				}
				else
				{
					arr[cursorposition]=0;
    412e:	89 a1       	ldd	r24, Y+33	; 0x21
    4130:	28 2f       	mov	r18, r24
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	ce 01       	movw	r24, r28
    4136:	83 96       	adiw	r24, 0x23	; 35
    4138:	fc 01       	movw	r30, r24
    413a:	e2 0f       	add	r30, r18
    413c:	f3 1f       	adc	r31, r19
    413e:	10 82       	st	Z, r1
					LCD_voidSendNumber(0,arr[cursorposition]);
    4140:	89 a1       	ldd	r24, Y+33	; 0x21
    4142:	28 2f       	mov	r18, r24
    4144:	30 e0       	ldi	r19, 0x00	; 0
    4146:	ce 01       	movw	r24, r28
    4148:	83 96       	adiw	r24, 0x23	; 35
    414a:	fc 01       	movw	r30, r24
    414c:	e2 0f       	add	r30, r18
    414e:	f3 1f       	adc	r31, r19
    4150:	80 81       	ld	r24, Z
    4152:	28 2f       	mov	r18, r24
    4154:	30 e0       	ldi	r19, 0x00	; 0
    4156:	40 e0       	ldi	r20, 0x00	; 0
    4158:	50 e0       	ldi	r21, 0x00	; 0
    415a:	80 e0       	ldi	r24, 0x00	; 0
    415c:	ba 01       	movw	r22, r20
    415e:	a9 01       	movw	r20, r18
    4160:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <LCD_voidSendNumber>
					LCD_voidMoveCourser(0,1,cursorposition);
    4164:	80 e0       	ldi	r24, 0x00	; 0
    4166:	61 e0       	ldi	r22, 0x01	; 1
    4168:	49 a1       	ldd	r20, Y+33	; 0x21
    416a:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
    416e:	f2 c0       	rjmp	.+484    	; 0x4354 <main+0x470>
				}
			}
			else if(u8key == '2' && cursorposition != 3 && cursorposition != 6)
    4170:	8a a1       	ldd	r24, Y+34	; 0x22
    4172:	82 33       	cpi	r24, 0x32	; 50
    4174:	09 f0       	breq	.+2      	; 0x4178 <main+0x294>
    4176:	bb c0       	rjmp	.+374    	; 0x42ee <main+0x40a>
    4178:	89 a1       	ldd	r24, Y+33	; 0x21
    417a:	83 30       	cpi	r24, 0x03	; 3
    417c:	09 f4       	brne	.+2      	; 0x4180 <main+0x29c>
    417e:	b7 c0       	rjmp	.+366    	; 0x42ee <main+0x40a>
    4180:	89 a1       	ldd	r24, Y+33	; 0x21
    4182:	86 30       	cpi	r24, 0x06	; 6
    4184:	09 f4       	brne	.+2      	; 0x4188 <main+0x2a4>
    4186:	b3 c0       	rjmp	.+358    	; 0x42ee <main+0x40a>
			{
				if(arr[cursorposition] == 0)
    4188:	89 a1       	ldd	r24, Y+33	; 0x21
    418a:	28 2f       	mov	r18, r24
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	ce 01       	movw	r24, r28
    4190:	83 96       	adiw	r24, 0x23	; 35
    4192:	fc 01       	movw	r30, r24
    4194:	e2 0f       	add	r30, r18
    4196:	f3 1f       	adc	r31, r19
    4198:	80 81       	ld	r24, Z
    419a:	88 23       	and	r24, r24
    419c:	09 f0       	breq	.+2      	; 0x41a0 <main+0x2bc>
    419e:	7e c0       	rjmp	.+252    	; 0x429c <main+0x3b8>
				{
					if(cursorposition == 1 || cursorposition == 4 || cursorposition == 7)
    41a0:	89 a1       	ldd	r24, Y+33	; 0x21
    41a2:	81 30       	cpi	r24, 0x01	; 1
    41a4:	39 f0       	breq	.+14     	; 0x41b4 <main+0x2d0>
    41a6:	89 a1       	ldd	r24, Y+33	; 0x21
    41a8:	84 30       	cpi	r24, 0x04	; 4
    41aa:	21 f0       	breq	.+8      	; 0x41b4 <main+0x2d0>
    41ac:	89 a1       	ldd	r24, Y+33	; 0x21
    41ae:	87 30       	cpi	r24, 0x07	; 7
    41b0:	09 f0       	breq	.+2      	; 0x41b4 <main+0x2d0>
    41b2:	52 c0       	rjmp	.+164    	; 0x4258 <main+0x374>
					{
						if(arr[cursorposition+1] == 0)
    41b4:	89 a1       	ldd	r24, Y+33	; 0x21
    41b6:	88 2f       	mov	r24, r24
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	9c 01       	movw	r18, r24
    41bc:	2f 5f       	subi	r18, 0xFF	; 255
    41be:	3f 4f       	sbci	r19, 0xFF	; 255
    41c0:	ce 01       	movw	r24, r28
    41c2:	83 96       	adiw	r24, 0x23	; 35
    41c4:	fc 01       	movw	r30, r24
    41c6:	e2 0f       	add	r30, r18
    41c8:	f3 1f       	adc	r31, r19
    41ca:	80 81       	ld	r24, Z
    41cc:	88 23       	and	r24, r24
    41ce:	11 f5       	brne	.+68     	; 0x4214 <main+0x330>
						{
							arr[cursorposition]=6;
    41d0:	89 a1       	ldd	r24, Y+33	; 0x21
    41d2:	28 2f       	mov	r18, r24
    41d4:	30 e0       	ldi	r19, 0x00	; 0
    41d6:	ce 01       	movw	r24, r28
    41d8:	83 96       	adiw	r24, 0x23	; 35
    41da:	fc 01       	movw	r30, r24
    41dc:	e2 0f       	add	r30, r18
    41de:	f3 1f       	adc	r31, r19
    41e0:	86 e0       	ldi	r24, 0x06	; 6
    41e2:	80 83       	st	Z, r24
							LCD_voidSendNumber(0,arr[cursorposition]);
    41e4:	89 a1       	ldd	r24, Y+33	; 0x21
    41e6:	28 2f       	mov	r18, r24
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	ce 01       	movw	r24, r28
    41ec:	83 96       	adiw	r24, 0x23	; 35
    41ee:	fc 01       	movw	r30, r24
    41f0:	e2 0f       	add	r30, r18
    41f2:	f3 1f       	adc	r31, r19
    41f4:	80 81       	ld	r24, Z
    41f6:	28 2f       	mov	r18, r24
    41f8:	30 e0       	ldi	r19, 0x00	; 0
    41fa:	40 e0       	ldi	r20, 0x00	; 0
    41fc:	50 e0       	ldi	r21, 0x00	; 0
    41fe:	80 e0       	ldi	r24, 0x00	; 0
    4200:	ba 01       	movw	r22, r20
    4202:	a9 01       	movw	r20, r18
    4204:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <LCD_voidSendNumber>
							LCD_voidMoveCourser(0,1,cursorposition);
    4208:	80 e0       	ldi	r24, 0x00	; 0
    420a:	61 e0       	ldi	r22, 0x01	; 1
    420c:	49 a1       	ldd	r20, Y+33	; 0x21
    420e:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
    4212:	a0 c0       	rjmp	.+320    	; 0x4354 <main+0x470>
						}
						else
						{
							arr[cursorposition]=5;
    4214:	89 a1       	ldd	r24, Y+33	; 0x21
    4216:	28 2f       	mov	r18, r24
    4218:	30 e0       	ldi	r19, 0x00	; 0
    421a:	ce 01       	movw	r24, r28
    421c:	83 96       	adiw	r24, 0x23	; 35
    421e:	fc 01       	movw	r30, r24
    4220:	e2 0f       	add	r30, r18
    4222:	f3 1f       	adc	r31, r19
    4224:	85 e0       	ldi	r24, 0x05	; 5
    4226:	80 83       	st	Z, r24
							LCD_voidSendNumber(0,arr[cursorposition]);
    4228:	89 a1       	ldd	r24, Y+33	; 0x21
    422a:	28 2f       	mov	r18, r24
    422c:	30 e0       	ldi	r19, 0x00	; 0
    422e:	ce 01       	movw	r24, r28
    4230:	83 96       	adiw	r24, 0x23	; 35
    4232:	fc 01       	movw	r30, r24
    4234:	e2 0f       	add	r30, r18
    4236:	f3 1f       	adc	r31, r19
    4238:	80 81       	ld	r24, Z
    423a:	28 2f       	mov	r18, r24
    423c:	30 e0       	ldi	r19, 0x00	; 0
    423e:	40 e0       	ldi	r20, 0x00	; 0
    4240:	50 e0       	ldi	r21, 0x00	; 0
    4242:	80 e0       	ldi	r24, 0x00	; 0
    4244:	ba 01       	movw	r22, r20
    4246:	a9 01       	movw	r20, r18
    4248:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <LCD_voidSendNumber>
							LCD_voidMoveCourser(0,1,cursorposition);
    424c:	80 e0       	ldi	r24, 0x00	; 0
    424e:	61 e0       	ldi	r22, 0x01	; 1
    4250:	49 a1       	ldd	r20, Y+33	; 0x21
    4252:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
    4256:	7e c0       	rjmp	.+252    	; 0x4354 <main+0x470>
						}
					}
					else
					{
						arr[cursorposition]=9;
    4258:	89 a1       	ldd	r24, Y+33	; 0x21
    425a:	28 2f       	mov	r18, r24
    425c:	30 e0       	ldi	r19, 0x00	; 0
    425e:	ce 01       	movw	r24, r28
    4260:	83 96       	adiw	r24, 0x23	; 35
    4262:	fc 01       	movw	r30, r24
    4264:	e2 0f       	add	r30, r18
    4266:	f3 1f       	adc	r31, r19
    4268:	89 e0       	ldi	r24, 0x09	; 9
    426a:	80 83       	st	Z, r24
						LCD_voidSendNumber(0,arr[cursorposition]);
    426c:	89 a1       	ldd	r24, Y+33	; 0x21
    426e:	28 2f       	mov	r18, r24
    4270:	30 e0       	ldi	r19, 0x00	; 0
    4272:	ce 01       	movw	r24, r28
    4274:	83 96       	adiw	r24, 0x23	; 35
    4276:	fc 01       	movw	r30, r24
    4278:	e2 0f       	add	r30, r18
    427a:	f3 1f       	adc	r31, r19
    427c:	80 81       	ld	r24, Z
    427e:	28 2f       	mov	r18, r24
    4280:	30 e0       	ldi	r19, 0x00	; 0
    4282:	40 e0       	ldi	r20, 0x00	; 0
    4284:	50 e0       	ldi	r21, 0x00	; 0
    4286:	80 e0       	ldi	r24, 0x00	; 0
    4288:	ba 01       	movw	r22, r20
    428a:	a9 01       	movw	r20, r18
    428c:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <LCD_voidSendNumber>
						LCD_voidMoveCourser(0,1,cursorposition);
    4290:	80 e0       	ldi	r24, 0x00	; 0
    4292:	61 e0       	ldi	r22, 0x01	; 1
    4294:	49 a1       	ldd	r20, Y+33	; 0x21
    4296:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
    429a:	5c c0       	rjmp	.+184    	; 0x4354 <main+0x470>
					}
				}
				else
				{
					arr[cursorposition]--;
    429c:	89 a1       	ldd	r24, Y+33	; 0x21
    429e:	28 2f       	mov	r18, r24
    42a0:	30 e0       	ldi	r19, 0x00	; 0
    42a2:	ce 01       	movw	r24, r28
    42a4:	83 96       	adiw	r24, 0x23	; 35
    42a6:	fc 01       	movw	r30, r24
    42a8:	e2 0f       	add	r30, r18
    42aa:	f3 1f       	adc	r31, r19
    42ac:	80 81       	ld	r24, Z
    42ae:	48 2f       	mov	r20, r24
    42b0:	41 50       	subi	r20, 0x01	; 1
    42b2:	ce 01       	movw	r24, r28
    42b4:	83 96       	adiw	r24, 0x23	; 35
    42b6:	fc 01       	movw	r30, r24
    42b8:	e2 0f       	add	r30, r18
    42ba:	f3 1f       	adc	r31, r19
    42bc:	40 83       	st	Z, r20
					LCD_voidSendNumber(0,arr[cursorposition]);
    42be:	89 a1       	ldd	r24, Y+33	; 0x21
    42c0:	28 2f       	mov	r18, r24
    42c2:	30 e0       	ldi	r19, 0x00	; 0
    42c4:	ce 01       	movw	r24, r28
    42c6:	83 96       	adiw	r24, 0x23	; 35
    42c8:	fc 01       	movw	r30, r24
    42ca:	e2 0f       	add	r30, r18
    42cc:	f3 1f       	adc	r31, r19
    42ce:	80 81       	ld	r24, Z
    42d0:	28 2f       	mov	r18, r24
    42d2:	30 e0       	ldi	r19, 0x00	; 0
    42d4:	40 e0       	ldi	r20, 0x00	; 0
    42d6:	50 e0       	ldi	r21, 0x00	; 0
    42d8:	80 e0       	ldi	r24, 0x00	; 0
    42da:	ba 01       	movw	r22, r20
    42dc:	a9 01       	movw	r20, r18
    42de:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <LCD_voidSendNumber>
					LCD_voidMoveCourser(0,1,cursorposition);
    42e2:	80 e0       	ldi	r24, 0x00	; 0
    42e4:	61 e0       	ldi	r22, 0x01	; 1
    42e6:	49 a1       	ldd	r20, Y+33	; 0x21
    42e8:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
    42ec:	33 c0       	rjmp	.+102    	; 0x4354 <main+0x470>
				}
			}
			else if(u8key == 'c')
    42ee:	8a a1       	ldd	r24, Y+34	; 0x22
    42f0:	83 36       	cpi	r24, 0x63	; 99
    42f2:	81 f5       	brne	.+96     	; 0x4354 <main+0x470>
			{
				LCD_voidClrScr(0);
    42f4:	80 e0       	ldi	r24, 0x00	; 0
    42f6:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <LCD_voidClrScr>
				LCD_voidSendString(0,"00:00:00");
    42fa:	20 e6       	ldi	r18, 0x60	; 96
    42fc:	30 e0       	ldi	r19, 0x00	; 0
    42fe:	80 e0       	ldi	r24, 0x00	; 0
    4300:	b9 01       	movw	r22, r18
    4302:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <LCD_voidSendString>
				LCD_voidMoveCourser(0,2,1);
    4306:	80 e0       	ldi	r24, 0x00	; 0
    4308:	62 e0       	ldi	r22, 0x02	; 2
    430a:	41 e0       	ldi	r20, 0x01	; 1
    430c:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
				LCD_voidSendString(0,"Set your time");
    4310:	29 e6       	ldi	r18, 0x69	; 105
    4312:	30 e0       	ldi	r19, 0x00	; 0
    4314:	80 e0       	ldi	r24, 0x00	; 0
    4316:	b9 01       	movw	r22, r18
    4318:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <LCD_voidSendString>
				LCD_voidMoveCourser(0,1,1);
    431c:	80 e0       	ldi	r24, 0x00	; 0
    431e:	61 e0       	ldi	r22, 0x01	; 1
    4320:	41 e0       	ldi	r20, 0x01	; 1
    4322:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
				cursorposition=1;
    4326:	81 e0       	ldi	r24, 0x01	; 1
    4328:	89 a3       	std	Y+33, r24	; 0x21
				for(int i=0;i<8;i++)
    432a:	1e 8e       	std	Y+30, r1	; 0x1e
    432c:	1d 8e       	std	Y+29, r1	; 0x1d
    432e:	0d c0       	rjmp	.+26     	; 0x434a <main+0x466>
				{
					arr[i]=0;
    4330:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4332:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4334:	ce 01       	movw	r24, r28
    4336:	83 96       	adiw	r24, 0x23	; 35
    4338:	fc 01       	movw	r30, r24
    433a:	e2 0f       	add	r30, r18
    433c:	f3 1f       	adc	r31, r19
    433e:	10 82       	st	Z, r1
				LCD_voidSendString(0,"00:00:00");
				LCD_voidMoveCourser(0,2,1);
				LCD_voidSendString(0,"Set your time");
				LCD_voidMoveCourser(0,1,1);
				cursorposition=1;
				for(int i=0;i<8;i++)
    4340:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4342:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4344:	01 96       	adiw	r24, 0x01	; 1
    4346:	9e 8f       	std	Y+30, r25	; 0x1e
    4348:	8d 8f       	std	Y+29, r24	; 0x1d
    434a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    434c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    434e:	88 30       	cpi	r24, 0x08	; 8
    4350:	91 05       	cpc	r25, r1
    4352:	74 f3       	brlt	.-36     	; 0x4330 <main+0x44c>
				{
					arr[i]=0;
				}
			}
		}
		if(u8key == '=')
    4354:	8a a1       	ldd	r24, Y+34	; 0x22
    4356:	8d 33       	cpi	r24, 0x3D	; 61
    4358:	09 f0       	breq	.+2      	; 0x435c <main+0x478>
    435a:	fb cd       	rjmp	.-1034   	; 0x3f52 <main+0x6e>
		{
			LCD_voidMoveCourser(0,2,1);
    435c:	80 e0       	ldi	r24, 0x00	; 0
    435e:	62 e0       	ldi	r22, 0x02	; 2
    4360:	41 e0       	ldi	r20, 0x01	; 1
    4362:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
			LCD_voidSendString(0,"                ");
    4366:	27 e7       	ldi	r18, 0x77	; 119
    4368:	30 e0       	ldi	r19, 0x00	; 0
    436a:	80 e0       	ldi	r24, 0x00	; 0
    436c:	b9 01       	movw	r22, r18
    436e:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <LCD_voidSendString>
    4372:	ae c1       	rjmp	.+860    	; 0x46d0 <main+0x7ec>
			while(arr[8]!=0 || arr[7]!=0 || arr[5]!=0 || arr[4]!=0 || arr[2]!=0 || arr[1]!=0)
			{
				if(flag == 0)
    4374:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4376:	88 23       	and	r24, r24
    4378:	09 f0       	breq	.+2      	; 0x437c <main+0x498>
    437a:	0c c1       	rjmp	.+536    	; 0x4594 <main+0x6b0>
				{
					do
					{
						LCD_voidMoveCourser(0,1,8);
    437c:	80 e0       	ldi	r24, 0x00	; 0
    437e:	61 e0       	ldi	r22, 0x01	; 1
    4380:	48 e0       	ldi	r20, 0x08	; 8
    4382:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
						LCD_voidSendNumber(0,arr[8]);
    4386:	8b a5       	ldd	r24, Y+43	; 0x2b
    4388:	28 2f       	mov	r18, r24
    438a:	30 e0       	ldi	r19, 0x00	; 0
    438c:	40 e0       	ldi	r20, 0x00	; 0
    438e:	50 e0       	ldi	r21, 0x00	; 0
    4390:	80 e0       	ldi	r24, 0x00	; 0
    4392:	ba 01       	movw	r22, r20
    4394:	a9 01       	movw	r20, r18
    4396:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <LCD_voidSendNumber>
    439a:	80 e0       	ldi	r24, 0x00	; 0
    439c:	90 e0       	ldi	r25, 0x00	; 0
    439e:	aa e7       	ldi	r26, 0x7A	; 122
    43a0:	b4 e4       	ldi	r27, 0x44	; 68
    43a2:	89 8f       	std	Y+25, r24	; 0x19
    43a4:	9a 8f       	std	Y+26, r25	; 0x1a
    43a6:	ab 8f       	std	Y+27, r26	; 0x1b
    43a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43aa:	69 8d       	ldd	r22, Y+25	; 0x19
    43ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43b2:	20 e0       	ldi	r18, 0x00	; 0
    43b4:	30 e0       	ldi	r19, 0x00	; 0
    43b6:	4a ef       	ldi	r20, 0xFA	; 250
    43b8:	54 e4       	ldi	r21, 0x44	; 68
    43ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43be:	dc 01       	movw	r26, r24
    43c0:	cb 01       	movw	r24, r22
    43c2:	8d 8b       	std	Y+21, r24	; 0x15
    43c4:	9e 8b       	std	Y+22, r25	; 0x16
    43c6:	af 8b       	std	Y+23, r26	; 0x17
    43c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    43ca:	6d 89       	ldd	r22, Y+21	; 0x15
    43cc:	7e 89       	ldd	r23, Y+22	; 0x16
    43ce:	8f 89       	ldd	r24, Y+23	; 0x17
    43d0:	98 8d       	ldd	r25, Y+24	; 0x18
    43d2:	20 e0       	ldi	r18, 0x00	; 0
    43d4:	30 e0       	ldi	r19, 0x00	; 0
    43d6:	40 e8       	ldi	r20, 0x80	; 128
    43d8:	5f e3       	ldi	r21, 0x3F	; 63
    43da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43de:	88 23       	and	r24, r24
    43e0:	2c f4       	brge	.+10     	; 0x43ec <main+0x508>
		__ticks = 1;
    43e2:	81 e0       	ldi	r24, 0x01	; 1
    43e4:	90 e0       	ldi	r25, 0x00	; 0
    43e6:	9c 8b       	std	Y+20, r25	; 0x14
    43e8:	8b 8b       	std	Y+19, r24	; 0x13
    43ea:	3f c0       	rjmp	.+126    	; 0x446a <main+0x586>
	else if (__tmp > 65535)
    43ec:	6d 89       	ldd	r22, Y+21	; 0x15
    43ee:	7e 89       	ldd	r23, Y+22	; 0x16
    43f0:	8f 89       	ldd	r24, Y+23	; 0x17
    43f2:	98 8d       	ldd	r25, Y+24	; 0x18
    43f4:	20 e0       	ldi	r18, 0x00	; 0
    43f6:	3f ef       	ldi	r19, 0xFF	; 255
    43f8:	4f e7       	ldi	r20, 0x7F	; 127
    43fa:	57 e4       	ldi	r21, 0x47	; 71
    43fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4400:	18 16       	cp	r1, r24
    4402:	4c f5       	brge	.+82     	; 0x4456 <main+0x572>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4404:	69 8d       	ldd	r22, Y+25	; 0x19
    4406:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4408:	8b 8d       	ldd	r24, Y+27	; 0x1b
    440a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    440c:	20 e0       	ldi	r18, 0x00	; 0
    440e:	30 e0       	ldi	r19, 0x00	; 0
    4410:	40 e2       	ldi	r20, 0x20	; 32
    4412:	51 e4       	ldi	r21, 0x41	; 65
    4414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4418:	dc 01       	movw	r26, r24
    441a:	cb 01       	movw	r24, r22
    441c:	bc 01       	movw	r22, r24
    441e:	cd 01       	movw	r24, r26
    4420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4424:	dc 01       	movw	r26, r24
    4426:	cb 01       	movw	r24, r22
    4428:	9c 8b       	std	Y+20, r25	; 0x14
    442a:	8b 8b       	std	Y+19, r24	; 0x13
    442c:	0f c0       	rjmp	.+30     	; 0x444c <main+0x568>
    442e:	88 ec       	ldi	r24, 0xC8	; 200
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	9a 8b       	std	Y+18, r25	; 0x12
    4434:	89 8b       	std	Y+17, r24	; 0x11
    4436:	89 89       	ldd	r24, Y+17	; 0x11
    4438:	9a 89       	ldd	r25, Y+18	; 0x12
    443a:	01 97       	sbiw	r24, 0x01	; 1
    443c:	f1 f7       	brne	.-4      	; 0x443a <main+0x556>
    443e:	9a 8b       	std	Y+18, r25	; 0x12
    4440:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4442:	8b 89       	ldd	r24, Y+19	; 0x13
    4444:	9c 89       	ldd	r25, Y+20	; 0x14
    4446:	01 97       	sbiw	r24, 0x01	; 1
    4448:	9c 8b       	std	Y+20, r25	; 0x14
    444a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    444c:	8b 89       	ldd	r24, Y+19	; 0x13
    444e:	9c 89       	ldd	r25, Y+20	; 0x14
    4450:	00 97       	sbiw	r24, 0x00	; 0
    4452:	69 f7       	brne	.-38     	; 0x442e <main+0x54a>
    4454:	14 c0       	rjmp	.+40     	; 0x447e <main+0x59a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4456:	6d 89       	ldd	r22, Y+21	; 0x15
    4458:	7e 89       	ldd	r23, Y+22	; 0x16
    445a:	8f 89       	ldd	r24, Y+23	; 0x17
    445c:	98 8d       	ldd	r25, Y+24	; 0x18
    445e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4462:	dc 01       	movw	r26, r24
    4464:	cb 01       	movw	r24, r22
    4466:	9c 8b       	std	Y+20, r25	; 0x14
    4468:	8b 8b       	std	Y+19, r24	; 0x13
    446a:	8b 89       	ldd	r24, Y+19	; 0x13
    446c:	9c 89       	ldd	r25, Y+20	; 0x14
    446e:	98 8b       	std	Y+16, r25	; 0x10
    4470:	8f 87       	std	Y+15, r24	; 0x0f
    4472:	8f 85       	ldd	r24, Y+15	; 0x0f
    4474:	98 89       	ldd	r25, Y+16	; 0x10
    4476:	01 97       	sbiw	r24, 0x01	; 1
    4478:	f1 f7       	brne	.-4      	; 0x4476 <main+0x592>
    447a:	98 8b       	std	Y+16, r25	; 0x10
    447c:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(1000);
						arr[8]--;
    447e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4480:	81 50       	subi	r24, 0x01	; 1
    4482:	8b a7       	std	Y+43, r24	; 0x2b
					}while(arr[8]!=0);
    4484:	8b a5       	ldd	r24, Y+43	; 0x2b
    4486:	88 23       	and	r24, r24
    4488:	09 f0       	breq	.+2      	; 0x448c <main+0x5a8>
    448a:	78 cf       	rjmp	.-272    	; 0x437c <main+0x498>
					LCD_voidMoveCourser(0,1,8);
    448c:	80 e0       	ldi	r24, 0x00	; 0
    448e:	61 e0       	ldi	r22, 0x01	; 1
    4490:	48 e0       	ldi	r20, 0x08	; 8
    4492:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
					LCD_voidSendNumber(0,arr[8]);
    4496:	8b a5       	ldd	r24, Y+43	; 0x2b
    4498:	28 2f       	mov	r18, r24
    449a:	30 e0       	ldi	r19, 0x00	; 0
    449c:	40 e0       	ldi	r20, 0x00	; 0
    449e:	50 e0       	ldi	r21, 0x00	; 0
    44a0:	80 e0       	ldi	r24, 0x00	; 0
    44a2:	ba 01       	movw	r22, r20
    44a4:	a9 01       	movw	r20, r18
    44a6:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <LCD_voidSendNumber>
    44aa:	80 e0       	ldi	r24, 0x00	; 0
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	aa e7       	ldi	r26, 0x7A	; 122
    44b0:	b4 e4       	ldi	r27, 0x44	; 68
    44b2:	8b 87       	std	Y+11, r24	; 0x0b
    44b4:	9c 87       	std	Y+12, r25	; 0x0c
    44b6:	ad 87       	std	Y+13, r26	; 0x0d
    44b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    44bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    44be:	8d 85       	ldd	r24, Y+13	; 0x0d
    44c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    44c2:	20 e0       	ldi	r18, 0x00	; 0
    44c4:	30 e0       	ldi	r19, 0x00	; 0
    44c6:	4a ef       	ldi	r20, 0xFA	; 250
    44c8:	54 e4       	ldi	r21, 0x44	; 68
    44ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44ce:	dc 01       	movw	r26, r24
    44d0:	cb 01       	movw	r24, r22
    44d2:	8f 83       	std	Y+7, r24	; 0x07
    44d4:	98 87       	std	Y+8, r25	; 0x08
    44d6:	a9 87       	std	Y+9, r26	; 0x09
    44d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44da:	6f 81       	ldd	r22, Y+7	; 0x07
    44dc:	78 85       	ldd	r23, Y+8	; 0x08
    44de:	89 85       	ldd	r24, Y+9	; 0x09
    44e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    44e2:	20 e0       	ldi	r18, 0x00	; 0
    44e4:	30 e0       	ldi	r19, 0x00	; 0
    44e6:	40 e8       	ldi	r20, 0x80	; 128
    44e8:	5f e3       	ldi	r21, 0x3F	; 63
    44ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44ee:	88 23       	and	r24, r24
    44f0:	2c f4       	brge	.+10     	; 0x44fc <main+0x618>
		__ticks = 1;
    44f2:	81 e0       	ldi	r24, 0x01	; 1
    44f4:	90 e0       	ldi	r25, 0x00	; 0
    44f6:	9e 83       	std	Y+6, r25	; 0x06
    44f8:	8d 83       	std	Y+5, r24	; 0x05
    44fa:	3f c0       	rjmp	.+126    	; 0x457a <main+0x696>
	else if (__tmp > 65535)
    44fc:	6f 81       	ldd	r22, Y+7	; 0x07
    44fe:	78 85       	ldd	r23, Y+8	; 0x08
    4500:	89 85       	ldd	r24, Y+9	; 0x09
    4502:	9a 85       	ldd	r25, Y+10	; 0x0a
    4504:	20 e0       	ldi	r18, 0x00	; 0
    4506:	3f ef       	ldi	r19, 0xFF	; 255
    4508:	4f e7       	ldi	r20, 0x7F	; 127
    450a:	57 e4       	ldi	r21, 0x47	; 71
    450c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4510:	18 16       	cp	r1, r24
    4512:	4c f5       	brge	.+82     	; 0x4566 <main+0x682>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4514:	6b 85       	ldd	r22, Y+11	; 0x0b
    4516:	7c 85       	ldd	r23, Y+12	; 0x0c
    4518:	8d 85       	ldd	r24, Y+13	; 0x0d
    451a:	9e 85       	ldd	r25, Y+14	; 0x0e
    451c:	20 e0       	ldi	r18, 0x00	; 0
    451e:	30 e0       	ldi	r19, 0x00	; 0
    4520:	40 e2       	ldi	r20, 0x20	; 32
    4522:	51 e4       	ldi	r21, 0x41	; 65
    4524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4528:	dc 01       	movw	r26, r24
    452a:	cb 01       	movw	r24, r22
    452c:	bc 01       	movw	r22, r24
    452e:	cd 01       	movw	r24, r26
    4530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4534:	dc 01       	movw	r26, r24
    4536:	cb 01       	movw	r24, r22
    4538:	9e 83       	std	Y+6, r25	; 0x06
    453a:	8d 83       	std	Y+5, r24	; 0x05
    453c:	0f c0       	rjmp	.+30     	; 0x455c <main+0x678>
    453e:	88 ec       	ldi	r24, 0xC8	; 200
    4540:	90 e0       	ldi	r25, 0x00	; 0
    4542:	9c 83       	std	Y+4, r25	; 0x04
    4544:	8b 83       	std	Y+3, r24	; 0x03
    4546:	8b 81       	ldd	r24, Y+3	; 0x03
    4548:	9c 81       	ldd	r25, Y+4	; 0x04
    454a:	01 97       	sbiw	r24, 0x01	; 1
    454c:	f1 f7       	brne	.-4      	; 0x454a <main+0x666>
    454e:	9c 83       	std	Y+4, r25	; 0x04
    4550:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4552:	8d 81       	ldd	r24, Y+5	; 0x05
    4554:	9e 81       	ldd	r25, Y+6	; 0x06
    4556:	01 97       	sbiw	r24, 0x01	; 1
    4558:	9e 83       	std	Y+6, r25	; 0x06
    455a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    455c:	8d 81       	ldd	r24, Y+5	; 0x05
    455e:	9e 81       	ldd	r25, Y+6	; 0x06
    4560:	00 97       	sbiw	r24, 0x00	; 0
    4562:	69 f7       	brne	.-38     	; 0x453e <main+0x65a>
    4564:	14 c0       	rjmp	.+40     	; 0x458e <main+0x6aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4566:	6f 81       	ldd	r22, Y+7	; 0x07
    4568:	78 85       	ldd	r23, Y+8	; 0x08
    456a:	89 85       	ldd	r24, Y+9	; 0x09
    456c:	9a 85       	ldd	r25, Y+10	; 0x0a
    456e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4572:	dc 01       	movw	r26, r24
    4574:	cb 01       	movw	r24, r22
    4576:	9e 83       	std	Y+6, r25	; 0x06
    4578:	8d 83       	std	Y+5, r24	; 0x05
    457a:	8d 81       	ldd	r24, Y+5	; 0x05
    457c:	9e 81       	ldd	r25, Y+6	; 0x06
    457e:	9a 83       	std	Y+2, r25	; 0x02
    4580:	89 83       	std	Y+1, r24	; 0x01
    4582:	89 81       	ldd	r24, Y+1	; 0x01
    4584:	9a 81       	ldd	r25, Y+2	; 0x02
    4586:	01 97       	sbiw	r24, 0x01	; 1
    4588:	f1 f7       	brne	.-4      	; 0x4586 <main+0x6a2>
    458a:	9a 83       	std	Y+2, r25	; 0x02
    458c:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1000);
					flag=1;
    458e:	81 e0       	ldi	r24, 0x01	; 1
    4590:	8f 8f       	std	Y+31, r24	; 0x1f
    4592:	9e c0       	rjmp	.+316    	; 0x46d0 <main+0x7ec>
				}
				else if(flag==1)
    4594:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4596:	81 30       	cpi	r24, 0x01	; 1
    4598:	e1 f4       	brne	.+56     	; 0x45d2 <main+0x6ee>
				{
					if(arr[7]!=0)
    459a:	8a a5       	ldd	r24, Y+42	; 0x2a
    459c:	88 23       	and	r24, r24
    459e:	b1 f0       	breq	.+44     	; 0x45cc <main+0x6e8>
					{
						arr[7]--;
    45a0:	8a a5       	ldd	r24, Y+42	; 0x2a
    45a2:	81 50       	subi	r24, 0x01	; 1
    45a4:	8a a7       	std	Y+42, r24	; 0x2a
						LCD_voidMoveCourser(0,1,7);
    45a6:	80 e0       	ldi	r24, 0x00	; 0
    45a8:	61 e0       	ldi	r22, 0x01	; 1
    45aa:	47 e0       	ldi	r20, 0x07	; 7
    45ac:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
						LCD_voidSendNumber(0,arr[7]);
    45b0:	8a a5       	ldd	r24, Y+42	; 0x2a
    45b2:	28 2f       	mov	r18, r24
    45b4:	30 e0       	ldi	r19, 0x00	; 0
    45b6:	40 e0       	ldi	r20, 0x00	; 0
    45b8:	50 e0       	ldi	r21, 0x00	; 0
    45ba:	80 e0       	ldi	r24, 0x00	; 0
    45bc:	ba 01       	movw	r22, r20
    45be:	a9 01       	movw	r20, r18
    45c0:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <LCD_voidSendNumber>
						arr[8]=9;
    45c4:	89 e0       	ldi	r24, 0x09	; 9
    45c6:	8b a7       	std	Y+43, r24	; 0x2b
						flag=0;
    45c8:	1f 8e       	std	Y+31, r1	; 0x1f
    45ca:	82 c0       	rjmp	.+260    	; 0x46d0 <main+0x7ec>
					}
					else
					{
						flag=2;
    45cc:	82 e0       	ldi	r24, 0x02	; 2
    45ce:	8f 8f       	std	Y+31, r24	; 0x1f
    45d0:	7f c0       	rjmp	.+254    	; 0x46d0 <main+0x7ec>
					}
				}
				else if(flag==2)
    45d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    45d4:	82 30       	cpi	r24, 0x02	; 2
    45d6:	e9 f4       	brne	.+58     	; 0x4612 <main+0x72e>
				{
					if(arr[5]!=0)
    45d8:	88 a5       	ldd	r24, Y+40	; 0x28
    45da:	88 23       	and	r24, r24
    45dc:	b9 f0       	breq	.+46     	; 0x460c <main+0x728>
					{
						arr[5]--;
    45de:	88 a5       	ldd	r24, Y+40	; 0x28
    45e0:	81 50       	subi	r24, 0x01	; 1
    45e2:	88 a7       	std	Y+40, r24	; 0x28
						LCD_voidMoveCourser(0,1,5);
    45e4:	80 e0       	ldi	r24, 0x00	; 0
    45e6:	61 e0       	ldi	r22, 0x01	; 1
    45e8:	45 e0       	ldi	r20, 0x05	; 5
    45ea:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
						LCD_voidSendNumber(0,arr[5]);
    45ee:	88 a5       	ldd	r24, Y+40	; 0x28
    45f0:	28 2f       	mov	r18, r24
    45f2:	30 e0       	ldi	r19, 0x00	; 0
    45f4:	40 e0       	ldi	r20, 0x00	; 0
    45f6:	50 e0       	ldi	r21, 0x00	; 0
    45f8:	80 e0       	ldi	r24, 0x00	; 0
    45fa:	ba 01       	movw	r22, r20
    45fc:	a9 01       	movw	r20, r18
    45fe:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <LCD_voidSendNumber>
						arr[7]=6;
    4602:	86 e0       	ldi	r24, 0x06	; 6
    4604:	8a a7       	std	Y+42, r24	; 0x2a
						flag=1;
    4606:	81 e0       	ldi	r24, 0x01	; 1
    4608:	8f 8f       	std	Y+31, r24	; 0x1f
    460a:	62 c0       	rjmp	.+196    	; 0x46d0 <main+0x7ec>
					}
					else
					{
						flag=3;
    460c:	83 e0       	ldi	r24, 0x03	; 3
    460e:	8f 8f       	std	Y+31, r24	; 0x1f
    4610:	5f c0       	rjmp	.+190    	; 0x46d0 <main+0x7ec>
					}
				}
				else if(flag==3)
    4612:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4614:	83 30       	cpi	r24, 0x03	; 3
    4616:	e9 f4       	brne	.+58     	; 0x4652 <main+0x76e>
				{
					if(arr[4]!=0)
    4618:	8f a1       	ldd	r24, Y+39	; 0x27
    461a:	88 23       	and	r24, r24
    461c:	b9 f0       	breq	.+46     	; 0x464c <main+0x768>
					{
						arr[4]--;
    461e:	8f a1       	ldd	r24, Y+39	; 0x27
    4620:	81 50       	subi	r24, 0x01	; 1
    4622:	8f a3       	std	Y+39, r24	; 0x27
						LCD_voidMoveCourser(0,1,4);
    4624:	80 e0       	ldi	r24, 0x00	; 0
    4626:	61 e0       	ldi	r22, 0x01	; 1
    4628:	44 e0       	ldi	r20, 0x04	; 4
    462a:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
						LCD_voidSendNumber(0,arr[4]);
    462e:	8f a1       	ldd	r24, Y+39	; 0x27
    4630:	28 2f       	mov	r18, r24
    4632:	30 e0       	ldi	r19, 0x00	; 0
    4634:	40 e0       	ldi	r20, 0x00	; 0
    4636:	50 e0       	ldi	r21, 0x00	; 0
    4638:	80 e0       	ldi	r24, 0x00	; 0
    463a:	ba 01       	movw	r22, r20
    463c:	a9 01       	movw	r20, r18
    463e:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <LCD_voidSendNumber>
						arr[5]=10;
    4642:	8a e0       	ldi	r24, 0x0A	; 10
    4644:	88 a7       	std	Y+40, r24	; 0x28
						flag=2;
    4646:	82 e0       	ldi	r24, 0x02	; 2
    4648:	8f 8f       	std	Y+31, r24	; 0x1f
    464a:	42 c0       	rjmp	.+132    	; 0x46d0 <main+0x7ec>
					}
					else
					{
						flag=4;
    464c:	84 e0       	ldi	r24, 0x04	; 4
    464e:	8f 8f       	std	Y+31, r24	; 0x1f
    4650:	3f c0       	rjmp	.+126    	; 0x46d0 <main+0x7ec>
					}
				}
				else if(flag==4)
    4652:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4654:	84 30       	cpi	r24, 0x04	; 4
    4656:	e9 f4       	brne	.+58     	; 0x4692 <main+0x7ae>
				{
					if(arr[2]!=0)
    4658:	8d a1       	ldd	r24, Y+37	; 0x25
    465a:	88 23       	and	r24, r24
    465c:	b9 f0       	breq	.+46     	; 0x468c <main+0x7a8>
					{
						arr[2]--;
    465e:	8d a1       	ldd	r24, Y+37	; 0x25
    4660:	81 50       	subi	r24, 0x01	; 1
    4662:	8d a3       	std	Y+37, r24	; 0x25
						LCD_voidMoveCourser(0,1,2);
    4664:	80 e0       	ldi	r24, 0x00	; 0
    4666:	61 e0       	ldi	r22, 0x01	; 1
    4668:	42 e0       	ldi	r20, 0x02	; 2
    466a:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
						LCD_voidSendNumber(0,arr[2]);
    466e:	8d a1       	ldd	r24, Y+37	; 0x25
    4670:	28 2f       	mov	r18, r24
    4672:	30 e0       	ldi	r19, 0x00	; 0
    4674:	40 e0       	ldi	r20, 0x00	; 0
    4676:	50 e0       	ldi	r21, 0x00	; 0
    4678:	80 e0       	ldi	r24, 0x00	; 0
    467a:	ba 01       	movw	r22, r20
    467c:	a9 01       	movw	r20, r18
    467e:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <LCD_voidSendNumber>
						arr[4]=6;
    4682:	86 e0       	ldi	r24, 0x06	; 6
    4684:	8f a3       	std	Y+39, r24	; 0x27
						flag=3;
    4686:	83 e0       	ldi	r24, 0x03	; 3
    4688:	8f 8f       	std	Y+31, r24	; 0x1f
    468a:	22 c0       	rjmp	.+68     	; 0x46d0 <main+0x7ec>
					}
					else
					{
						flag=5;
    468c:	85 e0       	ldi	r24, 0x05	; 5
    468e:	8f 8f       	std	Y+31, r24	; 0x1f
    4690:	1f c0       	rjmp	.+62     	; 0x46d0 <main+0x7ec>
					}
				}
				else if(flag==5)
    4692:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4694:	85 30       	cpi	r24, 0x05	; 5
    4696:	e1 f4       	brne	.+56     	; 0x46d0 <main+0x7ec>
				{
					if(arr[1]!=0)
    4698:	8c a1       	ldd	r24, Y+36	; 0x24
    469a:	88 23       	and	r24, r24
    469c:	b9 f0       	breq	.+46     	; 0x46cc <main+0x7e8>
					{
						arr[1]--;
    469e:	8c a1       	ldd	r24, Y+36	; 0x24
    46a0:	81 50       	subi	r24, 0x01	; 1
    46a2:	8c a3       	std	Y+36, r24	; 0x24
						LCD_voidMoveCourser(0,1,1);
    46a4:	80 e0       	ldi	r24, 0x00	; 0
    46a6:	61 e0       	ldi	r22, 0x01	; 1
    46a8:	41 e0       	ldi	r20, 0x01	; 1
    46aa:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
						LCD_voidSendNumber(0,arr[1]);
    46ae:	8c a1       	ldd	r24, Y+36	; 0x24
    46b0:	28 2f       	mov	r18, r24
    46b2:	30 e0       	ldi	r19, 0x00	; 0
    46b4:	40 e0       	ldi	r20, 0x00	; 0
    46b6:	50 e0       	ldi	r21, 0x00	; 0
    46b8:	80 e0       	ldi	r24, 0x00	; 0
    46ba:	ba 01       	movw	r22, r20
    46bc:	a9 01       	movw	r20, r18
    46be:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <LCD_voidSendNumber>
						arr[2]=10;
    46c2:	8a e0       	ldi	r24, 0x0A	; 10
    46c4:	8d a3       	std	Y+37, r24	; 0x25
						flag=4;
    46c6:	84 e0       	ldi	r24, 0x04	; 4
    46c8:	8f 8f       	std	Y+31, r24	; 0x1f
    46ca:	02 c0       	rjmp	.+4      	; 0x46d0 <main+0x7ec>
					}
					else
					{
						flag=6;
    46cc:	86 e0       	ldi	r24, 0x06	; 6
    46ce:	8f 8f       	std	Y+31, r24	; 0x1f
		}
		if(u8key == '=')
		{
			LCD_voidMoveCourser(0,2,1);
			LCD_voidSendString(0,"                ");
			while(arr[8]!=0 || arr[7]!=0 || arr[5]!=0 || arr[4]!=0 || arr[2]!=0 || arr[1]!=0)
    46d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    46d2:	88 23       	and	r24, r24
    46d4:	09 f0       	breq	.+2      	; 0x46d8 <main+0x7f4>
    46d6:	4e ce       	rjmp	.-868    	; 0x4374 <main+0x490>
    46d8:	8a a5       	ldd	r24, Y+42	; 0x2a
    46da:	88 23       	and	r24, r24
    46dc:	09 f0       	breq	.+2      	; 0x46e0 <main+0x7fc>
    46de:	4a ce       	rjmp	.-876    	; 0x4374 <main+0x490>
    46e0:	88 a5       	ldd	r24, Y+40	; 0x28
    46e2:	88 23       	and	r24, r24
    46e4:	09 f0       	breq	.+2      	; 0x46e8 <main+0x804>
    46e6:	46 ce       	rjmp	.-884    	; 0x4374 <main+0x490>
    46e8:	8f a1       	ldd	r24, Y+39	; 0x27
    46ea:	88 23       	and	r24, r24
    46ec:	09 f0       	breq	.+2      	; 0x46f0 <main+0x80c>
    46ee:	42 ce       	rjmp	.-892    	; 0x4374 <main+0x490>
    46f0:	8d a1       	ldd	r24, Y+37	; 0x25
    46f2:	88 23       	and	r24, r24
    46f4:	09 f0       	breq	.+2      	; 0x46f8 <main+0x814>
    46f6:	3e ce       	rjmp	.-900    	; 0x4374 <main+0x490>
    46f8:	8c a1       	ldd	r24, Y+36	; 0x24
    46fa:	88 23       	and	r24, r24
    46fc:	09 f0       	breq	.+2      	; 0x4700 <main+0x81c>
    46fe:	3a ce       	rjmp	.-908    	; 0x4374 <main+0x490>
				else
				{
					/* Nothing */
				}
			}
			LCD_voidMoveCourser(0,2,1);
    4700:	80 e0       	ldi	r24, 0x00	; 0
    4702:	62 e0       	ldi	r22, 0x02	; 2
    4704:	41 e0       	ldi	r20, 0x01	; 1
    4706:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <LCD_voidMoveCourser>
			LCD_voidSendString(0,"It's the Time");
    470a:	28 e8       	ldi	r18, 0x88	; 136
    470c:	30 e0       	ldi	r19, 0x00	; 0
    470e:	80 e0       	ldi	r24, 0x00	; 0
    4710:	b9 01       	movw	r22, r18
    4712:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <LCD_voidSendString>
    4716:	1d cc       	rjmp	.-1990   	; 0x3f52 <main+0x6e>

00004718 <__udivmodsi4>:
    4718:	a1 e2       	ldi	r26, 0x21	; 33
    471a:	1a 2e       	mov	r1, r26
    471c:	aa 1b       	sub	r26, r26
    471e:	bb 1b       	sub	r27, r27
    4720:	fd 01       	movw	r30, r26
    4722:	0d c0       	rjmp	.+26     	; 0x473e <__udivmodsi4_ep>

00004724 <__udivmodsi4_loop>:
    4724:	aa 1f       	adc	r26, r26
    4726:	bb 1f       	adc	r27, r27
    4728:	ee 1f       	adc	r30, r30
    472a:	ff 1f       	adc	r31, r31
    472c:	a2 17       	cp	r26, r18
    472e:	b3 07       	cpc	r27, r19
    4730:	e4 07       	cpc	r30, r20
    4732:	f5 07       	cpc	r31, r21
    4734:	20 f0       	brcs	.+8      	; 0x473e <__udivmodsi4_ep>
    4736:	a2 1b       	sub	r26, r18
    4738:	b3 0b       	sbc	r27, r19
    473a:	e4 0b       	sbc	r30, r20
    473c:	f5 0b       	sbc	r31, r21

0000473e <__udivmodsi4_ep>:
    473e:	66 1f       	adc	r22, r22
    4740:	77 1f       	adc	r23, r23
    4742:	88 1f       	adc	r24, r24
    4744:	99 1f       	adc	r25, r25
    4746:	1a 94       	dec	r1
    4748:	69 f7       	brne	.-38     	; 0x4724 <__udivmodsi4_loop>
    474a:	60 95       	com	r22
    474c:	70 95       	com	r23
    474e:	80 95       	com	r24
    4750:	90 95       	com	r25
    4752:	9b 01       	movw	r18, r22
    4754:	ac 01       	movw	r20, r24
    4756:	bd 01       	movw	r22, r26
    4758:	cf 01       	movw	r24, r30
    475a:	08 95       	ret

0000475c <__prologue_saves__>:
    475c:	2f 92       	push	r2
    475e:	3f 92       	push	r3
    4760:	4f 92       	push	r4
    4762:	5f 92       	push	r5
    4764:	6f 92       	push	r6
    4766:	7f 92       	push	r7
    4768:	8f 92       	push	r8
    476a:	9f 92       	push	r9
    476c:	af 92       	push	r10
    476e:	bf 92       	push	r11
    4770:	cf 92       	push	r12
    4772:	df 92       	push	r13
    4774:	ef 92       	push	r14
    4776:	ff 92       	push	r15
    4778:	0f 93       	push	r16
    477a:	1f 93       	push	r17
    477c:	cf 93       	push	r28
    477e:	df 93       	push	r29
    4780:	cd b7       	in	r28, 0x3d	; 61
    4782:	de b7       	in	r29, 0x3e	; 62
    4784:	ca 1b       	sub	r28, r26
    4786:	db 0b       	sbc	r29, r27
    4788:	0f b6       	in	r0, 0x3f	; 63
    478a:	f8 94       	cli
    478c:	de bf       	out	0x3e, r29	; 62
    478e:	0f be       	out	0x3f, r0	; 63
    4790:	cd bf       	out	0x3d, r28	; 61
    4792:	09 94       	ijmp

00004794 <__epilogue_restores__>:
    4794:	2a 88       	ldd	r2, Y+18	; 0x12
    4796:	39 88       	ldd	r3, Y+17	; 0x11
    4798:	48 88       	ldd	r4, Y+16	; 0x10
    479a:	5f 84       	ldd	r5, Y+15	; 0x0f
    479c:	6e 84       	ldd	r6, Y+14	; 0x0e
    479e:	7d 84       	ldd	r7, Y+13	; 0x0d
    47a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    47a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    47a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    47a6:	b9 84       	ldd	r11, Y+9	; 0x09
    47a8:	c8 84       	ldd	r12, Y+8	; 0x08
    47aa:	df 80       	ldd	r13, Y+7	; 0x07
    47ac:	ee 80       	ldd	r14, Y+6	; 0x06
    47ae:	fd 80       	ldd	r15, Y+5	; 0x05
    47b0:	0c 81       	ldd	r16, Y+4	; 0x04
    47b2:	1b 81       	ldd	r17, Y+3	; 0x03
    47b4:	aa 81       	ldd	r26, Y+2	; 0x02
    47b6:	b9 81       	ldd	r27, Y+1	; 0x01
    47b8:	ce 0f       	add	r28, r30
    47ba:	d1 1d       	adc	r29, r1
    47bc:	0f b6       	in	r0, 0x3f	; 63
    47be:	f8 94       	cli
    47c0:	de bf       	out	0x3e, r29	; 62
    47c2:	0f be       	out	0x3f, r0	; 63
    47c4:	cd bf       	out	0x3d, r28	; 61
    47c6:	ed 01       	movw	r28, r26
    47c8:	08 95       	ret

000047ca <_exit>:
    47ca:	f8 94       	cli

000047cc <__stop_program>:
    47cc:	ff cf       	rjmp	.-2      	; 0x47cc <__stop_program>
