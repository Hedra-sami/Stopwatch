
Stopwatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004902  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  00004902  00004996  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000c6  008000c6  000049fc  2**0
                  ALLOC
  3 .stab         00003a8c  00000000  00000000  000049fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000121b  00000000  00000000  00008488  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000096a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000097e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009953  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b59c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c487  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d234  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d394  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d621  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ddef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3c       	cpi	r26, 0xCE	; 206
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c3 23 	call	0x4786	; 0x4786 <main>
      8a:	0c 94 7f 24 	jmp	0x48fe	; 0x48fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 48 24 	jmp	0x4890	; 0x4890 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e8       	ldi	r26, 0x8D	; 141
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 64 24 	jmp	0x48c8	; 0x48c8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 54 24 	jmp	0x48a8	; 0x48a8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 70 24 	jmp	0x48e0	; 0x48e0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 54 24 	jmp	0x48a8	; 0x48a8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 70 24 	jmp	0x48e0	; 0x48e0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 48 24 	jmp	0x4890	; 0x4890 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e8       	ldi	r24, 0x8D	; 141
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 64 24 	jmp	0x48c8	; 0x48c8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 54 24 	jmp	0x48a8	; 0x48a8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 70 24 	jmp	0x48e0	; 0x48e0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 54 24 	jmp	0x48a8	; 0x48a8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 70 24 	jmp	0x48e0	; 0x48e0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 54 24 	jmp	0x48a8	; 0x48a8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 70 24 	jmp	0x48e0	; 0x48e0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 58 24 	jmp	0x48b0	; 0x48b0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 74 24 	jmp	0x48e8	; 0x48e8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidInit>:
#include"DIO_interface.h"
#include"DIO_configuration.h"
#include"DIO_private.h"

void DIO_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	
	DDRA=CONC(DIO_PIN_NUM_A7_DIR,DIO_PIN_NUM_A6_DIR,DIO_PIN_NUM_A5_DIR,DIO_PIN_NUM_A4_DIR,DIO_PIN_NUM_A3_DIR,DIO_PIN_NUM_A2_DIR,DIO_PIN_NUM_A1_DIR,DIO_PIN_NUM_A0_DIR);
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	80 83       	st	Z, r24
	DDRB=CONC(DIO_PIN_NUM_B7_DIR,DIO_PIN_NUM_B6_DIR,DIO_PIN_NUM_B5_DIR,DIO_PIN_NUM_B4_DIR,DIO_PIN_NUM_B3_DIR,DIO_PIN_NUM_B2_DIR,DIO_PIN_NUM_B1_DIR,DIO_PIN_NUM_B0_DIR);
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	80 83       	st	Z, r24
	DDRC =CONC(DIO_PIN_NUM_C7_DIR,DIO_PIN_NUM_C6_DIR,DIO_PIN_NUM_C5_DIR,DIO_PIN_NUM_C4_DIR,DIO_PIN_NUM_C3_DIR,DIO_PIN_NUM_C2_DIR,DIO_PIN_NUM_C1_DIR,DIO_PIN_NUM_C0_DIR);
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	80 83       	st	Z, r24
	DDRD=CONC(DIO_PIN_NUM_D7_DIR,DIO_PIN_NUM_D6_DIR,DIO_PIN_NUM_D5_DIR,DIO_PIN_NUM_D4_DIR,DIO_PIN_NUM_D3_DIR,DIO_PIN_NUM_D2_DIR,DIO_PIN_NUM_D1_DIR,DIO_PIN_NUM_D0_DIR);
     b66:	e1 e3       	ldi	r30, 0x31	; 49
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 ef       	ldi	r24, 0xF0	; 240
     b6c:	80 83       	st	Z, r24
}   
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	08 95       	ret

00000b74 <DIO_enuWritePin>:


tenuErrrorStatus DIO_enuWritePin(uint8 u8PinNumCpy , uint8 u8PinValueCpy)
{
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	2b 97       	sbiw	r28, 0x0b	; 11
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	cd bf       	out	0x3d, r28	; 61
     b88:	8a 83       	std	Y+2, r24	; 0x02
     b8a:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrrorStatus enuReturnStateLoc =EOK ;
     b8c:	19 82       	std	Y+1, r1	; 0x01
	
	
	if (u8PinNumCpy>=DIO_PIN_NUM_A0  && u8PinNumCpy<= DIO_PIN_NUM_A7)
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	88 30       	cpi	r24, 0x08	; 8
     b92:	d0 f5       	brcc	.+116    	; 0xc08 <DIO_enuWritePin+0x94>
	{
		switch(u8PinValueCpy)
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	3b 87       	std	Y+11, r19	; 0x0b
     b9c:	2a 87       	std	Y+10, r18	; 0x0a
     b9e:	8a 85       	ldd	r24, Y+10	; 0x0a
     ba0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	c9 f0       	breq	.+50     	; 0xbd8 <DIO_enuWritePin+0x64>
     ba6:	2a 85       	ldd	r18, Y+10	; 0x0a
     ba8:	3b 85       	ldd	r19, Y+11	; 0x0b
     baa:	21 30       	cpi	r18, 0x01	; 1
     bac:	31 05       	cpc	r19, r1
     bae:	49 f5       	brne	.+82     	; 0xc02 <DIO_enuWritePin+0x8e>
		{
			case DIO_HIGH :
			SET_BIT(PORTA ,u8PinNumCpy);
     bb0:	ab e3       	ldi	r26, 0x3B	; 59
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	eb e3       	ldi	r30, 0x3B	; 59
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	48 2f       	mov	r20, r24
     bbc:	8a 81       	ldd	r24, Y+2	; 0x02
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	02 2e       	mov	r0, r18
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <DIO_enuWritePin+0x5a>
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	0a 94       	dec	r0
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <DIO_enuWritePin+0x56>
     bd2:	84 2b       	or	r24, r20
     bd4:	8c 93       	st	X, r24
     bd6:	f2 c0       	rjmp	.+484    	; 0xdbc <DIO_enuWritePin+0x248>
			break;
			case DIO_LOW :
			CLR_BIT(PORTA,u8PinNumCpy);
     bd8:	ab e3       	ldi	r26, 0x3B	; 59
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	eb e3       	ldi	r30, 0x3B	; 59
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	48 2f       	mov	r20, r24
     be4:	8a 81       	ldd	r24, Y+2	; 0x02
     be6:	28 2f       	mov	r18, r24
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	02 2e       	mov	r0, r18
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <DIO_enuWritePin+0x82>
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	0a 94       	dec	r0
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <DIO_enuWritePin+0x7e>
     bfa:	80 95       	com	r24
     bfc:	84 23       	and	r24, r20
     bfe:	8c 93       	st	X, r24
     c00:	dd c0       	rjmp	.+442    	; 0xdbc <DIO_enuWritePin+0x248>
			break;
			default :
			enuReturnStateLoc = PARAMRETER_OUT_RANGE;
     c02:	82 e0       	ldi	r24, 0x02	; 2
     c04:	89 83       	std	Y+1, r24	; 0x01
     c06:	da c0       	rjmp	.+436    	; 0xdbc <DIO_enuWritePin+0x248>
			break;
			
		}		
	}	
	else if (u8PinNumCpy>=DIO_PIN_NUM_B0 && u8PinNumCpy<=DIO_PIN_NUM_B7)
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	88 30       	cpi	r24, 0x08	; 8
     c0c:	08 f4       	brcc	.+2      	; 0xc10 <DIO_enuWritePin+0x9c>
     c0e:	44 c0       	rjmp	.+136    	; 0xc98 <DIO_enuWritePin+0x124>
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	80 31       	cpi	r24, 0x10	; 16
     c14:	08 f0       	brcs	.+2      	; 0xc18 <DIO_enuWritePin+0xa4>
     c16:	40 c0       	rjmp	.+128    	; 0xc98 <DIO_enuWritePin+0x124>
	{
		switch(u8PinValueCpy)
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	39 87       	std	Y+9, r19	; 0x09
     c20:	28 87       	std	Y+8, r18	; 0x08
     c22:	88 85       	ldd	r24, Y+8	; 0x08
     c24:	99 85       	ldd	r25, Y+9	; 0x09
     c26:	00 97       	sbiw	r24, 0x00	; 0
     c28:	e1 f0       	breq	.+56     	; 0xc62 <DIO_enuWritePin+0xee>
     c2a:	28 85       	ldd	r18, Y+8	; 0x08
     c2c:	39 85       	ldd	r19, Y+9	; 0x09
     c2e:	21 30       	cpi	r18, 0x01	; 1
     c30:	31 05       	cpc	r19, r1
     c32:	79 f5       	brne	.+94     	; 0xc92 <DIO_enuWritePin+0x11e>
		{
			case DIO_HIGH :
			SET_BIT(PORTB ,u8PinNumCpy%8);
     c34:	a8 e3       	ldi	r26, 0x38	; 56
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e8 e3       	ldi	r30, 0x38	; 56
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	88 2f       	mov	r24, r24
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	9c 01       	movw	r18, r24
     c48:	27 70       	andi	r18, 0x07	; 7
     c4a:	30 70       	andi	r19, 0x00	; 0
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	02 2e       	mov	r0, r18
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <DIO_enuWritePin+0xe4>
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	0a 94       	dec	r0
     c5a:	e2 f7       	brpl	.-8      	; 0xc54 <DIO_enuWritePin+0xe0>
     c5c:	84 2b       	or	r24, r20
     c5e:	8c 93       	st	X, r24
     c60:	ad c0       	rjmp	.+346    	; 0xdbc <DIO_enuWritePin+0x248>
			break;
			case DIO_LOW :
			CLR_BIT(PORTB,u8PinNumCpy%8);  //-8
     c62:	a8 e3       	ldi	r26, 0x38	; 56
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e8 e3       	ldi	r30, 0x38	; 56
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	48 2f       	mov	r20, r24
     c6e:	8a 81       	ldd	r24, Y+2	; 0x02
     c70:	88 2f       	mov	r24, r24
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	9c 01       	movw	r18, r24
     c76:	27 70       	andi	r18, 0x07	; 7
     c78:	30 70       	andi	r19, 0x00	; 0
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	02 2e       	mov	r0, r18
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <DIO_enuWritePin+0x112>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	0a 94       	dec	r0
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <DIO_enuWritePin+0x10e>
     c8a:	80 95       	com	r24
     c8c:	84 23       	and	r24, r20
     c8e:	8c 93       	st	X, r24
     c90:	95 c0       	rjmp	.+298    	; 0xdbc <DIO_enuWritePin+0x248>
			break;
			default :
			enuReturnStateLoc = PARAMRETER_OUT_RANGE;
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	92 c0       	rjmp	.+292    	; 0xdbc <DIO_enuWritePin+0x248>
			break;
			
		}	
		
	}
	else if (u8PinNumCpy>=DIO_PIN_NUM_C0 && u8PinNumCpy<=DIO_PIN_NUM_C7)
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	80 31       	cpi	r24, 0x10	; 16
     c9c:	08 f4       	brcc	.+2      	; 0xca0 <DIO_enuWritePin+0x12c>
     c9e:	44 c0       	rjmp	.+136    	; 0xd28 <DIO_enuWritePin+0x1b4>
     ca0:	8a 81       	ldd	r24, Y+2	; 0x02
     ca2:	88 31       	cpi	r24, 0x18	; 24
     ca4:	08 f0       	brcs	.+2      	; 0xca8 <DIO_enuWritePin+0x134>
     ca6:	40 c0       	rjmp	.+128    	; 0xd28 <DIO_enuWritePin+0x1b4>
	{
		
		switch(u8PinValueCpy)
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	3f 83       	std	Y+7, r19	; 0x07
     cb0:	2e 83       	std	Y+6, r18	; 0x06
     cb2:	8e 81       	ldd	r24, Y+6	; 0x06
     cb4:	9f 81       	ldd	r25, Y+7	; 0x07
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	e1 f0       	breq	.+56     	; 0xcf2 <DIO_enuWritePin+0x17e>
     cba:	2e 81       	ldd	r18, Y+6	; 0x06
     cbc:	3f 81       	ldd	r19, Y+7	; 0x07
     cbe:	21 30       	cpi	r18, 0x01	; 1
     cc0:	31 05       	cpc	r19, r1
     cc2:	79 f5       	brne	.+94     	; 0xd22 <DIO_enuWritePin+0x1ae>
		{
			case DIO_HIGH :
			SET_BIT(PORTC ,u8PinNumCpy%8);  //-16
     cc4:	a5 e3       	ldi	r26, 0x35	; 53
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e5 e3       	ldi	r30, 0x35	; 53
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	48 2f       	mov	r20, r24
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	88 2f       	mov	r24, r24
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	9c 01       	movw	r18, r24
     cd8:	27 70       	andi	r18, 0x07	; 7
     cda:	30 70       	andi	r19, 0x00	; 0
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 2e       	mov	r0, r18
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <DIO_enuWritePin+0x174>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	0a 94       	dec	r0
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <DIO_enuWritePin+0x170>
     cec:	84 2b       	or	r24, r20
     cee:	8c 93       	st	X, r24
     cf0:	65 c0       	rjmp	.+202    	; 0xdbc <DIO_enuWritePin+0x248>
			break;
			case DIO_LOW :
			CLR_BIT(PORTC,u8PinNumCpy%8);
     cf2:	a5 e3       	ldi	r26, 0x35	; 53
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e5 e3       	ldi	r30, 0x35	; 53
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	48 2f       	mov	r20, r24
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	88 2f       	mov	r24, r24
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	9c 01       	movw	r18, r24
     d06:	27 70       	andi	r18, 0x07	; 7
     d08:	30 70       	andi	r19, 0x00	; 0
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	02 2e       	mov	r0, r18
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <DIO_enuWritePin+0x1a2>
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	0a 94       	dec	r0
     d18:	e2 f7       	brpl	.-8      	; 0xd12 <DIO_enuWritePin+0x19e>
     d1a:	80 95       	com	r24
     d1c:	84 23       	and	r24, r20
     d1e:	8c 93       	st	X, r24
     d20:	4d c0       	rjmp	.+154    	; 0xdbc <DIO_enuWritePin+0x248>
			break;
			default :
			enuReturnStateLoc = PARAMRETER_OUT_RANGE;
     d22:	82 e0       	ldi	r24, 0x02	; 2
     d24:	89 83       	std	Y+1, r24	; 0x01
     d26:	4a c0       	rjmp	.+148    	; 0xdbc <DIO_enuWritePin+0x248>
			
		}	
		
		
	}
	else if (u8PinNumCpy>=DIO_PIN_NUM_D0 && u8PinNumCpy<=DIO_PIN_NUM_D7)
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	88 31       	cpi	r24, 0x18	; 24
     d2c:	08 f4       	brcc	.+2      	; 0xd30 <DIO_enuWritePin+0x1bc>
     d2e:	44 c0       	rjmp	.+136    	; 0xdb8 <DIO_enuWritePin+0x244>
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	80 32       	cpi	r24, 0x20	; 32
     d34:	08 f0       	brcs	.+2      	; 0xd38 <DIO_enuWritePin+0x1c4>
     d36:	40 c0       	rjmp	.+128    	; 0xdb8 <DIO_enuWritePin+0x244>
	{
		
		switch(u8PinValueCpy)
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	3d 83       	std	Y+5, r19	; 0x05
     d40:	2c 83       	std	Y+4, r18	; 0x04
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	9d 81       	ldd	r25, Y+5	; 0x05
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	e1 f0       	breq	.+56     	; 0xd82 <DIO_enuWritePin+0x20e>
     d4a:	2c 81       	ldd	r18, Y+4	; 0x04
     d4c:	3d 81       	ldd	r19, Y+5	; 0x05
     d4e:	21 30       	cpi	r18, 0x01	; 1
     d50:	31 05       	cpc	r19, r1
     d52:	79 f5       	brne	.+94     	; 0xdb2 <DIO_enuWritePin+0x23e>
		{
			case DIO_HIGH :
			SET_BIT(PORTD ,(u8PinNumCpy%8));  //-16
     d54:	a2 e3       	ldi	r26, 0x32	; 50
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e2 e3       	ldi	r30, 0x32	; 50
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	48 2f       	mov	r20, r24
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	88 2f       	mov	r24, r24
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	9c 01       	movw	r18, r24
     d68:	27 70       	andi	r18, 0x07	; 7
     d6a:	30 70       	andi	r19, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 2e       	mov	r0, r18
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <DIO_enuWritePin+0x204>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	0a 94       	dec	r0
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <DIO_enuWritePin+0x200>
     d7c:	84 2b       	or	r24, r20
     d7e:	8c 93       	st	X, r24
     d80:	1d c0       	rjmp	.+58     	; 0xdbc <DIO_enuWritePin+0x248>
			break;
			case DIO_LOW :
			CLR_BIT(PORTD,(u8PinNumCpy%8));
     d82:	a2 e3       	ldi	r26, 0x32	; 50
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e2 e3       	ldi	r30, 0x32	; 50
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	48 2f       	mov	r20, r24
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	88 2f       	mov	r24, r24
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	9c 01       	movw	r18, r24
     d96:	27 70       	andi	r18, 0x07	; 7
     d98:	30 70       	andi	r19, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 2e       	mov	r0, r18
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <DIO_enuWritePin+0x232>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <DIO_enuWritePin+0x22e>
     daa:	80 95       	com	r24
     dac:	84 23       	and	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	05 c0       	rjmp	.+10     	; 0xdbc <DIO_enuWritePin+0x248>
			break;
			default :
			enuReturnStateLoc = PARAMRETER_OUT_RANGE;
     db2:	82 e0       	ldi	r24, 0x02	; 2
     db4:	89 83       	std	Y+1, r24	; 0x01
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <DIO_enuWritePin+0x248>
		
		
	}
	else 
	{
		enuReturnStateLoc=PARAMRETER_OUT_RANGE;
     db8:	82 e0       	ldi	r24, 0x02	; 2
     dba:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	return enuReturnStateLoc;
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
     dbe:	2b 96       	adiw	r28, 0x0b	; 11
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <DIO_enuReadPin>:
 
tenuErrrorStatus DIO_enuReadPin(uint8 u8PinNumCpy , uint8* pu8PinValue)
{
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <DIO_enuReadPin+0x6>
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <DIO_enuReadPin+0x8>
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	8a 83       	std	Y+2, r24	; 0x02
     dde:	7c 83       	std	Y+4, r23	; 0x04
     de0:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrrorStatus enuReturnStateLoc =EOK ;
     de2:	19 82       	std	Y+1, r1	; 0x01
	
	
	if (pu8PinValue!= NULL_PTR)
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	9c 81       	ldd	r25, Y+4	; 0x04
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	09 f4       	brne	.+2      	; 0xdee <DIO_enuReadPin+0x1e>
     dec:	6e c0       	rjmp	.+220    	; 0xeca <DIO_enuReadPin+0xfa>
	{
		if (u8PinNumCpy>=DIO_PIN_NUM_A0  && u8PinNumCpy<= DIO_PIN_NUM_A7)
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	88 30       	cpi	r24, 0x08	; 8
     df2:	a0 f4       	brcc	.+40     	; 0xe1c <DIO_enuReadPin+0x4c>
		{
			
			*pu8PinValue=GET_BIT(PINA,u8PinNumCpy);
     df4:	e9 e3       	ldi	r30, 0x39	; 57
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	88 2f       	mov	r24, r24
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a9 01       	movw	r20, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_enuReadPin+0x3c>
     e08:	55 95       	asr	r21
     e0a:	47 95       	ror	r20
     e0c:	8a 95       	dec	r24
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <DIO_enuReadPin+0x38>
     e10:	ca 01       	movw	r24, r20
     e12:	81 70       	andi	r24, 0x01	; 1
     e14:	eb 81       	ldd	r30, Y+3	; 0x03
     e16:	fc 81       	ldd	r31, Y+4	; 0x04
     e18:	80 83       	st	Z, r24
     e1a:	59 c0       	rjmp	.+178    	; 0xece <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy>=DIO_PIN_NUM_B0 && u8PinNumCpy<=DIO_PIN_NUM_B7)
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	88 30       	cpi	r24, 0x08	; 8
     e20:	c8 f0       	brcs	.+50     	; 0xe54 <DIO_enuReadPin+0x84>
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	80 31       	cpi	r24, 0x10	; 16
     e26:	b0 f4       	brcc	.+44     	; 0xe54 <DIO_enuReadPin+0x84>
		{
			*pu8PinValue=GET_BIT(PINB,u8PinNumCpy%8);
     e28:	e6 e3       	ldi	r30, 0x36	; 54
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	88 2f       	mov	r24, r24
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	87 70       	andi	r24, 0x07	; 7
     e3a:	90 70       	andi	r25, 0x00	; 0
     e3c:	a9 01       	movw	r20, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_enuReadPin+0x74>
     e40:	55 95       	asr	r21
     e42:	47 95       	ror	r20
     e44:	8a 95       	dec	r24
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_enuReadPin+0x70>
     e48:	ca 01       	movw	r24, r20
     e4a:	81 70       	andi	r24, 0x01	; 1
     e4c:	eb 81       	ldd	r30, Y+3	; 0x03
     e4e:	fc 81       	ldd	r31, Y+4	; 0x04
     e50:	80 83       	st	Z, r24
     e52:	3d c0       	rjmp	.+122    	; 0xece <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy>=DIO_PIN_NUM_C0 && u8PinNumCpy<=DIO_PIN_NUM_C7)
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	80 31       	cpi	r24, 0x10	; 16
     e58:	c8 f0       	brcs	.+50     	; 0xe8c <DIO_enuReadPin+0xbc>
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	88 31       	cpi	r24, 0x18	; 24
     e5e:	b0 f4       	brcc	.+44     	; 0xe8c <DIO_enuReadPin+0xbc>
		{
			*pu8PinValue=GET_BIT(PINC,u8PinNumCpy%8);
     e60:	e3 e3       	ldi	r30, 0x33	; 51
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	88 2f       	mov	r24, r24
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	87 70       	andi	r24, 0x07	; 7
     e72:	90 70       	andi	r25, 0x00	; 0
     e74:	a9 01       	movw	r20, r18
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <DIO_enuReadPin+0xac>
     e78:	55 95       	asr	r21
     e7a:	47 95       	ror	r20
     e7c:	8a 95       	dec	r24
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <DIO_enuReadPin+0xa8>
     e80:	ca 01       	movw	r24, r20
     e82:	81 70       	andi	r24, 0x01	; 1
     e84:	eb 81       	ldd	r30, Y+3	; 0x03
     e86:	fc 81       	ldd	r31, Y+4	; 0x04
     e88:	80 83       	st	Z, r24
     e8a:	21 c0       	rjmp	.+66     	; 0xece <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy>=DIO_PIN_NUM_D0 && u8PinNumCpy<=DIO_PIN_NUM_D7)
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	88 31       	cpi	r24, 0x18	; 24
     e90:	c8 f0       	brcs	.+50     	; 0xec4 <DIO_enuReadPin+0xf4>
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	80 32       	cpi	r24, 0x20	; 32
     e96:	b0 f4       	brcc	.+44     	; 0xec4 <DIO_enuReadPin+0xf4>
		{
			*pu8PinValue=GET_BIT(PIND,u8PinNumCpy%8);
     e98:	e0 e3       	ldi	r30, 0x30	; 48
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	88 2f       	mov	r24, r24
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	87 70       	andi	r24, 0x07	; 7
     eaa:	90 70       	andi	r25, 0x00	; 0
     eac:	a9 01       	movw	r20, r18
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <DIO_enuReadPin+0xe4>
     eb0:	55 95       	asr	r21
     eb2:	47 95       	ror	r20
     eb4:	8a 95       	dec	r24
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <DIO_enuReadPin+0xe0>
     eb8:	ca 01       	movw	r24, r20
     eba:	81 70       	andi	r24, 0x01	; 1
     ebc:	eb 81       	ldd	r30, Y+3	; 0x03
     ebe:	fc 81       	ldd	r31, Y+4	; 0x04
     ec0:	80 83       	st	Z, r24
     ec2:	05 c0       	rjmp	.+10     	; 0xece <DIO_enuReadPin+0xfe>
		}
		else
		{
			enuReturnStateLoc= PARAMRETER_OUT_RANGE;
     ec4:	82 e0       	ldi	r24, 0x02	; 2
     ec6:	89 83       	std	Y+1, r24	; 0x01
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_enuReadPin+0xfe>
		}
	}
	else
	{
		enuReturnStateLoc=PARAMERTE_NULL_PTR;
     eca:	83 e0       	ldi	r24, 0x03	; 3
     ecc:	89 83       	std	Y+1, r24	; 0x01
	}
	return enuReturnStateLoc;
     ece:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <DIO_enuStatePullup>:

tenuErrrorStatus DIO_enuStatePullup(uint8 u8PinNumCpy , uint8 u8StateCpy)
{
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <DIO_enuStatePullup+0x6>
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	89 83       	std	Y+1, r24	; 0x01
     eea:	6a 83       	std	Y+2, r22	; 0x02
	
	return DIO_enuWritePin(u8PinNumCpy,u8StateCpy);
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	6a 81       	ldd	r22, Y+2	; 0x02
     ef0:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
	
}
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <DIO_enuWriteGroup>:


tenuErrrorStatus DIO_enuWriteGroup(uint8* pau8PinNumCpy , uint8* pau8PinValueCpy,uint8 u8Sizecpy)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	27 97       	sbiw	r28, 0x07	; 7
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	f8 94       	cli
     f0c:	de bf       	out	0x3e, r29	; 62
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	cd bf       	out	0x3d, r28	; 61
     f12:	9c 83       	std	Y+4, r25	; 0x04
     f14:	8b 83       	std	Y+3, r24	; 0x03
     f16:	7e 83       	std	Y+6, r23	; 0x06
     f18:	6d 83       	std	Y+5, r22	; 0x05
     f1a:	4f 83       	std	Y+7, r20	; 0x07
	tenuErrrorStatus enuReturnStateLoc =EOK;
     f1c:	1a 82       	std	Y+2, r1	; 0x02
	
	uint8 u8CounterLoc=0;
     f1e:	19 82       	std	Y+1, r1	; 0x01
	
	for ( u8CounterLoc=0 ;   u8CounterLoc< u8Sizecpy ;u8CounterLoc++)
     f20:	19 82       	std	Y+1, r1	; 0x01
     f22:	1d c0       	rjmp	.+58     	; 0xf5e <DIO_enuWriteGroup+0x60>
	{
		enuReturnStateLoc=DIO_enuWritePin(pau8PinNumCpy[u8CounterLoc],pau8PinValueCpy[u8CounterLoc]);
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	9c 81       	ldd	r25, Y+4	; 0x04
     f2e:	fc 01       	movw	r30, r24
     f30:	e2 0f       	add	r30, r18
     f32:	f3 1f       	adc	r31, r19
     f34:	40 81       	ld	r20, Z
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	8d 81       	ldd	r24, Y+5	; 0x05
     f3e:	9e 81       	ldd	r25, Y+6	; 0x06
     f40:	fc 01       	movw	r30, r24
     f42:	e2 0f       	add	r30, r18
     f44:	f3 1f       	adc	r31, r19
     f46:	90 81       	ld	r25, Z
     f48:	84 2f       	mov	r24, r20
     f4a:	69 2f       	mov	r22, r25
     f4c:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
     f50:	8a 83       	std	Y+2, r24	; 0x02
		
		if (enuReturnStateLoc !=EOK)
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	88 23       	and	r24, r24
     f56:	39 f4       	brne	.+14     	; 0xf66 <DIO_enuWriteGroup+0x68>
{
	tenuErrrorStatus enuReturnStateLoc =EOK;
	
	uint8 u8CounterLoc=0;
	
	for ( u8CounterLoc=0 ;   u8CounterLoc< u8Sizecpy ;u8CounterLoc++)
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	8f 5f       	subi	r24, 0xFF	; 255
     f5c:	89 83       	std	Y+1, r24	; 0x01
     f5e:	99 81       	ldd	r25, Y+1	; 0x01
     f60:	8f 81       	ldd	r24, Y+7	; 0x07
     f62:	98 17       	cp	r25, r24
     f64:	f8 f2       	brcs	.-66     	; 0xf24 <DIO_enuWriteGroup+0x26>
		{
			break;
		}
	}
	
	return enuReturnStateLoc;
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f68:	27 96       	adiw	r28, 0x07	; 7
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <LCD_voidInit>:
#include "LCD_cfg.h"
#include "LCD_priv.h"


void LCD_voidInit(void)
{
     f7a:	0f 93       	push	r16
     f7c:	1f 93       	push	r17
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	ce 58       	subi	r28, 0x8E	; 142
     f88:	d0 40       	sbci	r29, 0x00	; 0
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
	uint8 u8CntLoc;
	uint8 u8commnad=0;
     f94:	fe 01       	movw	r30, r28
     f96:	e3 57       	subi	r30, 0x73	; 115
     f98:	ff 4f       	sbci	r31, 0xFF	; 255
     f9a:	10 82       	st	Z, r1
	for (u8CntLoc =0  ; u8CntLoc <MAX_NUM ; u8CntLoc++)
     f9c:	fe 01       	movw	r30, r28
     f9e:	e2 57       	subi	r30, 0x72	; 114
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	10 82       	st	Z, r1
     fa4:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <LCD_voidInit+0x1068>
	{
		/*inilize 8 bit */
		if(lcdarr[u8CntLoc].lcdswconfig.u8mode ==LCD_8_BIT_MODE)
     fa8:	fe 01       	movw	r30, r28
     faa:	e2 57       	subi	r30, 0x72	; 114
     fac:	ff 4f       	sbci	r31, 0xFF	; 255
     fae:	80 81       	ld	r24, Z
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	c9 01       	movw	r24, r18
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	82 0f       	add	r24, r18
     fbc:	93 1f       	adc	r25, r19
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	fc 01       	movw	r30, r24
     fc8:	eb 56       	subi	r30, 0x6B	; 107
     fca:	ff 4f       	sbci	r31, 0xFF	; 255
     fcc:	80 81       	ld	r24, Z
     fce:	81 70       	andi	r24, 0x01	; 1
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <LCD_voidInit+0x5c>
     fd4:	75 c4       	rjmp	.+2282   	; 0x18c0 <LCD_voidInit+0x946>
     fd6:	fe 01       	movw	r30, r28
     fd8:	e7 57       	subi	r30, 0x77	; 119
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	a0 ef       	ldi	r26, 0xF0	; 240
     fe2:	b1 e4       	ldi	r27, 0x41	; 65
     fe4:	80 83       	st	Z, r24
     fe6:	91 83       	std	Z+1, r25	; 0x01
     fe8:	a2 83       	std	Z+2, r26	; 0x02
     fea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fec:	8e 01       	movw	r16, r28
     fee:	0b 57       	subi	r16, 0x7B	; 123
     ff0:	1f 4f       	sbci	r17, 0xFF	; 255
     ff2:	fe 01       	movw	r30, r28
     ff4:	e7 57       	subi	r30, 0x77	; 119
     ff6:	ff 4f       	sbci	r31, 0xFF	; 255
     ff8:	60 81       	ld	r22, Z
     ffa:	71 81       	ldd	r23, Z+1	; 0x01
     ffc:	82 81       	ldd	r24, Z+2	; 0x02
     ffe:	93 81       	ldd	r25, Z+3	; 0x03
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	4a ef       	ldi	r20, 0xFA	; 250
    1006:	54 e4       	ldi	r21, 0x44	; 68
    1008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	f8 01       	movw	r30, r16
    1012:	80 83       	st	Z, r24
    1014:	91 83       	std	Z+1, r25	; 0x01
    1016:	a2 83       	std	Z+2, r26	; 0x02
    1018:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    101a:	fe 01       	movw	r30, r28
    101c:	eb 57       	subi	r30, 0x7B	; 123
    101e:	ff 4f       	sbci	r31, 0xFF	; 255
    1020:	60 81       	ld	r22, Z
    1022:	71 81       	ldd	r23, Z+1	; 0x01
    1024:	82 81       	ldd	r24, Z+2	; 0x02
    1026:	93 81       	ldd	r25, Z+3	; 0x03
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e8       	ldi	r20, 0x80	; 128
    102e:	5f e3       	ldi	r21, 0x3F	; 63
    1030:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1034:	88 23       	and	r24, r24
    1036:	44 f4       	brge	.+16     	; 0x1048 <LCD_voidInit+0xce>
		__ticks = 1;
    1038:	fe 01       	movw	r30, r28
    103a:	ed 57       	subi	r30, 0x7D	; 125
    103c:	ff 4f       	sbci	r31, 0xFF	; 255
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	91 83       	std	Z+1, r25	; 0x01
    1044:	80 83       	st	Z, r24
    1046:	64 c0       	rjmp	.+200    	; 0x1110 <LCD_voidInit+0x196>
	else if (__tmp > 65535)
    1048:	fe 01       	movw	r30, r28
    104a:	eb 57       	subi	r30, 0x7B	; 123
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	60 81       	ld	r22, Z
    1050:	71 81       	ldd	r23, Z+1	; 0x01
    1052:	82 81       	ldd	r24, Z+2	; 0x02
    1054:	93 81       	ldd	r25, Z+3	; 0x03
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	3f ef       	ldi	r19, 0xFF	; 255
    105a:	4f e7       	ldi	r20, 0x7F	; 127
    105c:	57 e4       	ldi	r21, 0x47	; 71
    105e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1062:	18 16       	cp	r1, r24
    1064:	0c f0       	brlt	.+2      	; 0x1068 <LCD_voidInit+0xee>
    1066:	43 c0       	rjmp	.+134    	; 0x10ee <LCD_voidInit+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1068:	fe 01       	movw	r30, r28
    106a:	e7 57       	subi	r30, 0x77	; 119
    106c:	ff 4f       	sbci	r31, 0xFF	; 255
    106e:	60 81       	ld	r22, Z
    1070:	71 81       	ldd	r23, Z+1	; 0x01
    1072:	82 81       	ldd	r24, Z+2	; 0x02
    1074:	93 81       	ldd	r25, Z+3	; 0x03
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e2       	ldi	r20, 0x20	; 32
    107c:	51 e4       	ldi	r21, 0x41	; 65
    107e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	8e 01       	movw	r16, r28
    1088:	0d 57       	subi	r16, 0x7D	; 125
    108a:	1f 4f       	sbci	r17, 0xFF	; 255
    108c:	bc 01       	movw	r22, r24
    108e:	cd 01       	movw	r24, r26
    1090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	f8 01       	movw	r30, r16
    109a:	91 83       	std	Z+1, r25	; 0x01
    109c:	80 83       	st	Z, r24
    109e:	1f c0       	rjmp	.+62     	; 0x10de <LCD_voidInit+0x164>
    10a0:	fe 01       	movw	r30, r28
    10a2:	ef 57       	subi	r30, 0x7F	; 127
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	88 ec       	ldi	r24, 0xC8	; 200
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	91 83       	std	Z+1, r25	; 0x01
    10ac:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10ae:	fe 01       	movw	r30, r28
    10b0:	ef 57       	subi	r30, 0x7F	; 127
    10b2:	ff 4f       	sbci	r31, 0xFF	; 255
    10b4:	80 81       	ld	r24, Z
    10b6:	91 81       	ldd	r25, Z+1	; 0x01
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	f1 f7       	brne	.-4      	; 0x10b8 <LCD_voidInit+0x13e>
    10bc:	fe 01       	movw	r30, r28
    10be:	ef 57       	subi	r30, 0x7F	; 127
    10c0:	ff 4f       	sbci	r31, 0xFF	; 255
    10c2:	91 83       	std	Z+1, r25	; 0x01
    10c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c6:	de 01       	movw	r26, r28
    10c8:	ad 57       	subi	r26, 0x7D	; 125
    10ca:	bf 4f       	sbci	r27, 0xFF	; 255
    10cc:	fe 01       	movw	r30, r28
    10ce:	ed 57       	subi	r30, 0x7D	; 125
    10d0:	ff 4f       	sbci	r31, 0xFF	; 255
    10d2:	80 81       	ld	r24, Z
    10d4:	91 81       	ldd	r25, Z+1	; 0x01
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	11 96       	adiw	r26, 0x01	; 1
    10da:	9c 93       	st	X, r25
    10dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10de:	fe 01       	movw	r30, r28
    10e0:	ed 57       	subi	r30, 0x7D	; 125
    10e2:	ff 4f       	sbci	r31, 0xFF	; 255
    10e4:	80 81       	ld	r24, Z
    10e6:	91 81       	ldd	r25, Z+1	; 0x01
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	d1 f6       	brne	.-76     	; 0x10a0 <LCD_voidInit+0x126>
    10ec:	27 c0       	rjmp	.+78     	; 0x113c <LCD_voidInit+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ee:	8e 01       	movw	r16, r28
    10f0:	0d 57       	subi	r16, 0x7D	; 125
    10f2:	1f 4f       	sbci	r17, 0xFF	; 255
    10f4:	fe 01       	movw	r30, r28
    10f6:	eb 57       	subi	r30, 0x7B	; 123
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	60 81       	ld	r22, Z
    10fc:	71 81       	ldd	r23, Z+1	; 0x01
    10fe:	82 81       	ldd	r24, Z+2	; 0x02
    1100:	93 81       	ldd	r25, Z+3	; 0x03
    1102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	f8 01       	movw	r30, r16
    110c:	91 83       	std	Z+1, r25	; 0x01
    110e:	80 83       	st	Z, r24
    1110:	de 01       	movw	r26, r28
    1112:	a1 58       	subi	r26, 0x81	; 129
    1114:	bf 4f       	sbci	r27, 0xFF	; 255
    1116:	fe 01       	movw	r30, r28
    1118:	ed 57       	subi	r30, 0x7D	; 125
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	80 81       	ld	r24, Z
    111e:	91 81       	ldd	r25, Z+1	; 0x01
    1120:	8d 93       	st	X+, r24
    1122:	9c 93       	st	X, r25
    1124:	fe 01       	movw	r30, r28
    1126:	e1 58       	subi	r30, 0x81	; 129
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	80 81       	ld	r24, Z
    112c:	91 81       	ldd	r25, Z+1	; 0x01
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	f1 f7       	brne	.-4      	; 0x112e <LCD_voidInit+0x1b4>
    1132:	fe 01       	movw	r30, r28
    1134:	e1 58       	subi	r30, 0x81	; 129
    1136:	ff 4f       	sbci	r31, 0xFF	; 255
    1138:	91 83       	std	Z+1, r25	; 0x01
    113a:	80 83       	st	Z, r24
		{
			/*step 1*/
			_delay_ms(30);

			u8commnad=0b00110000 |lcdarr[u8CntLoc].lcdswconfig.u8font <<2
    113c:	fe 01       	movw	r30, r28
    113e:	e2 57       	subi	r30, 0x72	; 114
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	80 81       	ld	r24, Z
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	c9 01       	movw	r24, r18
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	82 0f       	add	r24, r18
    1150:	93 1f       	adc	r25, r19
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	fc 01       	movw	r30, r24
    115c:	eb 56       	subi	r30, 0x6B	; 107
    115e:	ff 4f       	sbci	r31, 0xFF	; 255
    1160:	80 81       	ld	r24, Z
    1162:	86 95       	lsr	r24
    1164:	86 95       	lsr	r24
    1166:	81 70       	andi	r24, 0x01	; 1
    1168:	88 2f       	mov	r24, r24
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	48 2f       	mov	r20, r24
    1176:	40 63       	ori	r20, 0x30	; 48
    1178:	fe 01       	movw	r30, r28
    117a:	e2 57       	subi	r30, 0x72	; 114
    117c:	ff 4f       	sbci	r31, 0xFF	; 255
    117e:	80 81       	ld	r24, Z
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	c9 01       	movw	r24, r18
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	82 0f       	add	r24, r18
    118c:	93 1f       	adc	r25, r19
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	fc 01       	movw	r30, r24
    1198:	eb 56       	subi	r30, 0x6B	; 107
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	80 81       	ld	r24, Z
    119e:	86 95       	lsr	r24
    11a0:	81 70       	andi	r24, 0x01	; 1
    11a2:	88 2f       	mov	r24, r24
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	84 2b       	or	r24, r20
    11b4:	fe 01       	movw	r30, r28
    11b6:	e3 57       	subi	r30, 0x73	; 115
    11b8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ba:	80 83       	st	Z, r24
					|lcdarr[u8CntLoc].lcdswconfig.u8line<<3 ;
			/* send command */
			voidWriteCmd(u8CntLoc,u8commnad);
    11bc:	fe 01       	movw	r30, r28
    11be:	e2 57       	subi	r30, 0x72	; 114
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	de 01       	movw	r26, r28
    11c4:	a3 57       	subi	r26, 0x73	; 115
    11c6:	bf 4f       	sbci	r27, 0xFF	; 255
    11c8:	80 81       	ld	r24, Z
    11ca:	6c 91       	ld	r22, X
    11cc:	0e 94 05 10 	call	0x200a	; 0x200a <voidWriteCmd>
    11d0:	fe 01       	movw	r30, r28
    11d2:	e5 58       	subi	r30, 0x85	; 133
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	a0 e8       	ldi	r26, 0x80	; 128
    11dc:	bf e3       	ldi	r27, 0x3F	; 63
    11de:	80 83       	st	Z, r24
    11e0:	91 83       	std	Z+1, r25	; 0x01
    11e2:	a2 83       	std	Z+2, r26	; 0x02
    11e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e6:	8e 01       	movw	r16, r28
    11e8:	09 58       	subi	r16, 0x89	; 137
    11ea:	1f 4f       	sbci	r17, 0xFF	; 255
    11ec:	fe 01       	movw	r30, r28
    11ee:	e5 58       	subi	r30, 0x85	; 133
    11f0:	ff 4f       	sbci	r31, 0xFF	; 255
    11f2:	60 81       	ld	r22, Z
    11f4:	71 81       	ldd	r23, Z+1	; 0x01
    11f6:	82 81       	ldd	r24, Z+2	; 0x02
    11f8:	93 81       	ldd	r25, Z+3	; 0x03
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	4a ef       	ldi	r20, 0xFA	; 250
    1200:	54 e4       	ldi	r21, 0x44	; 68
    1202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	f8 01       	movw	r30, r16
    120c:	80 83       	st	Z, r24
    120e:	91 83       	std	Z+1, r25	; 0x01
    1210:	a2 83       	std	Z+2, r26	; 0x02
    1212:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1214:	fe 01       	movw	r30, r28
    1216:	e9 58       	subi	r30, 0x89	; 137
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	60 81       	ld	r22, Z
    121c:	71 81       	ldd	r23, Z+1	; 0x01
    121e:	82 81       	ldd	r24, Z+2	; 0x02
    1220:	93 81       	ldd	r25, Z+3	; 0x03
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	40 e8       	ldi	r20, 0x80	; 128
    1228:	5f e3       	ldi	r21, 0x3F	; 63
    122a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    122e:	88 23       	and	r24, r24
    1230:	44 f4       	brge	.+16     	; 0x1242 <LCD_voidInit+0x2c8>
		__ticks = 1;
    1232:	fe 01       	movw	r30, r28
    1234:	eb 58       	subi	r30, 0x8B	; 139
    1236:	ff 4f       	sbci	r31, 0xFF	; 255
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	91 83       	std	Z+1, r25	; 0x01
    123e:	80 83       	st	Z, r24
    1240:	64 c0       	rjmp	.+200    	; 0x130a <LCD_voidInit+0x390>
	else if (__tmp > 65535)
    1242:	fe 01       	movw	r30, r28
    1244:	e9 58       	subi	r30, 0x89	; 137
    1246:	ff 4f       	sbci	r31, 0xFF	; 255
    1248:	60 81       	ld	r22, Z
    124a:	71 81       	ldd	r23, Z+1	; 0x01
    124c:	82 81       	ldd	r24, Z+2	; 0x02
    124e:	93 81       	ldd	r25, Z+3	; 0x03
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	3f ef       	ldi	r19, 0xFF	; 255
    1254:	4f e7       	ldi	r20, 0x7F	; 127
    1256:	57 e4       	ldi	r21, 0x47	; 71
    1258:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    125c:	18 16       	cp	r1, r24
    125e:	0c f0       	brlt	.+2      	; 0x1262 <LCD_voidInit+0x2e8>
    1260:	43 c0       	rjmp	.+134    	; 0x12e8 <LCD_voidInit+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1262:	fe 01       	movw	r30, r28
    1264:	e5 58       	subi	r30, 0x85	; 133
    1266:	ff 4f       	sbci	r31, 0xFF	; 255
    1268:	60 81       	ld	r22, Z
    126a:	71 81       	ldd	r23, Z+1	; 0x01
    126c:	82 81       	ldd	r24, Z+2	; 0x02
    126e:	93 81       	ldd	r25, Z+3	; 0x03
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	40 e2       	ldi	r20, 0x20	; 32
    1276:	51 e4       	ldi	r21, 0x41	; 65
    1278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	8e 01       	movw	r16, r28
    1282:	0b 58       	subi	r16, 0x8B	; 139
    1284:	1f 4f       	sbci	r17, 0xFF	; 255
    1286:	bc 01       	movw	r22, r24
    1288:	cd 01       	movw	r24, r26
    128a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	f8 01       	movw	r30, r16
    1294:	91 83       	std	Z+1, r25	; 0x01
    1296:	80 83       	st	Z, r24
    1298:	1f c0       	rjmp	.+62     	; 0x12d8 <LCD_voidInit+0x35e>
    129a:	fe 01       	movw	r30, r28
    129c:	ed 58       	subi	r30, 0x8D	; 141
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	88 ec       	ldi	r24, 0xC8	; 200
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	91 83       	std	Z+1, r25	; 0x01
    12a6:	80 83       	st	Z, r24
    12a8:	fe 01       	movw	r30, r28
    12aa:	ed 58       	subi	r30, 0x8D	; 141
    12ac:	ff 4f       	sbci	r31, 0xFF	; 255
    12ae:	80 81       	ld	r24, Z
    12b0:	91 81       	ldd	r25, Z+1	; 0x01
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	f1 f7       	brne	.-4      	; 0x12b2 <LCD_voidInit+0x338>
    12b6:	fe 01       	movw	r30, r28
    12b8:	ed 58       	subi	r30, 0x8D	; 141
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	91 83       	std	Z+1, r25	; 0x01
    12be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c0:	de 01       	movw	r26, r28
    12c2:	ab 58       	subi	r26, 0x8B	; 139
    12c4:	bf 4f       	sbci	r27, 0xFF	; 255
    12c6:	fe 01       	movw	r30, r28
    12c8:	eb 58       	subi	r30, 0x8B	; 139
    12ca:	ff 4f       	sbci	r31, 0xFF	; 255
    12cc:	80 81       	ld	r24, Z
    12ce:	91 81       	ldd	r25, Z+1	; 0x01
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	11 96       	adiw	r26, 0x01	; 1
    12d4:	9c 93       	st	X, r25
    12d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d8:	fe 01       	movw	r30, r28
    12da:	eb 58       	subi	r30, 0x8B	; 139
    12dc:	ff 4f       	sbci	r31, 0xFF	; 255
    12de:	80 81       	ld	r24, Z
    12e0:	91 81       	ldd	r25, Z+1	; 0x01
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	d1 f6       	brne	.-76     	; 0x129a <LCD_voidInit+0x320>
    12e6:	27 c0       	rjmp	.+78     	; 0x1336 <LCD_voidInit+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e8:	8e 01       	movw	r16, r28
    12ea:	0b 58       	subi	r16, 0x8B	; 139
    12ec:	1f 4f       	sbci	r17, 0xFF	; 255
    12ee:	fe 01       	movw	r30, r28
    12f0:	e9 58       	subi	r30, 0x89	; 137
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	60 81       	ld	r22, Z
    12f6:	71 81       	ldd	r23, Z+1	; 0x01
    12f8:	82 81       	ldd	r24, Z+2	; 0x02
    12fa:	93 81       	ldd	r25, Z+3	; 0x03
    12fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	f8 01       	movw	r30, r16
    1306:	91 83       	std	Z+1, r25	; 0x01
    1308:	80 83       	st	Z, r24
    130a:	de 01       	movw	r26, r28
    130c:	af 58       	subi	r26, 0x8F	; 143
    130e:	bf 4f       	sbci	r27, 0xFF	; 255
    1310:	fe 01       	movw	r30, r28
    1312:	eb 58       	subi	r30, 0x8B	; 139
    1314:	ff 4f       	sbci	r31, 0xFF	; 255
    1316:	80 81       	ld	r24, Z
    1318:	91 81       	ldd	r25, Z+1	; 0x01
    131a:	8d 93       	st	X+, r24
    131c:	9c 93       	st	X, r25
    131e:	fe 01       	movw	r30, r28
    1320:	ef 58       	subi	r30, 0x8F	; 143
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	80 81       	ld	r24, Z
    1326:	91 81       	ldd	r25, Z+1	; 0x01
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	f1 f7       	brne	.-4      	; 0x1328 <LCD_voidInit+0x3ae>
    132c:	fe 01       	movw	r30, r28
    132e:	ef 58       	subi	r30, 0x8F	; 143
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	91 83       	std	Z+1, r25	; 0x01
    1334:	80 83       	st	Z, r24
			/*more than 39 micro*/
			_delay_ms(1);
			u8commnad=0b00001000 |lcdarr[u8CntLoc].lcdswconfig.u8display<<2 |
    1336:	fe 01       	movw	r30, r28
    1338:	e2 57       	subi	r30, 0x72	; 114
    133a:	ff 4f       	sbci	r31, 0xFF	; 255
    133c:	80 81       	ld	r24, Z
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	c9 01       	movw	r24, r18
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	82 0f       	add	r24, r18
    134a:	93 1f       	adc	r25, r19
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	fc 01       	movw	r30, r24
    1356:	eb 56       	subi	r30, 0x6B	; 107
    1358:	ff 4f       	sbci	r31, 0xFF	; 255
    135a:	80 81       	ld	r24, Z
    135c:	82 95       	swap	r24
    135e:	86 95       	lsr	r24
    1360:	86 95       	lsr	r24
    1362:	83 70       	andi	r24, 0x03	; 3
    1364:	81 70       	andi	r24, 0x01	; 1
    1366:	88 2f       	mov	r24, r24
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	48 2f       	mov	r20, r24
    1374:	48 60       	ori	r20, 0x08	; 8
    1376:	fe 01       	movw	r30, r28
    1378:	e2 57       	subi	r30, 0x72	; 114
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	80 81       	ld	r24, Z
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	c9 01       	movw	r24, r18
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	82 0f       	add	r24, r18
    138a:	93 1f       	adc	r25, r19
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	fc 01       	movw	r30, r24
    1396:	eb 56       	subi	r30, 0x6B	; 107
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	80 81       	ld	r24, Z
    139c:	86 95       	lsr	r24
    139e:	86 95       	lsr	r24
    13a0:	86 95       	lsr	r24
    13a2:	81 70       	andi	r24, 0x01	; 1
    13a4:	88 2f       	mov	r24, r24
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	48 2b       	or	r20, r24
    13ae:	fe 01       	movw	r30, r28
    13b0:	e2 57       	subi	r30, 0x72	; 114
    13b2:	ff 4f       	sbci	r31, 0xFF	; 255
    13b4:	80 81       	ld	r24, Z
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	c9 01       	movw	r24, r18
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	82 0f       	add	r24, r18
    13c2:	93 1f       	adc	r25, r19
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	fc 01       	movw	r30, r24
    13ce:	eb 56       	subi	r30, 0x6B	; 107
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	80 81       	ld	r24, Z
    13d4:	82 95       	swap	r24
    13d6:	8f 70       	andi	r24, 0x0F	; 15
    13d8:	81 70       	andi	r24, 0x01	; 1
    13da:	84 2b       	or	r24, r20
    13dc:	fe 01       	movw	r30, r28
    13de:	e3 57       	subi	r30, 0x73	; 115
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	80 83       	st	Z, r24
									lcdarr[u8CntLoc].lcdswconfig.u8coursorstate<<1 |
									lcdarr[u8CntLoc].lcdswconfig.u8coursorblink<<0 ;

			voidWriteCmd(u8CntLoc,u8commnad);
    13e4:	fe 01       	movw	r30, r28
    13e6:	e2 57       	subi	r30, 0x72	; 114
    13e8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ea:	de 01       	movw	r26, r28
    13ec:	a3 57       	subi	r26, 0x73	; 115
    13ee:	bf 4f       	sbci	r27, 0xFF	; 255
    13f0:	80 81       	ld	r24, Z
    13f2:	6c 91       	ld	r22, X
    13f4:	0e 94 05 10 	call	0x200a	; 0x200a <voidWriteCmd>
    13f8:	fe 01       	movw	r30, r28
    13fa:	e3 59       	subi	r30, 0x93	; 147
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	a0 e8       	ldi	r26, 0x80	; 128
    1404:	bf e3       	ldi	r27, 0x3F	; 63
    1406:	80 83       	st	Z, r24
    1408:	91 83       	std	Z+1, r25	; 0x01
    140a:	a2 83       	std	Z+2, r26	; 0x02
    140c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140e:	8e 01       	movw	r16, r28
    1410:	07 59       	subi	r16, 0x97	; 151
    1412:	1f 4f       	sbci	r17, 0xFF	; 255
    1414:	fe 01       	movw	r30, r28
    1416:	e3 59       	subi	r30, 0x93	; 147
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	60 81       	ld	r22, Z
    141c:	71 81       	ldd	r23, Z+1	; 0x01
    141e:	82 81       	ldd	r24, Z+2	; 0x02
    1420:	93 81       	ldd	r25, Z+3	; 0x03
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	4a ef       	ldi	r20, 0xFA	; 250
    1428:	54 e4       	ldi	r21, 0x44	; 68
    142a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	f8 01       	movw	r30, r16
    1434:	80 83       	st	Z, r24
    1436:	91 83       	std	Z+1, r25	; 0x01
    1438:	a2 83       	std	Z+2, r26	; 0x02
    143a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    143c:	fe 01       	movw	r30, r28
    143e:	e7 59       	subi	r30, 0x97	; 151
    1440:	ff 4f       	sbci	r31, 0xFF	; 255
    1442:	60 81       	ld	r22, Z
    1444:	71 81       	ldd	r23, Z+1	; 0x01
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	93 81       	ldd	r25, Z+3	; 0x03
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e8       	ldi	r20, 0x80	; 128
    1450:	5f e3       	ldi	r21, 0x3F	; 63
    1452:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1456:	88 23       	and	r24, r24
    1458:	44 f4       	brge	.+16     	; 0x146a <LCD_voidInit+0x4f0>
		__ticks = 1;
    145a:	fe 01       	movw	r30, r28
    145c:	e9 59       	subi	r30, 0x99	; 153
    145e:	ff 4f       	sbci	r31, 0xFF	; 255
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	91 83       	std	Z+1, r25	; 0x01
    1466:	80 83       	st	Z, r24
    1468:	64 c0       	rjmp	.+200    	; 0x1532 <LCD_voidInit+0x5b8>
	else if (__tmp > 65535)
    146a:	fe 01       	movw	r30, r28
    146c:	e7 59       	subi	r30, 0x97	; 151
    146e:	ff 4f       	sbci	r31, 0xFF	; 255
    1470:	60 81       	ld	r22, Z
    1472:	71 81       	ldd	r23, Z+1	; 0x01
    1474:	82 81       	ldd	r24, Z+2	; 0x02
    1476:	93 81       	ldd	r25, Z+3	; 0x03
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	3f ef       	ldi	r19, 0xFF	; 255
    147c:	4f e7       	ldi	r20, 0x7F	; 127
    147e:	57 e4       	ldi	r21, 0x47	; 71
    1480:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1484:	18 16       	cp	r1, r24
    1486:	0c f0       	brlt	.+2      	; 0x148a <LCD_voidInit+0x510>
    1488:	43 c0       	rjmp	.+134    	; 0x1510 <LCD_voidInit+0x596>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148a:	fe 01       	movw	r30, r28
    148c:	e3 59       	subi	r30, 0x93	; 147
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	60 81       	ld	r22, Z
    1492:	71 81       	ldd	r23, Z+1	; 0x01
    1494:	82 81       	ldd	r24, Z+2	; 0x02
    1496:	93 81       	ldd	r25, Z+3	; 0x03
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e2       	ldi	r20, 0x20	; 32
    149e:	51 e4       	ldi	r21, 0x41	; 65
    14a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	8e 01       	movw	r16, r28
    14aa:	09 59       	subi	r16, 0x99	; 153
    14ac:	1f 4f       	sbci	r17, 0xFF	; 255
    14ae:	bc 01       	movw	r22, r24
    14b0:	cd 01       	movw	r24, r26
    14b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	f8 01       	movw	r30, r16
    14bc:	91 83       	std	Z+1, r25	; 0x01
    14be:	80 83       	st	Z, r24
    14c0:	1f c0       	rjmp	.+62     	; 0x1500 <LCD_voidInit+0x586>
    14c2:	fe 01       	movw	r30, r28
    14c4:	eb 59       	subi	r30, 0x9B	; 155
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	88 ec       	ldi	r24, 0xC8	; 200
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	91 83       	std	Z+1, r25	; 0x01
    14ce:	80 83       	st	Z, r24
    14d0:	fe 01       	movw	r30, r28
    14d2:	eb 59       	subi	r30, 0x9B	; 155
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	80 81       	ld	r24, Z
    14d8:	91 81       	ldd	r25, Z+1	; 0x01
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	f1 f7       	brne	.-4      	; 0x14da <LCD_voidInit+0x560>
    14de:	fe 01       	movw	r30, r28
    14e0:	eb 59       	subi	r30, 0x9B	; 155
    14e2:	ff 4f       	sbci	r31, 0xFF	; 255
    14e4:	91 83       	std	Z+1, r25	; 0x01
    14e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e8:	de 01       	movw	r26, r28
    14ea:	a9 59       	subi	r26, 0x99	; 153
    14ec:	bf 4f       	sbci	r27, 0xFF	; 255
    14ee:	fe 01       	movw	r30, r28
    14f0:	e9 59       	subi	r30, 0x99	; 153
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	80 81       	ld	r24, Z
    14f6:	91 81       	ldd	r25, Z+1	; 0x01
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	11 96       	adiw	r26, 0x01	; 1
    14fc:	9c 93       	st	X, r25
    14fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1500:	fe 01       	movw	r30, r28
    1502:	e9 59       	subi	r30, 0x99	; 153
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	80 81       	ld	r24, Z
    1508:	91 81       	ldd	r25, Z+1	; 0x01
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	d1 f6       	brne	.-76     	; 0x14c2 <LCD_voidInit+0x548>
    150e:	27 c0       	rjmp	.+78     	; 0x155e <LCD_voidInit+0x5e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1510:	8e 01       	movw	r16, r28
    1512:	09 59       	subi	r16, 0x99	; 153
    1514:	1f 4f       	sbci	r17, 0xFF	; 255
    1516:	fe 01       	movw	r30, r28
    1518:	e7 59       	subi	r30, 0x97	; 151
    151a:	ff 4f       	sbci	r31, 0xFF	; 255
    151c:	60 81       	ld	r22, Z
    151e:	71 81       	ldd	r23, Z+1	; 0x01
    1520:	82 81       	ldd	r24, Z+2	; 0x02
    1522:	93 81       	ldd	r25, Z+3	; 0x03
    1524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	f8 01       	movw	r30, r16
    152e:	91 83       	std	Z+1, r25	; 0x01
    1530:	80 83       	st	Z, r24
    1532:	de 01       	movw	r26, r28
    1534:	ad 59       	subi	r26, 0x9D	; 157
    1536:	bf 4f       	sbci	r27, 0xFF	; 255
    1538:	fe 01       	movw	r30, r28
    153a:	e9 59       	subi	r30, 0x99	; 153
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	80 81       	ld	r24, Z
    1540:	91 81       	ldd	r25, Z+1	; 0x01
    1542:	8d 93       	st	X+, r24
    1544:	9c 93       	st	X, r25
    1546:	fe 01       	movw	r30, r28
    1548:	ed 59       	subi	r30, 0x9D	; 157
    154a:	ff 4f       	sbci	r31, 0xFF	; 255
    154c:	80 81       	ld	r24, Z
    154e:	91 81       	ldd	r25, Z+1	; 0x01
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	f1 f7       	brne	.-4      	; 0x1550 <LCD_voidInit+0x5d6>
    1554:	fe 01       	movw	r30, r28
    1556:	ed 59       	subi	r30, 0x9D	; 157
    1558:	ff 4f       	sbci	r31, 0xFF	; 255
    155a:	91 83       	std	Z+1, r25	; 0x01
    155c:	80 83       	st	Z, r24
			_delay_ms(1);
			voidWriteCmd(u8CntLoc,0x01);
    155e:	fe 01       	movw	r30, r28
    1560:	e2 57       	subi	r30, 0x72	; 114
    1562:	ff 4f       	sbci	r31, 0xFF	; 255
    1564:	80 81       	ld	r24, Z
    1566:	61 e0       	ldi	r22, 0x01	; 1
    1568:	0e 94 05 10 	call	0x200a	; 0x200a <voidWriteCmd>
    156c:	fe 01       	movw	r30, r28
    156e:	e1 5a       	subi	r30, 0xA1	; 161
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	a0 e4       	ldi	r26, 0x40	; 64
    1578:	b0 e4       	ldi	r27, 0x40	; 64
    157a:	80 83       	st	Z, r24
    157c:	91 83       	std	Z+1, r25	; 0x01
    157e:	a2 83       	std	Z+2, r26	; 0x02
    1580:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1582:	8e 01       	movw	r16, r28
    1584:	05 5a       	subi	r16, 0xA5	; 165
    1586:	1f 4f       	sbci	r17, 0xFF	; 255
    1588:	fe 01       	movw	r30, r28
    158a:	e1 5a       	subi	r30, 0xA1	; 161
    158c:	ff 4f       	sbci	r31, 0xFF	; 255
    158e:	60 81       	ld	r22, Z
    1590:	71 81       	ldd	r23, Z+1	; 0x01
    1592:	82 81       	ldd	r24, Z+2	; 0x02
    1594:	93 81       	ldd	r25, Z+3	; 0x03
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	4a ef       	ldi	r20, 0xFA	; 250
    159c:	54 e4       	ldi	r21, 0x44	; 68
    159e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	f8 01       	movw	r30, r16
    15a8:	80 83       	st	Z, r24
    15aa:	91 83       	std	Z+1, r25	; 0x01
    15ac:	a2 83       	std	Z+2, r26	; 0x02
    15ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15b0:	fe 01       	movw	r30, r28
    15b2:	e5 5a       	subi	r30, 0xA5	; 165
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	60 81       	ld	r22, Z
    15b8:	71 81       	ldd	r23, Z+1	; 0x01
    15ba:	82 81       	ldd	r24, Z+2	; 0x02
    15bc:	93 81       	ldd	r25, Z+3	; 0x03
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	40 e8       	ldi	r20, 0x80	; 128
    15c4:	5f e3       	ldi	r21, 0x3F	; 63
    15c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ca:	88 23       	and	r24, r24
    15cc:	44 f4       	brge	.+16     	; 0x15de <LCD_voidInit+0x664>
		__ticks = 1;
    15ce:	fe 01       	movw	r30, r28
    15d0:	e7 5a       	subi	r30, 0xA7	; 167
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	91 83       	std	Z+1, r25	; 0x01
    15da:	80 83       	st	Z, r24
    15dc:	64 c0       	rjmp	.+200    	; 0x16a6 <LCD_voidInit+0x72c>
	else if (__tmp > 65535)
    15de:	fe 01       	movw	r30, r28
    15e0:	e5 5a       	subi	r30, 0xA5	; 165
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	82 81       	ldd	r24, Z+2	; 0x02
    15ea:	93 81       	ldd	r25, Z+3	; 0x03
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	3f ef       	ldi	r19, 0xFF	; 255
    15f0:	4f e7       	ldi	r20, 0x7F	; 127
    15f2:	57 e4       	ldi	r21, 0x47	; 71
    15f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15f8:	18 16       	cp	r1, r24
    15fa:	0c f0       	brlt	.+2      	; 0x15fe <LCD_voidInit+0x684>
    15fc:	43 c0       	rjmp	.+134    	; 0x1684 <LCD_voidInit+0x70a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fe:	fe 01       	movw	r30, r28
    1600:	e1 5a       	subi	r30, 0xA1	; 161
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	60 81       	ld	r22, Z
    1606:	71 81       	ldd	r23, Z+1	; 0x01
    1608:	82 81       	ldd	r24, Z+2	; 0x02
    160a:	93 81       	ldd	r25, Z+3	; 0x03
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	40 e2       	ldi	r20, 0x20	; 32
    1612:	51 e4       	ldi	r21, 0x41	; 65
    1614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	8e 01       	movw	r16, r28
    161e:	07 5a       	subi	r16, 0xA7	; 167
    1620:	1f 4f       	sbci	r17, 0xFF	; 255
    1622:	bc 01       	movw	r22, r24
    1624:	cd 01       	movw	r24, r26
    1626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	f8 01       	movw	r30, r16
    1630:	91 83       	std	Z+1, r25	; 0x01
    1632:	80 83       	st	Z, r24
    1634:	1f c0       	rjmp	.+62     	; 0x1674 <LCD_voidInit+0x6fa>
    1636:	fe 01       	movw	r30, r28
    1638:	e9 5a       	subi	r30, 0xA9	; 169
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	88 ec       	ldi	r24, 0xC8	; 200
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	91 83       	std	Z+1, r25	; 0x01
    1642:	80 83       	st	Z, r24
    1644:	fe 01       	movw	r30, r28
    1646:	e9 5a       	subi	r30, 0xA9	; 169
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	80 81       	ld	r24, Z
    164c:	91 81       	ldd	r25, Z+1	; 0x01
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	f1 f7       	brne	.-4      	; 0x164e <LCD_voidInit+0x6d4>
    1652:	fe 01       	movw	r30, r28
    1654:	e9 5a       	subi	r30, 0xA9	; 169
    1656:	ff 4f       	sbci	r31, 0xFF	; 255
    1658:	91 83       	std	Z+1, r25	; 0x01
    165a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165c:	de 01       	movw	r26, r28
    165e:	a7 5a       	subi	r26, 0xA7	; 167
    1660:	bf 4f       	sbci	r27, 0xFF	; 255
    1662:	fe 01       	movw	r30, r28
    1664:	e7 5a       	subi	r30, 0xA7	; 167
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	80 81       	ld	r24, Z
    166a:	91 81       	ldd	r25, Z+1	; 0x01
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	11 96       	adiw	r26, 0x01	; 1
    1670:	9c 93       	st	X, r25
    1672:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1674:	fe 01       	movw	r30, r28
    1676:	e7 5a       	subi	r30, 0xA7	; 167
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	80 81       	ld	r24, Z
    167c:	91 81       	ldd	r25, Z+1	; 0x01
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	d1 f6       	brne	.-76     	; 0x1636 <LCD_voidInit+0x6bc>
    1682:	27 c0       	rjmp	.+78     	; 0x16d2 <LCD_voidInit+0x758>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1684:	8e 01       	movw	r16, r28
    1686:	07 5a       	subi	r16, 0xA7	; 167
    1688:	1f 4f       	sbci	r17, 0xFF	; 255
    168a:	fe 01       	movw	r30, r28
    168c:	e5 5a       	subi	r30, 0xA5	; 165
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	60 81       	ld	r22, Z
    1692:	71 81       	ldd	r23, Z+1	; 0x01
    1694:	82 81       	ldd	r24, Z+2	; 0x02
    1696:	93 81       	ldd	r25, Z+3	; 0x03
    1698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	f8 01       	movw	r30, r16
    16a2:	91 83       	std	Z+1, r25	; 0x01
    16a4:	80 83       	st	Z, r24
    16a6:	de 01       	movw	r26, r28
    16a8:	ab 5a       	subi	r26, 0xAB	; 171
    16aa:	bf 4f       	sbci	r27, 0xFF	; 255
    16ac:	fe 01       	movw	r30, r28
    16ae:	e7 5a       	subi	r30, 0xA7	; 167
    16b0:	ff 4f       	sbci	r31, 0xFF	; 255
    16b2:	80 81       	ld	r24, Z
    16b4:	91 81       	ldd	r25, Z+1	; 0x01
    16b6:	8d 93       	st	X+, r24
    16b8:	9c 93       	st	X, r25
    16ba:	fe 01       	movw	r30, r28
    16bc:	eb 5a       	subi	r30, 0xAB	; 171
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	80 81       	ld	r24, Z
    16c2:	91 81       	ldd	r25, Z+1	; 0x01
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	f1 f7       	brne	.-4      	; 0x16c4 <LCD_voidInit+0x74a>
    16c8:	fe 01       	movw	r30, r28
    16ca:	eb 5a       	subi	r30, 0xAB	; 171
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	91 83       	std	Z+1, r25	; 0x01
    16d0:	80 83       	st	Z, r24
			_delay_ms(3);
			u8commnad=0b00000100 | lcdarr[u8CntLoc].lcdswconfig.u8direction<<1 |
    16d2:	fe 01       	movw	r30, r28
    16d4:	e2 57       	subi	r30, 0x72	; 114
    16d6:	ff 4f       	sbci	r31, 0xFF	; 255
    16d8:	80 81       	ld	r24, Z
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	c9 01       	movw	r24, r18
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	82 0f       	add	r24, r18
    16e6:	93 1f       	adc	r25, r19
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	fc 01       	movw	r30, r24
    16f2:	eb 56       	subi	r30, 0x6B	; 107
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	80 81       	ld	r24, Z
    16f8:	88 1f       	adc	r24, r24
    16fa:	88 27       	eor	r24, r24
    16fc:	88 1f       	adc	r24, r24
    16fe:	88 2f       	mov	r24, r24
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	48 2f       	mov	r20, r24
    1708:	44 60       	ori	r20, 0x04	; 4
    170a:	fe 01       	movw	r30, r28
    170c:	e2 57       	subi	r30, 0x72	; 114
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	80 81       	ld	r24, Z
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	c9 01       	movw	r24, r18
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	82 0f       	add	r24, r18
    171e:	93 1f       	adc	r25, r19
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	fc 01       	movw	r30, r24
    172a:	eb 56       	subi	r30, 0x6B	; 107
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	80 81       	ld	r24, Z
    1730:	82 95       	swap	r24
    1732:	86 95       	lsr	r24
    1734:	87 70       	andi	r24, 0x07	; 7
    1736:	81 70       	andi	r24, 0x01	; 1
    1738:	84 2b       	or	r24, r20
    173a:	fe 01       	movw	r30, r28
    173c:	e3 57       	subi	r30, 0x73	; 115
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	80 83       	st	Z, r24

								lcdarr[u8CntLoc].lcdswconfig.u8shift<<0;


			voidWriteCmd(u8CntLoc,u8commnad);
    1742:	fe 01       	movw	r30, r28
    1744:	e2 57       	subi	r30, 0x72	; 114
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	de 01       	movw	r26, r28
    174a:	a3 57       	subi	r26, 0x73	; 115
    174c:	bf 4f       	sbci	r27, 0xFF	; 255
    174e:	80 81       	ld	r24, Z
    1750:	6c 91       	ld	r22, X
    1752:	0e 94 05 10 	call	0x200a	; 0x200a <voidWriteCmd>
    1756:	fe 01       	movw	r30, r28
    1758:	ef 5a       	subi	r30, 0xAF	; 175
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	a0 e4       	ldi	r26, 0x40	; 64
    1762:	b0 e4       	ldi	r27, 0x40	; 64
    1764:	80 83       	st	Z, r24
    1766:	91 83       	std	Z+1, r25	; 0x01
    1768:	a2 83       	std	Z+2, r26	; 0x02
    176a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    176c:	8e 01       	movw	r16, r28
    176e:	03 5b       	subi	r16, 0xB3	; 179
    1770:	1f 4f       	sbci	r17, 0xFF	; 255
    1772:	fe 01       	movw	r30, r28
    1774:	ef 5a       	subi	r30, 0xAF	; 175
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	60 81       	ld	r22, Z
    177a:	71 81       	ldd	r23, Z+1	; 0x01
    177c:	82 81       	ldd	r24, Z+2	; 0x02
    177e:	93 81       	ldd	r25, Z+3	; 0x03
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	4a ef       	ldi	r20, 0xFA	; 250
    1786:	54 e4       	ldi	r21, 0x44	; 68
    1788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	f8 01       	movw	r30, r16
    1792:	80 83       	st	Z, r24
    1794:	91 83       	std	Z+1, r25	; 0x01
    1796:	a2 83       	std	Z+2, r26	; 0x02
    1798:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    179a:	fe 01       	movw	r30, r28
    179c:	e3 5b       	subi	r30, 0xB3	; 179
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	60 81       	ld	r22, Z
    17a2:	71 81       	ldd	r23, Z+1	; 0x01
    17a4:	82 81       	ldd	r24, Z+2	; 0x02
    17a6:	93 81       	ldd	r25, Z+3	; 0x03
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e8       	ldi	r20, 0x80	; 128
    17ae:	5f e3       	ldi	r21, 0x3F	; 63
    17b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b4:	88 23       	and	r24, r24
    17b6:	44 f4       	brge	.+16     	; 0x17c8 <LCD_voidInit+0x84e>
		__ticks = 1;
    17b8:	fe 01       	movw	r30, r28
    17ba:	e5 5b       	subi	r30, 0xB5	; 181
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	91 83       	std	Z+1, r25	; 0x01
    17c4:	80 83       	st	Z, r24
    17c6:	64 c0       	rjmp	.+200    	; 0x1890 <LCD_voidInit+0x916>
	else if (__tmp > 65535)
    17c8:	fe 01       	movw	r30, r28
    17ca:	e3 5b       	subi	r30, 0xB3	; 179
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	60 81       	ld	r22, Z
    17d0:	71 81       	ldd	r23, Z+1	; 0x01
    17d2:	82 81       	ldd	r24, Z+2	; 0x02
    17d4:	93 81       	ldd	r25, Z+3	; 0x03
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	3f ef       	ldi	r19, 0xFF	; 255
    17da:	4f e7       	ldi	r20, 0x7F	; 127
    17dc:	57 e4       	ldi	r21, 0x47	; 71
    17de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e2:	18 16       	cp	r1, r24
    17e4:	0c f0       	brlt	.+2      	; 0x17e8 <LCD_voidInit+0x86e>
    17e6:	43 c0       	rjmp	.+134    	; 0x186e <LCD_voidInit+0x8f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e8:	fe 01       	movw	r30, r28
    17ea:	ef 5a       	subi	r30, 0xAF	; 175
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	60 81       	ld	r22, Z
    17f0:	71 81       	ldd	r23, Z+1	; 0x01
    17f2:	82 81       	ldd	r24, Z+2	; 0x02
    17f4:	93 81       	ldd	r25, Z+3	; 0x03
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e2       	ldi	r20, 0x20	; 32
    17fc:	51 e4       	ldi	r21, 0x41	; 65
    17fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	8e 01       	movw	r16, r28
    1808:	05 5b       	subi	r16, 0xB5	; 181
    180a:	1f 4f       	sbci	r17, 0xFF	; 255
    180c:	bc 01       	movw	r22, r24
    180e:	cd 01       	movw	r24, r26
    1810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	f8 01       	movw	r30, r16
    181a:	91 83       	std	Z+1, r25	; 0x01
    181c:	80 83       	st	Z, r24
    181e:	1f c0       	rjmp	.+62     	; 0x185e <LCD_voidInit+0x8e4>
    1820:	fe 01       	movw	r30, r28
    1822:	e7 5b       	subi	r30, 0xB7	; 183
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	88 ec       	ldi	r24, 0xC8	; 200
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	80 83       	st	Z, r24
    182e:	fe 01       	movw	r30, r28
    1830:	e7 5b       	subi	r30, 0xB7	; 183
    1832:	ff 4f       	sbci	r31, 0xFF	; 255
    1834:	80 81       	ld	r24, Z
    1836:	91 81       	ldd	r25, Z+1	; 0x01
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	f1 f7       	brne	.-4      	; 0x1838 <LCD_voidInit+0x8be>
    183c:	fe 01       	movw	r30, r28
    183e:	e7 5b       	subi	r30, 0xB7	; 183
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	91 83       	std	Z+1, r25	; 0x01
    1844:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1846:	de 01       	movw	r26, r28
    1848:	a5 5b       	subi	r26, 0xB5	; 181
    184a:	bf 4f       	sbci	r27, 0xFF	; 255
    184c:	fe 01       	movw	r30, r28
    184e:	e5 5b       	subi	r30, 0xB5	; 181
    1850:	ff 4f       	sbci	r31, 0xFF	; 255
    1852:	80 81       	ld	r24, Z
    1854:	91 81       	ldd	r25, Z+1	; 0x01
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	11 96       	adiw	r26, 0x01	; 1
    185a:	9c 93       	st	X, r25
    185c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185e:	fe 01       	movw	r30, r28
    1860:	e5 5b       	subi	r30, 0xB5	; 181
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	80 81       	ld	r24, Z
    1866:	91 81       	ldd	r25, Z+1	; 0x01
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	d1 f6       	brne	.-76     	; 0x1820 <LCD_voidInit+0x8a6>
    186c:	b1 c3       	rjmp	.+1890   	; 0x1fd0 <LCD_voidInit+0x1056>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186e:	8e 01       	movw	r16, r28
    1870:	05 5b       	subi	r16, 0xB5	; 181
    1872:	1f 4f       	sbci	r17, 0xFF	; 255
    1874:	fe 01       	movw	r30, r28
    1876:	e3 5b       	subi	r30, 0xB3	; 179
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	60 81       	ld	r22, Z
    187c:	71 81       	ldd	r23, Z+1	; 0x01
    187e:	82 81       	ldd	r24, Z+2	; 0x02
    1880:	93 81       	ldd	r25, Z+3	; 0x03
    1882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	f8 01       	movw	r30, r16
    188c:	91 83       	std	Z+1, r25	; 0x01
    188e:	80 83       	st	Z, r24
    1890:	de 01       	movw	r26, r28
    1892:	a9 5b       	subi	r26, 0xB9	; 185
    1894:	bf 4f       	sbci	r27, 0xFF	; 255
    1896:	fe 01       	movw	r30, r28
    1898:	e5 5b       	subi	r30, 0xB5	; 181
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	80 81       	ld	r24, Z
    189e:	91 81       	ldd	r25, Z+1	; 0x01
    18a0:	11 96       	adiw	r26, 0x01	; 1
    18a2:	9c 93       	st	X, r25
    18a4:	8e 93       	st	-X, r24
    18a6:	fe 01       	movw	r30, r28
    18a8:	e9 5b       	subi	r30, 0xB9	; 185
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	80 81       	ld	r24, Z
    18ae:	91 81       	ldd	r25, Z+1	; 0x01
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <LCD_voidInit+0x936>
    18b4:	fe 01       	movw	r30, r28
    18b6:	e9 5b       	subi	r30, 0xB9	; 185
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	91 83       	std	Z+1, r25	; 0x01
    18bc:	80 83       	st	Z, r24
    18be:	88 c3       	rjmp	.+1808   	; 0x1fd0 <LCD_voidInit+0x1056>
    18c0:	fe 01       	movw	r30, r28
    18c2:	ed 5b       	subi	r30, 0xBD	; 189
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	a0 ef       	ldi	r26, 0xF0	; 240
    18cc:	b1 e4       	ldi	r27, 0x41	; 65
    18ce:	80 83       	st	Z, r24
    18d0:	91 83       	std	Z+1, r25	; 0x01
    18d2:	a2 83       	std	Z+2, r26	; 0x02
    18d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d6:	8e 01       	movw	r16, r28
    18d8:	01 5c       	subi	r16, 0xC1	; 193
    18da:	1f 4f       	sbci	r17, 0xFF	; 255
    18dc:	fe 01       	movw	r30, r28
    18de:	ed 5b       	subi	r30, 0xBD	; 189
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	60 81       	ld	r22, Z
    18e4:	71 81       	ldd	r23, Z+1	; 0x01
    18e6:	82 81       	ldd	r24, Z+2	; 0x02
    18e8:	93 81       	ldd	r25, Z+3	; 0x03
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	4a ef       	ldi	r20, 0xFA	; 250
    18f0:	54 e4       	ldi	r21, 0x44	; 68
    18f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	f8 01       	movw	r30, r16
    18fc:	80 83       	st	Z, r24
    18fe:	91 83       	std	Z+1, r25	; 0x01
    1900:	a2 83       	std	Z+2, r26	; 0x02
    1902:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1904:	fe 01       	movw	r30, r28
    1906:	ff 96       	adiw	r30, 0x3f	; 63
    1908:	60 81       	ld	r22, Z
    190a:	71 81       	ldd	r23, Z+1	; 0x01
    190c:	82 81       	ldd	r24, Z+2	; 0x02
    190e:	93 81       	ldd	r25, Z+3	; 0x03
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e8       	ldi	r20, 0x80	; 128
    1916:	5f e3       	ldi	r21, 0x3F	; 63
    1918:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    191c:	88 23       	and	r24, r24
    191e:	2c f4       	brge	.+10     	; 0x192a <LCD_voidInit+0x9b0>
		__ticks = 1;
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	9e af       	std	Y+62, r25	; 0x3e
    1926:	8d af       	std	Y+61, r24	; 0x3d
    1928:	46 c0       	rjmp	.+140    	; 0x19b6 <LCD_voidInit+0xa3c>
	else if (__tmp > 65535)
    192a:	fe 01       	movw	r30, r28
    192c:	ff 96       	adiw	r30, 0x3f	; 63
    192e:	60 81       	ld	r22, Z
    1930:	71 81       	ldd	r23, Z+1	; 0x01
    1932:	82 81       	ldd	r24, Z+2	; 0x02
    1934:	93 81       	ldd	r25, Z+3	; 0x03
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	3f ef       	ldi	r19, 0xFF	; 255
    193a:	4f e7       	ldi	r20, 0x7F	; 127
    193c:	57 e4       	ldi	r21, 0x47	; 71
    193e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1942:	18 16       	cp	r1, r24
    1944:	64 f5       	brge	.+88     	; 0x199e <LCD_voidInit+0xa24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1946:	fe 01       	movw	r30, r28
    1948:	ed 5b       	subi	r30, 0xBD	; 189
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	60 81       	ld	r22, Z
    194e:	71 81       	ldd	r23, Z+1	; 0x01
    1950:	82 81       	ldd	r24, Z+2	; 0x02
    1952:	93 81       	ldd	r25, Z+3	; 0x03
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	40 e2       	ldi	r20, 0x20	; 32
    195a:	51 e4       	ldi	r21, 0x41	; 65
    195c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	bc 01       	movw	r22, r24
    1966:	cd 01       	movw	r24, r26
    1968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	9e af       	std	Y+62, r25	; 0x3e
    1972:	8d af       	std	Y+61, r24	; 0x3d
    1974:	0f c0       	rjmp	.+30     	; 0x1994 <LCD_voidInit+0xa1a>
    1976:	88 ec       	ldi	r24, 0xC8	; 200
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	9c af       	std	Y+60, r25	; 0x3c
    197c:	8b af       	std	Y+59, r24	; 0x3b
    197e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1980:	9c ad       	ldd	r25, Y+60	; 0x3c
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	f1 f7       	brne	.-4      	; 0x1982 <LCD_voidInit+0xa08>
    1986:	9c af       	std	Y+60, r25	; 0x3c
    1988:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198a:	8d ad       	ldd	r24, Y+61	; 0x3d
    198c:	9e ad       	ldd	r25, Y+62	; 0x3e
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	9e af       	std	Y+62, r25	; 0x3e
    1992:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1994:	8d ad       	ldd	r24, Y+61	; 0x3d
    1996:	9e ad       	ldd	r25, Y+62	; 0x3e
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	69 f7       	brne	.-38     	; 0x1976 <LCD_voidInit+0x9fc>
    199c:	16 c0       	rjmp	.+44     	; 0x19ca <LCD_voidInit+0xa50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199e:	fe 01       	movw	r30, r28
    19a0:	ff 96       	adiw	r30, 0x3f	; 63
    19a2:	60 81       	ld	r22, Z
    19a4:	71 81       	ldd	r23, Z+1	; 0x01
    19a6:	82 81       	ldd	r24, Z+2	; 0x02
    19a8:	93 81       	ldd	r25, Z+3	; 0x03
    19aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	9e af       	std	Y+62, r25	; 0x3e
    19b4:	8d af       	std	Y+61, r24	; 0x3d
    19b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    19b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    19ba:	9a af       	std	Y+58, r25	; 0x3a
    19bc:	89 af       	std	Y+57, r24	; 0x39
    19be:	89 ad       	ldd	r24, Y+57	; 0x39
    19c0:	9a ad       	ldd	r25, Y+58	; 0x3a
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <LCD_voidInit+0xa48>
    19c6:	9a af       	std	Y+58, r25	; 0x3a
    19c8:	89 af       	std	Y+57, r24	; 0x39
		}
		else
		{
			/*step 1*/
			_delay_ms(30);
			voidWriteCmd(u8CntLoc,0b00100000);
    19ca:	fe 01       	movw	r30, r28
    19cc:	e2 57       	subi	r30, 0x72	; 114
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	80 81       	ld	r24, Z
    19d2:	60 e2       	ldi	r22, 0x20	; 32
    19d4:	0e 94 05 10 	call	0x200a	; 0x200a <voidWriteCmd>

			voidWriteCmd(u8CntLoc,0b00100000);
    19d8:	fe 01       	movw	r30, r28
    19da:	e2 57       	subi	r30, 0x72	; 114
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	80 81       	ld	r24, Z
    19e0:	60 e2       	ldi	r22, 0x20	; 32
    19e2:	0e 94 05 10 	call	0x200a	; 0x200a <voidWriteCmd>

			u8commnad=0b00000000 |lcdarr[u8CntLoc].lcdswconfig.u8line<<7 |
    19e6:	fe 01       	movw	r30, r28
    19e8:	e2 57       	subi	r30, 0x72	; 114
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	80 81       	ld	r24, Z
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	c9 01       	movw	r24, r18
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	82 0f       	add	r24, r18
    19fa:	93 1f       	adc	r25, r19
    19fc:	88 0f       	add	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	fc 01       	movw	r30, r24
    1a06:	eb 56       	subi	r30, 0x6B	; 107
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	80 81       	ld	r24, Z
    1a0c:	86 95       	lsr	r24
    1a0e:	81 70       	andi	r24, 0x01	; 1
    1a10:	88 2f       	mov	r24, r24
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	96 95       	lsr	r25
    1a16:	98 2f       	mov	r25, r24
    1a18:	88 27       	eor	r24, r24
    1a1a:	97 95       	ror	r25
    1a1c:	87 95       	ror	r24
    1a1e:	48 2f       	mov	r20, r24
    1a20:	fe 01       	movw	r30, r28
    1a22:	e2 57       	subi	r30, 0x72	; 114
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	80 81       	ld	r24, Z
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	c9 01       	movw	r24, r18
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	82 0f       	add	r24, r18
    1a34:	93 1f       	adc	r25, r19
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	fc 01       	movw	r30, r24
    1a40:	eb 56       	subi	r30, 0x6B	; 107
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	80 81       	ld	r24, Z
    1a46:	86 95       	lsr	r24
    1a48:	86 95       	lsr	r24
    1a4a:	81 70       	andi	r24, 0x01	; 1
    1a4c:	88 2f       	mov	r24, r24
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	00 24       	eor	r0, r0
    1a52:	96 95       	lsr	r25
    1a54:	87 95       	ror	r24
    1a56:	07 94       	ror	r0
    1a58:	96 95       	lsr	r25
    1a5a:	87 95       	ror	r24
    1a5c:	07 94       	ror	r0
    1a5e:	98 2f       	mov	r25, r24
    1a60:	80 2d       	mov	r24, r0
    1a62:	84 2b       	or	r24, r20
    1a64:	fe 01       	movw	r30, r28
    1a66:	e3 57       	subi	r30, 0x73	; 115
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	80 83       	st	Z, r24
			lcdarr[u8CntLoc].lcdswconfig.u8font <<6 ;

			voidWriteCmd(u8CntLoc,u8commnad);
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	e2 57       	subi	r30, 0x72	; 114
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	de 01       	movw	r26, r28
    1a74:	a3 57       	subi	r26, 0x73	; 115
    1a76:	bf 4f       	sbci	r27, 0xFF	; 255
    1a78:	80 81       	ld	r24, Z
    1a7a:	6c 91       	ld	r22, X
    1a7c:	0e 94 05 10 	call	0x200a	; 0x200a <voidWriteCmd>
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	a0 e8       	ldi	r26, 0x80	; 128
    1a86:	bf e3       	ldi	r27, 0x3F	; 63
    1a88:	8d ab       	std	Y+53, r24	; 0x35
    1a8a:	9e ab       	std	Y+54, r25	; 0x36
    1a8c:	af ab       	std	Y+55, r26	; 0x37
    1a8e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a90:	6d a9       	ldd	r22, Y+53	; 0x35
    1a92:	7e a9       	ldd	r23, Y+54	; 0x36
    1a94:	8f a9       	ldd	r24, Y+55	; 0x37
    1a96:	98 ad       	ldd	r25, Y+56	; 0x38
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	4a ef       	ldi	r20, 0xFA	; 250
    1a9e:	54 e4       	ldi	r21, 0x44	; 68
    1aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	89 ab       	std	Y+49, r24	; 0x31
    1aaa:	9a ab       	std	Y+50, r25	; 0x32
    1aac:	ab ab       	std	Y+51, r26	; 0x33
    1aae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ab0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ab2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ab4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ab6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e8       	ldi	r20, 0x80	; 128
    1abe:	5f e3       	ldi	r21, 0x3F	; 63
    1ac0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ac4:	88 23       	and	r24, r24
    1ac6:	2c f4       	brge	.+10     	; 0x1ad2 <LCD_voidInit+0xb58>
		__ticks = 1;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	98 ab       	std	Y+48, r25	; 0x30
    1ace:	8f a7       	std	Y+47, r24	; 0x2f
    1ad0:	3f c0       	rjmp	.+126    	; 0x1b50 <LCD_voidInit+0xbd6>
	else if (__tmp > 65535)
    1ad2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ad4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ad6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad8:	9c a9       	ldd	r25, Y+52	; 0x34
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	3f ef       	ldi	r19, 0xFF	; 255
    1ade:	4f e7       	ldi	r20, 0x7F	; 127
    1ae0:	57 e4       	ldi	r21, 0x47	; 71
    1ae2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ae6:	18 16       	cp	r1, r24
    1ae8:	4c f5       	brge	.+82     	; 0x1b3c <LCD_voidInit+0xbc2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aea:	6d a9       	ldd	r22, Y+53	; 0x35
    1aec:	7e a9       	ldd	r23, Y+54	; 0x36
    1aee:	8f a9       	ldd	r24, Y+55	; 0x37
    1af0:	98 ad       	ldd	r25, Y+56	; 0x38
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e2       	ldi	r20, 0x20	; 32
    1af8:	51 e4       	ldi	r21, 0x41	; 65
    1afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	bc 01       	movw	r22, r24
    1b04:	cd 01       	movw	r24, r26
    1b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	98 ab       	std	Y+48, r25	; 0x30
    1b10:	8f a7       	std	Y+47, r24	; 0x2f
    1b12:	0f c0       	rjmp	.+30     	; 0x1b32 <LCD_voidInit+0xbb8>
    1b14:	88 ec       	ldi	r24, 0xC8	; 200
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	9e a7       	std	Y+46, r25	; 0x2e
    1b1a:	8d a7       	std	Y+45, r24	; 0x2d
    1b1c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b1e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	f1 f7       	brne	.-4      	; 0x1b20 <LCD_voidInit+0xba6>
    1b24:	9e a7       	std	Y+46, r25	; 0x2e
    1b26:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	98 ab       	std	Y+48, r25	; 0x30
    1b30:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b34:	98 a9       	ldd	r25, Y+48	; 0x30
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	69 f7       	brne	.-38     	; 0x1b14 <LCD_voidInit+0xb9a>
    1b3a:	14 c0       	rjmp	.+40     	; 0x1b64 <LCD_voidInit+0xbea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b3e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b40:	8b a9       	ldd	r24, Y+51	; 0x33
    1b42:	9c a9       	ldd	r25, Y+52	; 0x34
    1b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	98 ab       	std	Y+48, r25	; 0x30
    1b4e:	8f a7       	std	Y+47, r24	; 0x2f
    1b50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b52:	98 a9       	ldd	r25, Y+48	; 0x30
    1b54:	9c a7       	std	Y+44, r25	; 0x2c
    1b56:	8b a7       	std	Y+43, r24	; 0x2b
    1b58:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b5a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <LCD_voidInit+0xbe2>
    1b60:	9c a7       	std	Y+44, r25	; 0x2c
    1b62:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);

			voidWriteCmd(u8CntLoc,0b00000000);
    1b64:	fe 01       	movw	r30, r28
    1b66:	e2 57       	subi	r30, 0x72	; 114
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	80 81       	ld	r24, Z
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	0e 94 05 10 	call	0x200a	; 0x200a <voidWriteCmd>

			u8commnad=0b10000000 |lcdarr[u8CntLoc].lcdswconfig.u8display<<6|
    1b72:	fe 01       	movw	r30, r28
    1b74:	e2 57       	subi	r30, 0x72	; 114
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	80 81       	ld	r24, Z
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	c9 01       	movw	r24, r18
    1b80:	88 0f       	add	r24, r24
    1b82:	99 1f       	adc	r25, r25
    1b84:	82 0f       	add	r24, r18
    1b86:	93 1f       	adc	r25, r19
    1b88:	88 0f       	add	r24, r24
    1b8a:	99 1f       	adc	r25, r25
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	fc 01       	movw	r30, r24
    1b92:	eb 56       	subi	r30, 0x6B	; 107
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	80 81       	ld	r24, Z
    1b98:	82 95       	swap	r24
    1b9a:	86 95       	lsr	r24
    1b9c:	86 95       	lsr	r24
    1b9e:	83 70       	andi	r24, 0x03	; 3
    1ba0:	81 70       	andi	r24, 0x01	; 1
    1ba2:	88 2f       	mov	r24, r24
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	00 24       	eor	r0, r0
    1ba8:	96 95       	lsr	r25
    1baa:	87 95       	ror	r24
    1bac:	07 94       	ror	r0
    1bae:	96 95       	lsr	r25
    1bb0:	87 95       	ror	r24
    1bb2:	07 94       	ror	r0
    1bb4:	98 2f       	mov	r25, r24
    1bb6:	80 2d       	mov	r24, r0
    1bb8:	48 2f       	mov	r20, r24
    1bba:	40 68       	ori	r20, 0x80	; 128
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e2 57       	subi	r30, 0x72	; 114
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 81       	ld	r24, Z
    1bc4:	28 2f       	mov	r18, r24
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	c9 01       	movw	r24, r18
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	82 0f       	add	r24, r18
    1bd0:	93 1f       	adc	r25, r19
    1bd2:	88 0f       	add	r24, r24
    1bd4:	99 1f       	adc	r25, r25
    1bd6:	88 0f       	add	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	fc 01       	movw	r30, r24
    1bdc:	eb 56       	subi	r30, 0x6B	; 107
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	80 81       	ld	r24, Z
    1be2:	86 95       	lsr	r24
    1be4:	86 95       	lsr	r24
    1be6:	86 95       	lsr	r24
    1be8:	81 70       	andi	r24, 0x01	; 1
    1bea:	88 2f       	mov	r24, r24
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	88 0f       	add	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	82 95       	swap	r24
    1bf4:	92 95       	swap	r25
    1bf6:	90 7f       	andi	r25, 0xF0	; 240
    1bf8:	98 27       	eor	r25, r24
    1bfa:	80 7f       	andi	r24, 0xF0	; 240
    1bfc:	98 27       	eor	r25, r24
    1bfe:	48 2b       	or	r20, r24
    1c00:	fe 01       	movw	r30, r28
    1c02:	e2 57       	subi	r30, 0x72	; 114
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	80 81       	ld	r24, Z
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	c9 01       	movw	r24, r18
    1c0e:	88 0f       	add	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	82 0f       	add	r24, r18
    1c14:	93 1f       	adc	r25, r19
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	fc 01       	movw	r30, r24
    1c20:	eb 56       	subi	r30, 0x6B	; 107
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	80 81       	ld	r24, Z
    1c26:	82 95       	swap	r24
    1c28:	8f 70       	andi	r24, 0x0F	; 15
    1c2a:	81 70       	andi	r24, 0x01	; 1
    1c2c:	88 2f       	mov	r24, r24
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	82 95       	swap	r24
    1c32:	92 95       	swap	r25
    1c34:	90 7f       	andi	r25, 0xF0	; 240
    1c36:	98 27       	eor	r25, r24
    1c38:	80 7f       	andi	r24, 0xF0	; 240
    1c3a:	98 27       	eor	r25, r24
    1c3c:	84 2b       	or	r24, r20
    1c3e:	fe 01       	movw	r30, r28
    1c40:	e3 57       	subi	r30, 0x73	; 115
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	80 83       	st	Z, r24
			lcdarr[u8CntLoc].lcdswconfig.u8coursorstate<<5 |
			lcdarr[u8CntLoc].lcdswconfig.u8coursorblink<<4 ;
			voidWriteCmd(u8CntLoc,u8commnad);
    1c46:	fe 01       	movw	r30, r28
    1c48:	e2 57       	subi	r30, 0x72	; 114
    1c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4c:	de 01       	movw	r26, r28
    1c4e:	a3 57       	subi	r26, 0x73	; 115
    1c50:	bf 4f       	sbci	r27, 0xFF	; 255
    1c52:	80 81       	ld	r24, Z
    1c54:	6c 91       	ld	r22, X
    1c56:	0e 94 05 10 	call	0x200a	; 0x200a <voidWriteCmd>
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	a0 e8       	ldi	r26, 0x80	; 128
    1c60:	bf e3       	ldi	r27, 0x3F	; 63
    1c62:	8f a3       	std	Y+39, r24	; 0x27
    1c64:	98 a7       	std	Y+40, r25	; 0x28
    1c66:	a9 a7       	std	Y+41, r26	; 0x29
    1c68:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c6c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c6e:	89 a5       	ldd	r24, Y+41	; 0x29
    1c70:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	4a ef       	ldi	r20, 0xFA	; 250
    1c78:	54 e4       	ldi	r21, 0x44	; 68
    1c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	8b a3       	std	Y+35, r24	; 0x23
    1c84:	9c a3       	std	Y+36, r25	; 0x24
    1c86:	ad a3       	std	Y+37, r26	; 0x25
    1c88:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c8a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c8c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c90:	9e a1       	ldd	r25, Y+38	; 0x26
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	40 e8       	ldi	r20, 0x80	; 128
    1c98:	5f e3       	ldi	r21, 0x3F	; 63
    1c9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c9e:	88 23       	and	r24, r24
    1ca0:	2c f4       	brge	.+10     	; 0x1cac <LCD_voidInit+0xd32>
		__ticks = 1;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	9a a3       	std	Y+34, r25	; 0x22
    1ca8:	89 a3       	std	Y+33, r24	; 0x21
    1caa:	3f c0       	rjmp	.+126    	; 0x1d2a <LCD_voidInit+0xdb0>
	else if (__tmp > 65535)
    1cac:	6b a1       	ldd	r22, Y+35	; 0x23
    1cae:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb0:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb2:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	3f ef       	ldi	r19, 0xFF	; 255
    1cb8:	4f e7       	ldi	r20, 0x7F	; 127
    1cba:	57 e4       	ldi	r21, 0x47	; 71
    1cbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cc0:	18 16       	cp	r1, r24
    1cc2:	4c f5       	brge	.+82     	; 0x1d16 <LCD_voidInit+0xd9c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc4:	6f a1       	ldd	r22, Y+39	; 0x27
    1cc6:	78 a5       	ldd	r23, Y+40	; 0x28
    1cc8:	89 a5       	ldd	r24, Y+41	; 0x29
    1cca:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e2       	ldi	r20, 0x20	; 32
    1cd2:	51 e4       	ldi	r21, 0x41	; 65
    1cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	bc 01       	movw	r22, r24
    1cde:	cd 01       	movw	r24, r26
    1ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	9a a3       	std	Y+34, r25	; 0x22
    1cea:	89 a3       	std	Y+33, r24	; 0x21
    1cec:	0f c0       	rjmp	.+30     	; 0x1d0c <LCD_voidInit+0xd92>
    1cee:	88 ec       	ldi	r24, 0xC8	; 200
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	98 a3       	std	Y+32, r25	; 0x20
    1cf4:	8f 8f       	std	Y+31, r24	; 0x1f
    1cf6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cf8:	98 a1       	ldd	r25, Y+32	; 0x20
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	f1 f7       	brne	.-4      	; 0x1cfa <LCD_voidInit+0xd80>
    1cfe:	98 a3       	std	Y+32, r25	; 0x20
    1d00:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d02:	89 a1       	ldd	r24, Y+33	; 0x21
    1d04:	9a a1       	ldd	r25, Y+34	; 0x22
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	9a a3       	std	Y+34, r25	; 0x22
    1d0a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	69 f7       	brne	.-38     	; 0x1cee <LCD_voidInit+0xd74>
    1d14:	14 c0       	rjmp	.+40     	; 0x1d3e <LCD_voidInit+0xdc4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d16:	6b a1       	ldd	r22, Y+35	; 0x23
    1d18:	7c a1       	ldd	r23, Y+36	; 0x24
    1d1a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d1c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	9a a3       	std	Y+34, r25	; 0x22
    1d28:	89 a3       	std	Y+33, r24	; 0x21
    1d2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d2c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d2e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d30:	8d 8f       	std	Y+29, r24	; 0x1d
    1d32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d34:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <LCD_voidInit+0xdbc>
    1d3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d3c:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);
			voidWriteCmd(u8CntLoc,0b00000000);
    1d3e:	fe 01       	movw	r30, r28
    1d40:	e2 57       	subi	r30, 0x72	; 114
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	80 81       	ld	r24, Z
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	0e 94 05 10 	call	0x200a	; 0x200a <voidWriteCmd>
			voidWriteCmd(u8CntLoc,0b00010000);
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	e2 57       	subi	r30, 0x72	; 114
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	80 81       	ld	r24, Z
    1d54:	60 e1       	ldi	r22, 0x10	; 16
    1d56:	0e 94 05 10 	call	0x200a	; 0x200a <voidWriteCmd>
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	a0 e4       	ldi	r26, 0x40	; 64
    1d60:	b0 e4       	ldi	r27, 0x40	; 64
    1d62:	89 8f       	std	Y+25, r24	; 0x19
    1d64:	9a 8f       	std	Y+26, r25	; 0x1a
    1d66:	ab 8f       	std	Y+27, r26	; 0x1b
    1d68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d6a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	4a ef       	ldi	r20, 0xFA	; 250
    1d78:	54 e4       	ldi	r21, 0x44	; 68
    1d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	8d 8b       	std	Y+21, r24	; 0x15
    1d84:	9e 8b       	std	Y+22, r25	; 0x16
    1d86:	af 8b       	std	Y+23, r26	; 0x17
    1d88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d90:	98 8d       	ldd	r25, Y+24	; 0x18
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e8       	ldi	r20, 0x80	; 128
    1d98:	5f e3       	ldi	r21, 0x3F	; 63
    1d9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d9e:	88 23       	and	r24, r24
    1da0:	2c f4       	brge	.+10     	; 0x1dac <LCD_voidInit+0xe32>
		__ticks = 1;
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	9c 8b       	std	Y+20, r25	; 0x14
    1da8:	8b 8b       	std	Y+19, r24	; 0x13
    1daa:	3f c0       	rjmp	.+126    	; 0x1e2a <LCD_voidInit+0xeb0>
	else if (__tmp > 65535)
    1dac:	6d 89       	ldd	r22, Y+21	; 0x15
    1dae:	7e 89       	ldd	r23, Y+22	; 0x16
    1db0:	8f 89       	ldd	r24, Y+23	; 0x17
    1db2:	98 8d       	ldd	r25, Y+24	; 0x18
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	3f ef       	ldi	r19, 0xFF	; 255
    1db8:	4f e7       	ldi	r20, 0x7F	; 127
    1dba:	57 e4       	ldi	r21, 0x47	; 71
    1dbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc0:	18 16       	cp	r1, r24
    1dc2:	4c f5       	brge	.+82     	; 0x1e16 <LCD_voidInit+0xe9c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc4:	69 8d       	ldd	r22, Y+25	; 0x19
    1dc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	40 e2       	ldi	r20, 0x20	; 32
    1dd2:	51 e4       	ldi	r21, 0x41	; 65
    1dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	bc 01       	movw	r22, r24
    1dde:	cd 01       	movw	r24, r26
    1de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	9c 8b       	std	Y+20, r25	; 0x14
    1dea:	8b 8b       	std	Y+19, r24	; 0x13
    1dec:	0f c0       	rjmp	.+30     	; 0x1e0c <LCD_voidInit+0xe92>
    1dee:	88 ec       	ldi	r24, 0xC8	; 200
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	9a 8b       	std	Y+18, r25	; 0x12
    1df4:	89 8b       	std	Y+17, r24	; 0x11
    1df6:	89 89       	ldd	r24, Y+17	; 0x11
    1df8:	9a 89       	ldd	r25, Y+18	; 0x12
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	f1 f7       	brne	.-4      	; 0x1dfa <LCD_voidInit+0xe80>
    1dfe:	9a 8b       	std	Y+18, r25	; 0x12
    1e00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e02:	8b 89       	ldd	r24, Y+19	; 0x13
    1e04:	9c 89       	ldd	r25, Y+20	; 0x14
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	9c 8b       	std	Y+20, r25	; 0x14
    1e0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	69 f7       	brne	.-38     	; 0x1dee <LCD_voidInit+0xe74>
    1e14:	14 c0       	rjmp	.+40     	; 0x1e3e <LCD_voidInit+0xec4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e16:	6d 89       	ldd	r22, Y+21	; 0x15
    1e18:	7e 89       	ldd	r23, Y+22	; 0x16
    1e1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	9c 8b       	std	Y+20, r25	; 0x14
    1e28:	8b 8b       	std	Y+19, r24	; 0x13
    1e2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2e:	98 8b       	std	Y+16, r25	; 0x10
    1e30:	8f 87       	std	Y+15, r24	; 0x0f
    1e32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e34:	98 89       	ldd	r25, Y+16	; 0x10
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	f1 f7       	brne	.-4      	; 0x1e36 <LCD_voidInit+0xebc>
    1e3a:	98 8b       	std	Y+16, r25	; 0x10
    1e3c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(3);
			voidWriteCmd(u8CntLoc,0b00000000);
    1e3e:	fe 01       	movw	r30, r28
    1e40:	e2 57       	subi	r30, 0x72	; 114
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	80 81       	ld	r24, Z
    1e46:	60 e0       	ldi	r22, 0x00	; 0
    1e48:	0e 94 05 10 	call	0x200a	; 0x200a <voidWriteCmd>

			u8commnad= 0b01000000 | lcdarr[u8CntLoc].lcdswconfig.u8direction<<5 |
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	e2 57       	subi	r30, 0x72	; 114
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	80 81       	ld	r24, Z
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	c9 01       	movw	r24, r18
    1e5a:	88 0f       	add	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	82 0f       	add	r24, r18
    1e60:	93 1f       	adc	r25, r19
    1e62:	88 0f       	add	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	88 0f       	add	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	eb 56       	subi	r30, 0x6B	; 107
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	80 81       	ld	r24, Z
    1e72:	88 1f       	adc	r24, r24
    1e74:	88 27       	eor	r24, r24
    1e76:	88 1f       	adc	r24, r24
    1e78:	88 2f       	mov	r24, r24
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	82 95       	swap	r24
    1e82:	92 95       	swap	r25
    1e84:	90 7f       	andi	r25, 0xF0	; 240
    1e86:	98 27       	eor	r25, r24
    1e88:	80 7f       	andi	r24, 0xF0	; 240
    1e8a:	98 27       	eor	r25, r24
    1e8c:	48 2f       	mov	r20, r24
    1e8e:	40 64       	ori	r20, 0x40	; 64
    1e90:	fe 01       	movw	r30, r28
    1e92:	e2 57       	subi	r30, 0x72	; 114
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	80 81       	ld	r24, Z
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	c9 01       	movw	r24, r18
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	82 0f       	add	r24, r18
    1ea4:	93 1f       	adc	r25, r19
    1ea6:	88 0f       	add	r24, r24
    1ea8:	99 1f       	adc	r25, r25
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	fc 01       	movw	r30, r24
    1eb0:	eb 56       	subi	r30, 0x6B	; 107
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	80 81       	ld	r24, Z
    1eb6:	82 95       	swap	r24
    1eb8:	86 95       	lsr	r24
    1eba:	87 70       	andi	r24, 0x07	; 7
    1ebc:	81 70       	andi	r24, 0x01	; 1
    1ebe:	88 2f       	mov	r24, r24
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	82 95       	swap	r24
    1ec4:	92 95       	swap	r25
    1ec6:	90 7f       	andi	r25, 0xF0	; 240
    1ec8:	98 27       	eor	r25, r24
    1eca:	80 7f       	andi	r24, 0xF0	; 240
    1ecc:	98 27       	eor	r25, r24
    1ece:	84 2b       	or	r24, r20
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	e3 57       	subi	r30, 0x73	; 115
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	80 83       	st	Z, r24
					   lcdarr[u8CntLoc].lcdswconfig.u8shift<<4 ;


			voidWriteCmd(u8CntLoc,u8commnad);
    1ed8:	fe 01       	movw	r30, r28
    1eda:	e2 57       	subi	r30, 0x72	; 114
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	de 01       	movw	r26, r28
    1ee0:	a3 57       	subi	r26, 0x73	; 115
    1ee2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ee4:	80 81       	ld	r24, Z
    1ee6:	6c 91       	ld	r22, X
    1ee8:	0e 94 05 10 	call	0x200a	; 0x200a <voidWriteCmd>
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	a0 e4       	ldi	r26, 0x40	; 64
    1ef2:	b0 e4       	ldi	r27, 0x40	; 64
    1ef4:	8b 87       	std	Y+11, r24	; 0x0b
    1ef6:	9c 87       	std	Y+12, r25	; 0x0c
    1ef8:	ad 87       	std	Y+13, r26	; 0x0d
    1efa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1efe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	4a ef       	ldi	r20, 0xFA	; 250
    1f0a:	54 e4       	ldi	r21, 0x44	; 68
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	8f 83       	std	Y+7, r24	; 0x07
    1f16:	98 87       	std	Y+8, r25	; 0x08
    1f18:	a9 87       	std	Y+9, r26	; 0x09
    1f1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1e:	78 85       	ldd	r23, Y+8	; 0x08
    1f20:	89 85       	ldd	r24, Y+9	; 0x09
    1f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e8       	ldi	r20, 0x80	; 128
    1f2a:	5f e3       	ldi	r21, 0x3F	; 63
    1f2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f30:	88 23       	and	r24, r24
    1f32:	2c f4       	brge	.+10     	; 0x1f3e <LCD_voidInit+0xfc4>
		__ticks = 1;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9e 83       	std	Y+6, r25	; 0x06
    1f3a:	8d 83       	std	Y+5, r24	; 0x05
    1f3c:	3f c0       	rjmp	.+126    	; 0x1fbc <LCD_voidInit+0x1042>
	else if (__tmp > 65535)
    1f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f40:	78 85       	ldd	r23, Y+8	; 0x08
    1f42:	89 85       	ldd	r24, Y+9	; 0x09
    1f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	3f ef       	ldi	r19, 0xFF	; 255
    1f4a:	4f e7       	ldi	r20, 0x7F	; 127
    1f4c:	57 e4       	ldi	r21, 0x47	; 71
    1f4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f52:	18 16       	cp	r1, r24
    1f54:	4c f5       	brge	.+82     	; 0x1fa8 <LCD_voidInit+0x102e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e2       	ldi	r20, 0x20	; 32
    1f64:	51 e4       	ldi	r21, 0x41	; 65
    1f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	bc 01       	movw	r22, r24
    1f70:	cd 01       	movw	r24, r26
    1f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	9e 83       	std	Y+6, r25	; 0x06
    1f7c:	8d 83       	std	Y+5, r24	; 0x05
    1f7e:	0f c0       	rjmp	.+30     	; 0x1f9e <LCD_voidInit+0x1024>
    1f80:	88 ec       	ldi	r24, 0xC8	; 200
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9c 83       	std	Y+4, r25	; 0x04
    1f86:	8b 83       	std	Y+3, r24	; 0x03
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <LCD_voidInit+0x1012>
    1f90:	9c 83       	std	Y+4, r25	; 0x04
    1f92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f94:	8d 81       	ldd	r24, Y+5	; 0x05
    1f96:	9e 81       	ldd	r25, Y+6	; 0x06
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	9e 83       	std	Y+6, r25	; 0x06
    1f9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	69 f7       	brne	.-38     	; 0x1f80 <LCD_voidInit+0x1006>
    1fa6:	14 c0       	rjmp	.+40     	; 0x1fd0 <LCD_voidInit+0x1056>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1faa:	78 85       	ldd	r23, Y+8	; 0x08
    1fac:	89 85       	ldd	r24, Y+9	; 0x09
    1fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	9e 83       	std	Y+6, r25	; 0x06
    1fba:	8d 83       	std	Y+5, r24	; 0x05
    1fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc0:	9a 83       	std	Y+2, r25	; 0x02
    1fc2:	89 83       	std	Y+1, r24	; 0x01
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <LCD_voidInit+0x104e>
    1fcc:	9a 83       	std	Y+2, r25	; 0x02
    1fce:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidInit(void)
{
	uint8 u8CntLoc;
	uint8 u8commnad=0;
	for (u8CntLoc =0  ; u8CntLoc <MAX_NUM ; u8CntLoc++)
    1fd0:	de 01       	movw	r26, r28
    1fd2:	a2 57       	subi	r26, 0x72	; 114
    1fd4:	bf 4f       	sbci	r27, 0xFF	; 255
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	e2 57       	subi	r30, 0x72	; 114
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	80 81       	ld	r24, Z
    1fde:	8f 5f       	subi	r24, 0xFF	; 255
    1fe0:	8c 93       	st	X, r24
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e2 57       	subi	r30, 0x72	; 114
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	80 81       	ld	r24, Z
    1fea:	82 30       	cpi	r24, 0x02	; 2
    1fec:	10 f4       	brcc	.+4      	; 0x1ff2 <LCD_voidInit+0x1078>
    1fee:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <LCD_voidInit+0x2e>

	}



}
    1ff2:	c2 57       	subi	r28, 0x72	; 114
    1ff4:	df 4f       	sbci	r29, 0xFF	; 255
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	f8 94       	cli
    1ffa:	de bf       	out	0x3e, r29	; 62
    1ffc:	0f be       	out	0x3f, r0	; 63
    1ffe:	cd bf       	out	0x3d, r28	; 61
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	1f 91       	pop	r17
    2006:	0f 91       	pop	r16
    2008:	08 95       	ret

0000200a <voidWriteCmd>:


static void voidWriteCmd(uint8 u8Index , uint8 u8CmdCPy)
 {
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	00 d0       	rcall	.+0      	; 0x2010 <voidWriteCmd+0x6>
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	6a 83       	std	Y+2, r22	; 0x02

	/*RS   0*/
	DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.u8RS , DIO_LOW);
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	28 2f       	mov	r18, r24
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	c9 01       	movw	r24, r18
    2020:	88 0f       	add	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	82 0f       	add	r24, r18
    2026:	93 1f       	adc	r25, r19
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	fc 01       	movw	r30, r24
    2032:	ea 56       	subi	r30, 0x6A	; 106
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	80 81       	ld	r24, Z
    2038:	60 e0       	ldi	r22, 0x00	; 0
    203a:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>

	/*help*/
	LCDHelp(u8Index,u8CmdCPy);
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	6a 81       	ldd	r22, Y+2	; 0x02
    2042:	0e 94 28 10 	call	0x2050	; 0x2050 <LCDHelp>

 }
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	08 95       	ret

00002050 <LCDHelp>:

static void  LCDHelp(uint8 u8Index , uint8 u8dataCmdCPy)
	{
    2050:	df 93       	push	r29
    2052:	cf 93       	push	r28
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	6f 97       	sbiw	r28, 0x1f	; 31
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	8e 8f       	std	Y+30, r24	; 0x1e
    2066:	6f 8f       	std	Y+31, r22	; 0x1f
		uint8 u8CntLoc=0;
    2068:	1d 8e       	std	Y+29, r1	; 0x1d
		/*set to write to lCD */
		DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.u8RW , DIO_LOW);
    206a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    206c:	28 2f       	mov	r18, r24
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	c9 01       	movw	r24, r18
    2072:	88 0f       	add	r24, r24
    2074:	99 1f       	adc	r25, r25
    2076:	82 0f       	add	r24, r18
    2078:	93 1f       	adc	r25, r19
    207a:	88 0f       	add	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	fc 01       	movw	r30, r24
    2084:	e8 56       	subi	r30, 0x68	; 104
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	80 81       	ld	r24, Z
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>

		DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.u8E , DIO_HIGH);
    2090:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2092:	28 2f       	mov	r18, r24
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	c9 01       	movw	r24, r18
    2098:	88 0f       	add	r24, r24
    209a:	99 1f       	adc	r25, r25
    209c:	82 0f       	add	r24, r18
    209e:	93 1f       	adc	r25, r19
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	01 96       	adiw	r24, 0x01	; 1
    20a6:	88 0f       	add	r24, r24
    20a8:	99 1f       	adc	r25, r25
    20aa:	fc 01       	movw	r30, r24
    20ac:	eb 56       	subi	r30, 0x6B	; 107
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	80 81       	ld	r24, Z
    20b2:	61 e0       	ldi	r22, 0x01	; 1
    20b4:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>

		if (lcdarr[u8Index].lcdswconfig.u8mode==LCD_8_BIT_MODE)
    20b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20ba:	28 2f       	mov	r18, r24
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	c9 01       	movw	r24, r18
    20c0:	88 0f       	add	r24, r24
    20c2:	99 1f       	adc	r25, r25
    20c4:	82 0f       	add	r24, r18
    20c6:	93 1f       	adc	r25, r19
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	88 0f       	add	r24, r24
    20ce:	99 1f       	adc	r25, r25
    20d0:	fc 01       	movw	r30, r24
    20d2:	eb 56       	subi	r30, 0x6B	; 107
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	80 81       	ld	r24, Z
    20d8:	81 70       	andi	r24, 0x01	; 1
    20da:	81 30       	cpi	r24, 0x01	; 1
    20dc:	89 f5       	brne	.+98     	; 0x2140 <LCDHelp+0xf0>
		{
			for (u8CntLoc =0 ;u8CntLoc<8;u8CntLoc++)
    20de:	1d 8e       	std	Y+29, r1	; 0x1d
    20e0:	2b c0       	rjmp	.+86     	; 0x2138 <LCDHelp+0xe8>
			{
				DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.au8data[u8CntLoc],GET_BIT(u8dataCmdCPy,u8CntLoc));
    20e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20e4:	28 2f       	mov	r18, r24
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20ea:	48 2f       	mov	r20, r24
    20ec:	50 e0       	ldi	r21, 0x00	; 0
    20ee:	c9 01       	movw	r24, r18
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	82 0f       	add	r24, r18
    20f6:	93 1f       	adc	r25, r19
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	84 0f       	add	r24, r20
    2102:	95 1f       	adc	r25, r21
    2104:	fc 01       	movw	r30, r24
    2106:	e7 56       	subi	r30, 0x67	; 103
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	40 81       	ld	r20, Z
    210c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    210e:	28 2f       	mov	r18, r24
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2114:	88 2f       	mov	r24, r24
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	b9 01       	movw	r22, r18
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <LCDHelp+0xd0>
    211c:	75 95       	asr	r23
    211e:	67 95       	ror	r22
    2120:	8a 95       	dec	r24
    2122:	e2 f7       	brpl	.-8      	; 0x211c <LCDHelp+0xcc>
    2124:	cb 01       	movw	r24, r22
    2126:	98 2f       	mov	r25, r24
    2128:	91 70       	andi	r25, 0x01	; 1
    212a:	84 2f       	mov	r24, r20
    212c:	69 2f       	mov	r22, r25
    212e:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>

		DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.u8E , DIO_HIGH);

		if (lcdarr[u8Index].lcdswconfig.u8mode==LCD_8_BIT_MODE)
		{
			for (u8CntLoc =0 ;u8CntLoc<8;u8CntLoc++)
    2132:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2134:	8f 5f       	subi	r24, 0xFF	; 255
    2136:	8d 8f       	std	Y+29, r24	; 0x1d
    2138:	8d 8d       	ldd	r24, Y+29	; 0x1d
    213a:	88 30       	cpi	r24, 0x08	; 8
    213c:	90 f2       	brcs	.-92     	; 0x20e2 <LCDHelp+0x92>
    213e:	31 c0       	rjmp	.+98     	; 0x21a2 <LCDHelp+0x152>

		}

		else
		{
			for (u8CntLoc =4 ;u8CntLoc<8;u8CntLoc++)
    2140:	84 e0       	ldi	r24, 0x04	; 4
    2142:	8d 8f       	std	Y+29, r24	; 0x1d
    2144:	2b c0       	rjmp	.+86     	; 0x219c <LCDHelp+0x14c>
			{
				DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.au8data[u8CntLoc],GET_BIT(u8dataCmdCPy,u8CntLoc));
    2146:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2148:	28 2f       	mov	r18, r24
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    214e:	48 2f       	mov	r20, r24
    2150:	50 e0       	ldi	r21, 0x00	; 0
    2152:	c9 01       	movw	r24, r18
    2154:	88 0f       	add	r24, r24
    2156:	99 1f       	adc	r25, r25
    2158:	82 0f       	add	r24, r18
    215a:	93 1f       	adc	r25, r19
    215c:	88 0f       	add	r24, r24
    215e:	99 1f       	adc	r25, r25
    2160:	88 0f       	add	r24, r24
    2162:	99 1f       	adc	r25, r25
    2164:	84 0f       	add	r24, r20
    2166:	95 1f       	adc	r25, r21
    2168:	fc 01       	movw	r30, r24
    216a:	e7 56       	subi	r30, 0x67	; 103
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	40 81       	ld	r20, Z
    2170:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2178:	88 2f       	mov	r24, r24
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	b9 01       	movw	r22, r18
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <LCDHelp+0x134>
    2180:	75 95       	asr	r23
    2182:	67 95       	ror	r22
    2184:	8a 95       	dec	r24
    2186:	e2 f7       	brpl	.-8      	; 0x2180 <LCDHelp+0x130>
    2188:	cb 01       	movw	r24, r22
    218a:	98 2f       	mov	r25, r24
    218c:	91 70       	andi	r25, 0x01	; 1
    218e:	84 2f       	mov	r24, r20
    2190:	69 2f       	mov	r22, r25
    2192:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>

		}

		else
		{
			for (u8CntLoc =4 ;u8CntLoc<8;u8CntLoc++)
    2196:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2198:	8f 5f       	subi	r24, 0xFF	; 255
    219a:	8d 8f       	std	Y+29, r24	; 0x1d
    219c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    219e:	88 30       	cpi	r24, 0x08	; 8
    21a0:	90 f2       	brcs	.-92     	; 0x2146 <LCDHelp+0xf6>
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	a0 e2       	ldi	r26, 0x20	; 32
    21a8:	b1 e4       	ldi	r27, 0x41	; 65
    21aa:	89 8f       	std	Y+25, r24	; 0x19
    21ac:	9a 8f       	std	Y+26, r25	; 0x1a
    21ae:	ab 8f       	std	Y+27, r26	; 0x1b
    21b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b2:	69 8d       	ldd	r22, Y+25	; 0x19
    21b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	4a ef       	ldi	r20, 0xFA	; 250
    21c0:	54 e4       	ldi	r21, 0x44	; 68
    21c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	8d 8b       	std	Y+21, r24	; 0x15
    21cc:	9e 8b       	std	Y+22, r25	; 0x16
    21ce:	af 8b       	std	Y+23, r26	; 0x17
    21d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21d2:	6d 89       	ldd	r22, Y+21	; 0x15
    21d4:	7e 89       	ldd	r23, Y+22	; 0x16
    21d6:	8f 89       	ldd	r24, Y+23	; 0x17
    21d8:	98 8d       	ldd	r25, Y+24	; 0x18
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e8       	ldi	r20, 0x80	; 128
    21e0:	5f e3       	ldi	r21, 0x3F	; 63
    21e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21e6:	88 23       	and	r24, r24
    21e8:	2c f4       	brge	.+10     	; 0x21f4 <LCDHelp+0x1a4>
		__ticks = 1;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	9c 8b       	std	Y+20, r25	; 0x14
    21f0:	8b 8b       	std	Y+19, r24	; 0x13
    21f2:	3f c0       	rjmp	.+126    	; 0x2272 <LCDHelp+0x222>
	else if (__tmp > 65535)
    21f4:	6d 89       	ldd	r22, Y+21	; 0x15
    21f6:	7e 89       	ldd	r23, Y+22	; 0x16
    21f8:	8f 89       	ldd	r24, Y+23	; 0x17
    21fa:	98 8d       	ldd	r25, Y+24	; 0x18
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	3f ef       	ldi	r19, 0xFF	; 255
    2200:	4f e7       	ldi	r20, 0x7F	; 127
    2202:	57 e4       	ldi	r21, 0x47	; 71
    2204:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2208:	18 16       	cp	r1, r24
    220a:	4c f5       	brge	.+82     	; 0x225e <LCDHelp+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220c:	69 8d       	ldd	r22, Y+25	; 0x19
    220e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2210:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2212:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e2       	ldi	r20, 0x20	; 32
    221a:	51 e4       	ldi	r21, 0x41	; 65
    221c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9c 8b       	std	Y+20, r25	; 0x14
    2232:	8b 8b       	std	Y+19, r24	; 0x13
    2234:	0f c0       	rjmp	.+30     	; 0x2254 <LCDHelp+0x204>
    2236:	88 ec       	ldi	r24, 0xC8	; 200
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9a 8b       	std	Y+18, r25	; 0x12
    223c:	89 8b       	std	Y+17, r24	; 0x11
    223e:	89 89       	ldd	r24, Y+17	; 0x11
    2240:	9a 89       	ldd	r25, Y+18	; 0x12
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <LCDHelp+0x1f2>
    2246:	9a 8b       	std	Y+18, r25	; 0x12
    2248:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224a:	8b 89       	ldd	r24, Y+19	; 0x13
    224c:	9c 89       	ldd	r25, Y+20	; 0x14
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	9c 8b       	std	Y+20, r25	; 0x14
    2252:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2254:	8b 89       	ldd	r24, Y+19	; 0x13
    2256:	9c 89       	ldd	r25, Y+20	; 0x14
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	69 f7       	brne	.-38     	; 0x2236 <LCDHelp+0x1e6>
    225c:	14 c0       	rjmp	.+40     	; 0x2286 <LCDHelp+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225e:	6d 89       	ldd	r22, Y+21	; 0x15
    2260:	7e 89       	ldd	r23, Y+22	; 0x16
    2262:	8f 89       	ldd	r24, Y+23	; 0x17
    2264:	98 8d       	ldd	r25, Y+24	; 0x18
    2266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	9c 8b       	std	Y+20, r25	; 0x14
    2270:	8b 8b       	std	Y+19, r24	; 0x13
    2272:	8b 89       	ldd	r24, Y+19	; 0x13
    2274:	9c 89       	ldd	r25, Y+20	; 0x14
    2276:	98 8b       	std	Y+16, r25	; 0x10
    2278:	8f 87       	std	Y+15, r24	; 0x0f
    227a:	8f 85       	ldd	r24, Y+15	; 0x0f
    227c:	98 89       	ldd	r25, Y+16	; 0x10
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	f1 f7       	brne	.-4      	; 0x227e <LCDHelp+0x22e>
    2282:	98 8b       	std	Y+16, r25	; 0x10
    2284:	8f 87       	std	Y+15, r24	; 0x0f
				DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.au8data[u8CntLoc],GET_BIT(u8dataCmdCPy,u8CntLoc));
			}
		}
			/* latch */
		_delay_ms(10);
		DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.u8E , DIO_LOW);
    2286:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2288:	28 2f       	mov	r18, r24
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	c9 01       	movw	r24, r18
    228e:	88 0f       	add	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	82 0f       	add	r24, r18
    2294:	93 1f       	adc	r25, r19
    2296:	88 0f       	add	r24, r24
    2298:	99 1f       	adc	r25, r25
    229a:	01 96       	adiw	r24, 0x01	; 1
    229c:	88 0f       	add	r24, r24
    229e:	99 1f       	adc	r25, r25
    22a0:	fc 01       	movw	r30, r24
    22a2:	eb 56       	subi	r30, 0x6B	; 107
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	80 81       	ld	r24, Z
    22a8:	60 e0       	ldi	r22, 0x00	; 0
    22aa:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	a0 e2       	ldi	r26, 0x20	; 32
    22b4:	b1 e4       	ldi	r27, 0x41	; 65
    22b6:	8b 87       	std	Y+11, r24	; 0x0b
    22b8:	9c 87       	std	Y+12, r25	; 0x0c
    22ba:	ad 87       	std	Y+13, r26	; 0x0d
    22bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22be:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	4a ef       	ldi	r20, 0xFA	; 250
    22cc:	54 e4       	ldi	r21, 0x44	; 68
    22ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	8f 83       	std	Y+7, r24	; 0x07
    22d8:	98 87       	std	Y+8, r25	; 0x08
    22da:	a9 87       	std	Y+9, r26	; 0x09
    22dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22de:	6f 81       	ldd	r22, Y+7	; 0x07
    22e0:	78 85       	ldd	r23, Y+8	; 0x08
    22e2:	89 85       	ldd	r24, Y+9	; 0x09
    22e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e8       	ldi	r20, 0x80	; 128
    22ec:	5f e3       	ldi	r21, 0x3F	; 63
    22ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22f2:	88 23       	and	r24, r24
    22f4:	2c f4       	brge	.+10     	; 0x2300 <LCDHelp+0x2b0>
		__ticks = 1;
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	9e 83       	std	Y+6, r25	; 0x06
    22fc:	8d 83       	std	Y+5, r24	; 0x05
    22fe:	3f c0       	rjmp	.+126    	; 0x237e <LCDHelp+0x32e>
	else if (__tmp > 65535)
    2300:	6f 81       	ldd	r22, Y+7	; 0x07
    2302:	78 85       	ldd	r23, Y+8	; 0x08
    2304:	89 85       	ldd	r24, Y+9	; 0x09
    2306:	9a 85       	ldd	r25, Y+10	; 0x0a
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	3f ef       	ldi	r19, 0xFF	; 255
    230c:	4f e7       	ldi	r20, 0x7F	; 127
    230e:	57 e4       	ldi	r21, 0x47	; 71
    2310:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2314:	18 16       	cp	r1, r24
    2316:	4c f5       	brge	.+82     	; 0x236a <LCDHelp+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2318:	6b 85       	ldd	r22, Y+11	; 0x0b
    231a:	7c 85       	ldd	r23, Y+12	; 0x0c
    231c:	8d 85       	ldd	r24, Y+13	; 0x0d
    231e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e2       	ldi	r20, 0x20	; 32
    2326:	51 e4       	ldi	r21, 0x41	; 65
    2328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9e 83       	std	Y+6, r25	; 0x06
    233e:	8d 83       	std	Y+5, r24	; 0x05
    2340:	0f c0       	rjmp	.+30     	; 0x2360 <LCDHelp+0x310>
    2342:	88 ec       	ldi	r24, 0xC8	; 200
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	9c 83       	std	Y+4, r25	; 0x04
    2348:	8b 83       	std	Y+3, r24	; 0x03
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	9c 81       	ldd	r25, Y+4	; 0x04
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <LCDHelp+0x2fe>
    2352:	9c 83       	std	Y+4, r25	; 0x04
    2354:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2356:	8d 81       	ldd	r24, Y+5	; 0x05
    2358:	9e 81       	ldd	r25, Y+6	; 0x06
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	9e 83       	std	Y+6, r25	; 0x06
    235e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2360:	8d 81       	ldd	r24, Y+5	; 0x05
    2362:	9e 81       	ldd	r25, Y+6	; 0x06
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	69 f7       	brne	.-38     	; 0x2342 <LCDHelp+0x2f2>
    2368:	14 c0       	rjmp	.+40     	; 0x2392 <LCDHelp+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236a:	6f 81       	ldd	r22, Y+7	; 0x07
    236c:	78 85       	ldd	r23, Y+8	; 0x08
    236e:	89 85       	ldd	r24, Y+9	; 0x09
    2370:	9a 85       	ldd	r25, Y+10	; 0x0a
    2372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	8d 83       	std	Y+5, r24	; 0x05
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	9a 83       	std	Y+2, r25	; 0x02
    2384:	89 83       	std	Y+1, r24	; 0x01
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	9a 81       	ldd	r25, Y+2	; 0x02
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	f1 f7       	brne	.-4      	; 0x238a <LCDHelp+0x33a>
    238e:	9a 83       	std	Y+2, r25	; 0x02
    2390:	89 83       	std	Y+1, r24	; 0x01
		/*extra delay*/
		_delay_ms(10);
	}
    2392:	6f 96       	adiw	r28, 0x1f	; 31
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	f8 94       	cli
    2398:	de bf       	out	0x3e, r29	; 62
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	cd bf       	out	0x3d, r28	; 61
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <LCD_voidSendChar>:

void LCD_voidSendChar(uint8 u8IndexCpy, uint8 u8CharCpy)

{
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	ac 97       	sbiw	r28, 0x2c	; 44
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	f8 94       	cli
    23b2:	de bf       	out	0x3e, r29	; 62
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	cd bf       	out	0x3d, r28	; 61
    23b8:	8b a7       	std	Y+43, r24	; 0x2b
    23ba:	6c a7       	std	Y+44, r22	; 0x2c
	/*RS  1*/
	DIO_enuWritePin(lcdarr[u8IndexCpy].lcdhwconfig.u8RS , DIO_HIGH);
    23bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    23be:	28 2f       	mov	r18, r24
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	c9 01       	movw	r24, r18
    23c4:	88 0f       	add	r24, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	82 0f       	add	r24, r18
    23ca:	93 1f       	adc	r25, r19
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	88 0f       	add	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	fc 01       	movw	r30, r24
    23d6:	ea 56       	subi	r30, 0x6A	; 106
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	80 81       	ld	r24, Z
    23dc:	61 e0       	ldi	r22, 0x01	; 1
    23de:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>


	if (lcdarr[u8IndexCpy].lcdswconfig.u8mode==LCD_8_BIT_MODE)
    23e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    23e4:	28 2f       	mov	r18, r24
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	c9 01       	movw	r24, r18
    23ea:	88 0f       	add	r24, r24
    23ec:	99 1f       	adc	r25, r25
    23ee:	82 0f       	add	r24, r18
    23f0:	93 1f       	adc	r25, r19
    23f2:	88 0f       	add	r24, r24
    23f4:	99 1f       	adc	r25, r25
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	fc 01       	movw	r30, r24
    23fc:	eb 56       	subi	r30, 0x6B	; 107
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	80 81       	ld	r24, Z
    2402:	81 70       	andi	r24, 0x01	; 1
    2404:	81 30       	cpi	r24, 0x01	; 1
    2406:	09 f0       	breq	.+2      	; 0x240a <LCD_voidSendChar+0x66>
    2408:	77 c0       	rjmp	.+238    	; 0x24f8 <LCD_voidSendChar+0x154>
	{
		LCDHelp(u8IndexCpy,u8CharCpy);
    240a:	8b a5       	ldd	r24, Y+43	; 0x2b
    240c:	6c a5       	ldd	r22, Y+44	; 0x2c
    240e:	0e 94 28 10 	call	0x2050	; 0x2050 <LCDHelp>
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	a0 e8       	ldi	r26, 0x80	; 128
    2418:	bf e3       	ldi	r27, 0x3F	; 63
    241a:	8f a3       	std	Y+39, r24	; 0x27
    241c:	98 a7       	std	Y+40, r25	; 0x28
    241e:	a9 a7       	std	Y+41, r26	; 0x29
    2420:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2422:	6f a1       	ldd	r22, Y+39	; 0x27
    2424:	78 a5       	ldd	r23, Y+40	; 0x28
    2426:	89 a5       	ldd	r24, Y+41	; 0x29
    2428:	9a a5       	ldd	r25, Y+42	; 0x2a
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	4a ef       	ldi	r20, 0xFA	; 250
    2430:	54 e4       	ldi	r21, 0x44	; 68
    2432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	8b a3       	std	Y+35, r24	; 0x23
    243c:	9c a3       	std	Y+36, r25	; 0x24
    243e:	ad a3       	std	Y+37, r26	; 0x25
    2440:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2442:	6b a1       	ldd	r22, Y+35	; 0x23
    2444:	7c a1       	ldd	r23, Y+36	; 0x24
    2446:	8d a1       	ldd	r24, Y+37	; 0x25
    2448:	9e a1       	ldd	r25, Y+38	; 0x26
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e8       	ldi	r20, 0x80	; 128
    2450:	5f e3       	ldi	r21, 0x3F	; 63
    2452:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2456:	88 23       	and	r24, r24
    2458:	2c f4       	brge	.+10     	; 0x2464 <LCD_voidSendChar+0xc0>
		__ticks = 1;
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	9a a3       	std	Y+34, r25	; 0x22
    2460:	89 a3       	std	Y+33, r24	; 0x21
    2462:	3f c0       	rjmp	.+126    	; 0x24e2 <LCD_voidSendChar+0x13e>
	else if (__tmp > 65535)
    2464:	6b a1       	ldd	r22, Y+35	; 0x23
    2466:	7c a1       	ldd	r23, Y+36	; 0x24
    2468:	8d a1       	ldd	r24, Y+37	; 0x25
    246a:	9e a1       	ldd	r25, Y+38	; 0x26
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	3f ef       	ldi	r19, 0xFF	; 255
    2470:	4f e7       	ldi	r20, 0x7F	; 127
    2472:	57 e4       	ldi	r21, 0x47	; 71
    2474:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2478:	18 16       	cp	r1, r24
    247a:	4c f5       	brge	.+82     	; 0x24ce <LCD_voidSendChar+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247c:	6f a1       	ldd	r22, Y+39	; 0x27
    247e:	78 a5       	ldd	r23, Y+40	; 0x28
    2480:	89 a5       	ldd	r24, Y+41	; 0x29
    2482:	9a a5       	ldd	r25, Y+42	; 0x2a
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e2       	ldi	r20, 0x20	; 32
    248a:	51 e4       	ldi	r21, 0x41	; 65
    248c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	bc 01       	movw	r22, r24
    2496:	cd 01       	movw	r24, r26
    2498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	9a a3       	std	Y+34, r25	; 0x22
    24a2:	89 a3       	std	Y+33, r24	; 0x21
    24a4:	0f c0       	rjmp	.+30     	; 0x24c4 <LCD_voidSendChar+0x120>
    24a6:	88 ec       	ldi	r24, 0xC8	; 200
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	98 a3       	std	Y+32, r25	; 0x20
    24ac:	8f 8f       	std	Y+31, r24	; 0x1f
    24ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24b0:	98 a1       	ldd	r25, Y+32	; 0x20
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	f1 f7       	brne	.-4      	; 0x24b2 <LCD_voidSendChar+0x10e>
    24b6:	98 a3       	std	Y+32, r25	; 0x20
    24b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ba:	89 a1       	ldd	r24, Y+33	; 0x21
    24bc:	9a a1       	ldd	r25, Y+34	; 0x22
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	9a a3       	std	Y+34, r25	; 0x22
    24c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c4:	89 a1       	ldd	r24, Y+33	; 0x21
    24c6:	9a a1       	ldd	r25, Y+34	; 0x22
    24c8:	00 97       	sbiw	r24, 0x00	; 0
    24ca:	69 f7       	brne	.-38     	; 0x24a6 <LCD_voidSendChar+0x102>
    24cc:	05 c1       	rjmp	.+522    	; 0x26d8 <LCD_voidSendChar+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ce:	6b a1       	ldd	r22, Y+35	; 0x23
    24d0:	7c a1       	ldd	r23, Y+36	; 0x24
    24d2:	8d a1       	ldd	r24, Y+37	; 0x25
    24d4:	9e a1       	ldd	r25, Y+38	; 0x26
    24d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	9a a3       	std	Y+34, r25	; 0x22
    24e0:	89 a3       	std	Y+33, r24	; 0x21
    24e2:	89 a1       	ldd	r24, Y+33	; 0x21
    24e4:	9a a1       	ldd	r25, Y+34	; 0x22
    24e6:	9e 8f       	std	Y+30, r25	; 0x1e
    24e8:	8d 8f       	std	Y+29, r24	; 0x1d
    24ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <LCD_voidSendChar+0x14a>
    24f2:	9e 8f       	std	Y+30, r25	; 0x1e
    24f4:	8d 8f       	std	Y+29, r24	; 0x1d
    24f6:	f0 c0       	rjmp	.+480    	; 0x26d8 <LCD_voidSendChar+0x334>
		_delay_ms(1);

	}
	else
	{
		LCDHelp(u8IndexCpy,u8CharCpy);
    24f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    24fa:	6c a5       	ldd	r22, Y+44	; 0x2c
    24fc:	0e 94 28 10 	call	0x2050	; 0x2050 <LCDHelp>
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	a0 e8       	ldi	r26, 0x80	; 128
    2506:	bf e3       	ldi	r27, 0x3F	; 63
    2508:	89 8f       	std	Y+25, r24	; 0x19
    250a:	9a 8f       	std	Y+26, r25	; 0x1a
    250c:	ab 8f       	std	Y+27, r26	; 0x1b
    250e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2510:	69 8d       	ldd	r22, Y+25	; 0x19
    2512:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2514:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2516:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	4a ef       	ldi	r20, 0xFA	; 250
    251e:	54 e4       	ldi	r21, 0x44	; 68
    2520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	8d 8b       	std	Y+21, r24	; 0x15
    252a:	9e 8b       	std	Y+22, r25	; 0x16
    252c:	af 8b       	std	Y+23, r26	; 0x17
    252e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2530:	6d 89       	ldd	r22, Y+21	; 0x15
    2532:	7e 89       	ldd	r23, Y+22	; 0x16
    2534:	8f 89       	ldd	r24, Y+23	; 0x17
    2536:	98 8d       	ldd	r25, Y+24	; 0x18
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	40 e8       	ldi	r20, 0x80	; 128
    253e:	5f e3       	ldi	r21, 0x3F	; 63
    2540:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2544:	88 23       	and	r24, r24
    2546:	2c f4       	brge	.+10     	; 0x2552 <LCD_voidSendChar+0x1ae>
		__ticks = 1;
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	9c 8b       	std	Y+20, r25	; 0x14
    254e:	8b 8b       	std	Y+19, r24	; 0x13
    2550:	3f c0       	rjmp	.+126    	; 0x25d0 <LCD_voidSendChar+0x22c>
	else if (__tmp > 65535)
    2552:	6d 89       	ldd	r22, Y+21	; 0x15
    2554:	7e 89       	ldd	r23, Y+22	; 0x16
    2556:	8f 89       	ldd	r24, Y+23	; 0x17
    2558:	98 8d       	ldd	r25, Y+24	; 0x18
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	3f ef       	ldi	r19, 0xFF	; 255
    255e:	4f e7       	ldi	r20, 0x7F	; 127
    2560:	57 e4       	ldi	r21, 0x47	; 71
    2562:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2566:	18 16       	cp	r1, r24
    2568:	4c f5       	brge	.+82     	; 0x25bc <LCD_voidSendChar+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256a:	69 8d       	ldd	r22, Y+25	; 0x19
    256c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    256e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2570:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e2       	ldi	r20, 0x20	; 32
    2578:	51 e4       	ldi	r21, 0x41	; 65
    257a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	bc 01       	movw	r22, r24
    2584:	cd 01       	movw	r24, r26
    2586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	9c 8b       	std	Y+20, r25	; 0x14
    2590:	8b 8b       	std	Y+19, r24	; 0x13
    2592:	0f c0       	rjmp	.+30     	; 0x25b2 <LCD_voidSendChar+0x20e>
    2594:	88 ec       	ldi	r24, 0xC8	; 200
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	9a 8b       	std	Y+18, r25	; 0x12
    259a:	89 8b       	std	Y+17, r24	; 0x11
    259c:	89 89       	ldd	r24, Y+17	; 0x11
    259e:	9a 89       	ldd	r25, Y+18	; 0x12
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <LCD_voidSendChar+0x1fc>
    25a4:	9a 8b       	std	Y+18, r25	; 0x12
    25a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a8:	8b 89       	ldd	r24, Y+19	; 0x13
    25aa:	9c 89       	ldd	r25, Y+20	; 0x14
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	9c 8b       	std	Y+20, r25	; 0x14
    25b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b2:	8b 89       	ldd	r24, Y+19	; 0x13
    25b4:	9c 89       	ldd	r25, Y+20	; 0x14
    25b6:	00 97       	sbiw	r24, 0x00	; 0
    25b8:	69 f7       	brne	.-38     	; 0x2594 <LCD_voidSendChar+0x1f0>
    25ba:	14 c0       	rjmp	.+40     	; 0x25e4 <LCD_voidSendChar+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25bc:	6d 89       	ldd	r22, Y+21	; 0x15
    25be:	7e 89       	ldd	r23, Y+22	; 0x16
    25c0:	8f 89       	ldd	r24, Y+23	; 0x17
    25c2:	98 8d       	ldd	r25, Y+24	; 0x18
    25c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	9c 8b       	std	Y+20, r25	; 0x14
    25ce:	8b 8b       	std	Y+19, r24	; 0x13
    25d0:	8b 89       	ldd	r24, Y+19	; 0x13
    25d2:	9c 89       	ldd	r25, Y+20	; 0x14
    25d4:	98 8b       	std	Y+16, r25	; 0x10
    25d6:	8f 87       	std	Y+15, r24	; 0x0f
    25d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25da:	98 89       	ldd	r25, Y+16	; 0x10
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	f1 f7       	brne	.-4      	; 0x25dc <LCD_voidSendChar+0x238>
    25e0:	98 8b       	std	Y+16, r25	; 0x10
    25e2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		LCDHelp(u8IndexCpy,u8CharCpy<<4); // if 4 bits mode, betb3at 3ala marteen//
    25e4:	8c a5       	ldd	r24, Y+44	; 0x2c
    25e6:	98 2f       	mov	r25, r24
    25e8:	92 95       	swap	r25
    25ea:	90 7f       	andi	r25, 0xF0	; 240
    25ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    25ee:	69 2f       	mov	r22, r25
    25f0:	0e 94 28 10 	call	0x2050	; 0x2050 <LCDHelp>
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	a0 e8       	ldi	r26, 0x80	; 128
    25fa:	bf e3       	ldi	r27, 0x3F	; 63
    25fc:	8b 87       	std	Y+11, r24	; 0x0b
    25fe:	9c 87       	std	Y+12, r25	; 0x0c
    2600:	ad 87       	std	Y+13, r26	; 0x0d
    2602:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2604:	6b 85       	ldd	r22, Y+11	; 0x0b
    2606:	7c 85       	ldd	r23, Y+12	; 0x0c
    2608:	8d 85       	ldd	r24, Y+13	; 0x0d
    260a:	9e 85       	ldd	r25, Y+14	; 0x0e
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	4a ef       	ldi	r20, 0xFA	; 250
    2612:	54 e4       	ldi	r21, 0x44	; 68
    2614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	8f 83       	std	Y+7, r24	; 0x07
    261e:	98 87       	std	Y+8, r25	; 0x08
    2620:	a9 87       	std	Y+9, r26	; 0x09
    2622:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2624:	6f 81       	ldd	r22, Y+7	; 0x07
    2626:	78 85       	ldd	r23, Y+8	; 0x08
    2628:	89 85       	ldd	r24, Y+9	; 0x09
    262a:	9a 85       	ldd	r25, Y+10	; 0x0a
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e8       	ldi	r20, 0x80	; 128
    2632:	5f e3       	ldi	r21, 0x3F	; 63
    2634:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2638:	88 23       	and	r24, r24
    263a:	2c f4       	brge	.+10     	; 0x2646 <LCD_voidSendChar+0x2a2>
		__ticks = 1;
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	9e 83       	std	Y+6, r25	; 0x06
    2642:	8d 83       	std	Y+5, r24	; 0x05
    2644:	3f c0       	rjmp	.+126    	; 0x26c4 <LCD_voidSendChar+0x320>
	else if (__tmp > 65535)
    2646:	6f 81       	ldd	r22, Y+7	; 0x07
    2648:	78 85       	ldd	r23, Y+8	; 0x08
    264a:	89 85       	ldd	r24, Y+9	; 0x09
    264c:	9a 85       	ldd	r25, Y+10	; 0x0a
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	3f ef       	ldi	r19, 0xFF	; 255
    2652:	4f e7       	ldi	r20, 0x7F	; 127
    2654:	57 e4       	ldi	r21, 0x47	; 71
    2656:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    265a:	18 16       	cp	r1, r24
    265c:	4c f5       	brge	.+82     	; 0x26b0 <LCD_voidSendChar+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2660:	7c 85       	ldd	r23, Y+12	; 0x0c
    2662:	8d 85       	ldd	r24, Y+13	; 0x0d
    2664:	9e 85       	ldd	r25, Y+14	; 0x0e
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	40 e2       	ldi	r20, 0x20	; 32
    266c:	51 e4       	ldi	r21, 0x41	; 65
    266e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	bc 01       	movw	r22, r24
    2678:	cd 01       	movw	r24, r26
    267a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	9e 83       	std	Y+6, r25	; 0x06
    2684:	8d 83       	std	Y+5, r24	; 0x05
    2686:	0f c0       	rjmp	.+30     	; 0x26a6 <LCD_voidSendChar+0x302>
    2688:	88 ec       	ldi	r24, 0xC8	; 200
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	9c 83       	std	Y+4, r25	; 0x04
    268e:	8b 83       	std	Y+3, r24	; 0x03
    2690:	8b 81       	ldd	r24, Y+3	; 0x03
    2692:	9c 81       	ldd	r25, Y+4	; 0x04
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	f1 f7       	brne	.-4      	; 0x2694 <LCD_voidSendChar+0x2f0>
    2698:	9c 83       	std	Y+4, r25	; 0x04
    269a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269c:	8d 81       	ldd	r24, Y+5	; 0x05
    269e:	9e 81       	ldd	r25, Y+6	; 0x06
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	9e 83       	std	Y+6, r25	; 0x06
    26a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a6:	8d 81       	ldd	r24, Y+5	; 0x05
    26a8:	9e 81       	ldd	r25, Y+6	; 0x06
    26aa:	00 97       	sbiw	r24, 0x00	; 0
    26ac:	69 f7       	brne	.-38     	; 0x2688 <LCD_voidSendChar+0x2e4>
    26ae:	14 c0       	rjmp	.+40     	; 0x26d8 <LCD_voidSendChar+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b0:	6f 81       	ldd	r22, Y+7	; 0x07
    26b2:	78 85       	ldd	r23, Y+8	; 0x08
    26b4:	89 85       	ldd	r24, Y+9	; 0x09
    26b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	9e 83       	std	Y+6, r25	; 0x06
    26c2:	8d 83       	std	Y+5, r24	; 0x05
    26c4:	8d 81       	ldd	r24, Y+5	; 0x05
    26c6:	9e 81       	ldd	r25, Y+6	; 0x06
    26c8:	9a 83       	std	Y+2, r25	; 0x02
    26ca:	89 83       	std	Y+1, r24	; 0x01
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	9a 81       	ldd	r25, Y+2	; 0x02
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	f1 f7       	brne	.-4      	; 0x26d0 <LCD_voidSendChar+0x32c>
    26d4:	9a 83       	std	Y+2, r25	; 0x02
    26d6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);

	}

	}
    26d8:	ac 96       	adiw	r28, 0x2c	; 44
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	f8 94       	cli
    26de:	de bf       	out	0x3e, r29	; 62
    26e0:	0f be       	out	0x3f, r0	; 63
    26e2:	cd bf       	out	0x3d, r28	; 61
    26e4:	cf 91       	pop	r28
    26e6:	df 91       	pop	r29
    26e8:	08 95       	ret

000026ea <LCD_voidSendCommand>:



void LCD_voidSendCommand(uint8 u8IndexCpy, uint8 u8CommandCpy)
{
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
    26f2:	ac 97       	sbiw	r28, 0x2c	; 44
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	cd bf       	out	0x3d, r28	; 61
    26fe:	8b a7       	std	Y+43, r24	; 0x2b
    2700:	6c a7       	std	Y+44, r22	; 0x2c
	if (lcdarr[u8IndexCpy].lcdswconfig.u8mode==LCD_8_BIT_MODE)
    2702:	8b a5       	ldd	r24, Y+43	; 0x2b
    2704:	28 2f       	mov	r18, r24
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	c9 01       	movw	r24, r18
    270a:	88 0f       	add	r24, r24
    270c:	99 1f       	adc	r25, r25
    270e:	82 0f       	add	r24, r18
    2710:	93 1f       	adc	r25, r19
    2712:	88 0f       	add	r24, r24
    2714:	99 1f       	adc	r25, r25
    2716:	88 0f       	add	r24, r24
    2718:	99 1f       	adc	r25, r25
    271a:	fc 01       	movw	r30, r24
    271c:	eb 56       	subi	r30, 0x6B	; 107
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	80 81       	ld	r24, Z
    2722:	81 70       	andi	r24, 0x01	; 1
    2724:	81 30       	cpi	r24, 0x01	; 1
    2726:	09 f0       	breq	.+2      	; 0x272a <LCD_voidSendCommand+0x40>
    2728:	77 c0       	rjmp	.+238    	; 0x2818 <LCD_voidSendCommand+0x12e>
		{
			voidWriteCmd(u8IndexCpy,u8CommandCpy);
    272a:	8b a5       	ldd	r24, Y+43	; 0x2b
    272c:	6c a5       	ldd	r22, Y+44	; 0x2c
    272e:	0e 94 05 10 	call	0x200a	; 0x200a <voidWriteCmd>
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	a0 e8       	ldi	r26, 0x80	; 128
    2738:	bf e3       	ldi	r27, 0x3F	; 63
    273a:	8f a3       	std	Y+39, r24	; 0x27
    273c:	98 a7       	std	Y+40, r25	; 0x28
    273e:	a9 a7       	std	Y+41, r26	; 0x29
    2740:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2742:	6f a1       	ldd	r22, Y+39	; 0x27
    2744:	78 a5       	ldd	r23, Y+40	; 0x28
    2746:	89 a5       	ldd	r24, Y+41	; 0x29
    2748:	9a a5       	ldd	r25, Y+42	; 0x2a
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	4a ef       	ldi	r20, 0xFA	; 250
    2750:	54 e4       	ldi	r21, 0x44	; 68
    2752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	8b a3       	std	Y+35, r24	; 0x23
    275c:	9c a3       	std	Y+36, r25	; 0x24
    275e:	ad a3       	std	Y+37, r26	; 0x25
    2760:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2762:	6b a1       	ldd	r22, Y+35	; 0x23
    2764:	7c a1       	ldd	r23, Y+36	; 0x24
    2766:	8d a1       	ldd	r24, Y+37	; 0x25
    2768:	9e a1       	ldd	r25, Y+38	; 0x26
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e8       	ldi	r20, 0x80	; 128
    2770:	5f e3       	ldi	r21, 0x3F	; 63
    2772:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2776:	88 23       	and	r24, r24
    2778:	2c f4       	brge	.+10     	; 0x2784 <LCD_voidSendCommand+0x9a>
		__ticks = 1;
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	9a a3       	std	Y+34, r25	; 0x22
    2780:	89 a3       	std	Y+33, r24	; 0x21
    2782:	3f c0       	rjmp	.+126    	; 0x2802 <LCD_voidSendCommand+0x118>
	else if (__tmp > 65535)
    2784:	6b a1       	ldd	r22, Y+35	; 0x23
    2786:	7c a1       	ldd	r23, Y+36	; 0x24
    2788:	8d a1       	ldd	r24, Y+37	; 0x25
    278a:	9e a1       	ldd	r25, Y+38	; 0x26
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	3f ef       	ldi	r19, 0xFF	; 255
    2790:	4f e7       	ldi	r20, 0x7F	; 127
    2792:	57 e4       	ldi	r21, 0x47	; 71
    2794:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2798:	18 16       	cp	r1, r24
    279a:	4c f5       	brge	.+82     	; 0x27ee <LCD_voidSendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    279c:	6f a1       	ldd	r22, Y+39	; 0x27
    279e:	78 a5       	ldd	r23, Y+40	; 0x28
    27a0:	89 a5       	ldd	r24, Y+41	; 0x29
    27a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e2       	ldi	r20, 0x20	; 32
    27aa:	51 e4       	ldi	r21, 0x41	; 65
    27ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	bc 01       	movw	r22, r24
    27b6:	cd 01       	movw	r24, r26
    27b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	9a a3       	std	Y+34, r25	; 0x22
    27c2:	89 a3       	std	Y+33, r24	; 0x21
    27c4:	0f c0       	rjmp	.+30     	; 0x27e4 <LCD_voidSendCommand+0xfa>
    27c6:	88 ec       	ldi	r24, 0xC8	; 200
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	98 a3       	std	Y+32, r25	; 0x20
    27cc:	8f 8f       	std	Y+31, r24	; 0x1f
    27ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27d0:	98 a1       	ldd	r25, Y+32	; 0x20
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	f1 f7       	brne	.-4      	; 0x27d2 <LCD_voidSendCommand+0xe8>
    27d6:	98 a3       	std	Y+32, r25	; 0x20
    27d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27da:	89 a1       	ldd	r24, Y+33	; 0x21
    27dc:	9a a1       	ldd	r25, Y+34	; 0x22
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	9a a3       	std	Y+34, r25	; 0x22
    27e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e4:	89 a1       	ldd	r24, Y+33	; 0x21
    27e6:	9a a1       	ldd	r25, Y+34	; 0x22
    27e8:	00 97       	sbiw	r24, 0x00	; 0
    27ea:	69 f7       	brne	.-38     	; 0x27c6 <LCD_voidSendCommand+0xdc>
    27ec:	05 c1       	rjmp	.+522    	; 0x29f8 <LCD_voidSendCommand+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ee:	6b a1       	ldd	r22, Y+35	; 0x23
    27f0:	7c a1       	ldd	r23, Y+36	; 0x24
    27f2:	8d a1       	ldd	r24, Y+37	; 0x25
    27f4:	9e a1       	ldd	r25, Y+38	; 0x26
    27f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	9a a3       	std	Y+34, r25	; 0x22
    2800:	89 a3       	std	Y+33, r24	; 0x21
    2802:	89 a1       	ldd	r24, Y+33	; 0x21
    2804:	9a a1       	ldd	r25, Y+34	; 0x22
    2806:	9e 8f       	std	Y+30, r25	; 0x1e
    2808:	8d 8f       	std	Y+29, r24	; 0x1d
    280a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    280c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	f1 f7       	brne	.-4      	; 0x280e <LCD_voidSendCommand+0x124>
    2812:	9e 8f       	std	Y+30, r25	; 0x1e
    2814:	8d 8f       	std	Y+29, r24	; 0x1d
    2816:	f0 c0       	rjmp	.+480    	; 0x29f8 <LCD_voidSendCommand+0x30e>
			_delay_ms(1);

		}
		else
		{
			voidWriteCmd(u8IndexCpy,u8CommandCpy);
    2818:	8b a5       	ldd	r24, Y+43	; 0x2b
    281a:	6c a5       	ldd	r22, Y+44	; 0x2c
    281c:	0e 94 05 10 	call	0x200a	; 0x200a <voidWriteCmd>
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	a0 e8       	ldi	r26, 0x80	; 128
    2826:	bf e3       	ldi	r27, 0x3F	; 63
    2828:	89 8f       	std	Y+25, r24	; 0x19
    282a:	9a 8f       	std	Y+26, r25	; 0x1a
    282c:	ab 8f       	std	Y+27, r26	; 0x1b
    282e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2830:	69 8d       	ldd	r22, Y+25	; 0x19
    2832:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2834:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2836:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	4a ef       	ldi	r20, 0xFA	; 250
    283e:	54 e4       	ldi	r21, 0x44	; 68
    2840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	8d 8b       	std	Y+21, r24	; 0x15
    284a:	9e 8b       	std	Y+22, r25	; 0x16
    284c:	af 8b       	std	Y+23, r26	; 0x17
    284e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2850:	6d 89       	ldd	r22, Y+21	; 0x15
    2852:	7e 89       	ldd	r23, Y+22	; 0x16
    2854:	8f 89       	ldd	r24, Y+23	; 0x17
    2856:	98 8d       	ldd	r25, Y+24	; 0x18
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	40 e8       	ldi	r20, 0x80	; 128
    285e:	5f e3       	ldi	r21, 0x3F	; 63
    2860:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2864:	88 23       	and	r24, r24
    2866:	2c f4       	brge	.+10     	; 0x2872 <LCD_voidSendCommand+0x188>
		__ticks = 1;
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	9c 8b       	std	Y+20, r25	; 0x14
    286e:	8b 8b       	std	Y+19, r24	; 0x13
    2870:	3f c0       	rjmp	.+126    	; 0x28f0 <LCD_voidSendCommand+0x206>
	else if (__tmp > 65535)
    2872:	6d 89       	ldd	r22, Y+21	; 0x15
    2874:	7e 89       	ldd	r23, Y+22	; 0x16
    2876:	8f 89       	ldd	r24, Y+23	; 0x17
    2878:	98 8d       	ldd	r25, Y+24	; 0x18
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	3f ef       	ldi	r19, 0xFF	; 255
    287e:	4f e7       	ldi	r20, 0x7F	; 127
    2880:	57 e4       	ldi	r21, 0x47	; 71
    2882:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2886:	18 16       	cp	r1, r24
    2888:	4c f5       	brge	.+82     	; 0x28dc <LCD_voidSendCommand+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    288a:	69 8d       	ldd	r22, Y+25	; 0x19
    288c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    288e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2890:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	40 e2       	ldi	r20, 0x20	; 32
    2898:	51 e4       	ldi	r21, 0x41	; 65
    289a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	bc 01       	movw	r22, r24
    28a4:	cd 01       	movw	r24, r26
    28a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	9c 8b       	std	Y+20, r25	; 0x14
    28b0:	8b 8b       	std	Y+19, r24	; 0x13
    28b2:	0f c0       	rjmp	.+30     	; 0x28d2 <LCD_voidSendCommand+0x1e8>
    28b4:	88 ec       	ldi	r24, 0xC8	; 200
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	9a 8b       	std	Y+18, r25	; 0x12
    28ba:	89 8b       	std	Y+17, r24	; 0x11
    28bc:	89 89       	ldd	r24, Y+17	; 0x11
    28be:	9a 89       	ldd	r25, Y+18	; 0x12
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	f1 f7       	brne	.-4      	; 0x28c0 <LCD_voidSendCommand+0x1d6>
    28c4:	9a 8b       	std	Y+18, r25	; 0x12
    28c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c8:	8b 89       	ldd	r24, Y+19	; 0x13
    28ca:	9c 89       	ldd	r25, Y+20	; 0x14
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	9c 8b       	std	Y+20, r25	; 0x14
    28d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d2:	8b 89       	ldd	r24, Y+19	; 0x13
    28d4:	9c 89       	ldd	r25, Y+20	; 0x14
    28d6:	00 97       	sbiw	r24, 0x00	; 0
    28d8:	69 f7       	brne	.-38     	; 0x28b4 <LCD_voidSendCommand+0x1ca>
    28da:	14 c0       	rjmp	.+40     	; 0x2904 <LCD_voidSendCommand+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28dc:	6d 89       	ldd	r22, Y+21	; 0x15
    28de:	7e 89       	ldd	r23, Y+22	; 0x16
    28e0:	8f 89       	ldd	r24, Y+23	; 0x17
    28e2:	98 8d       	ldd	r25, Y+24	; 0x18
    28e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	9c 8b       	std	Y+20, r25	; 0x14
    28ee:	8b 8b       	std	Y+19, r24	; 0x13
    28f0:	8b 89       	ldd	r24, Y+19	; 0x13
    28f2:	9c 89       	ldd	r25, Y+20	; 0x14
    28f4:	98 8b       	std	Y+16, r25	; 0x10
    28f6:	8f 87       	std	Y+15, r24	; 0x0f
    28f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28fa:	98 89       	ldd	r25, Y+16	; 0x10
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	f1 f7       	brne	.-4      	; 0x28fc <LCD_voidSendCommand+0x212>
    2900:	98 8b       	std	Y+16, r25	; 0x10
    2902:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);
			voidWriteCmd(u8IndexCpy,u8CommandCpy<<4);
    2904:	8c a5       	ldd	r24, Y+44	; 0x2c
    2906:	98 2f       	mov	r25, r24
    2908:	92 95       	swap	r25
    290a:	90 7f       	andi	r25, 0xF0	; 240
    290c:	8b a5       	ldd	r24, Y+43	; 0x2b
    290e:	69 2f       	mov	r22, r25
    2910:	0e 94 05 10 	call	0x200a	; 0x200a <voidWriteCmd>
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	a0 e8       	ldi	r26, 0x80	; 128
    291a:	bf e3       	ldi	r27, 0x3F	; 63
    291c:	8b 87       	std	Y+11, r24	; 0x0b
    291e:	9c 87       	std	Y+12, r25	; 0x0c
    2920:	ad 87       	std	Y+13, r26	; 0x0d
    2922:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2924:	6b 85       	ldd	r22, Y+11	; 0x0b
    2926:	7c 85       	ldd	r23, Y+12	; 0x0c
    2928:	8d 85       	ldd	r24, Y+13	; 0x0d
    292a:	9e 85       	ldd	r25, Y+14	; 0x0e
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	4a ef       	ldi	r20, 0xFA	; 250
    2932:	54 e4       	ldi	r21, 0x44	; 68
    2934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	8f 83       	std	Y+7, r24	; 0x07
    293e:	98 87       	std	Y+8, r25	; 0x08
    2940:	a9 87       	std	Y+9, r26	; 0x09
    2942:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2944:	6f 81       	ldd	r22, Y+7	; 0x07
    2946:	78 85       	ldd	r23, Y+8	; 0x08
    2948:	89 85       	ldd	r24, Y+9	; 0x09
    294a:	9a 85       	ldd	r25, Y+10	; 0x0a
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	40 e8       	ldi	r20, 0x80	; 128
    2952:	5f e3       	ldi	r21, 0x3F	; 63
    2954:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2958:	88 23       	and	r24, r24
    295a:	2c f4       	brge	.+10     	; 0x2966 <LCD_voidSendCommand+0x27c>
		__ticks = 1;
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	9e 83       	std	Y+6, r25	; 0x06
    2962:	8d 83       	std	Y+5, r24	; 0x05
    2964:	3f c0       	rjmp	.+126    	; 0x29e4 <LCD_voidSendCommand+0x2fa>
	else if (__tmp > 65535)
    2966:	6f 81       	ldd	r22, Y+7	; 0x07
    2968:	78 85       	ldd	r23, Y+8	; 0x08
    296a:	89 85       	ldd	r24, Y+9	; 0x09
    296c:	9a 85       	ldd	r25, Y+10	; 0x0a
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	3f ef       	ldi	r19, 0xFF	; 255
    2972:	4f e7       	ldi	r20, 0x7F	; 127
    2974:	57 e4       	ldi	r21, 0x47	; 71
    2976:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    297a:	18 16       	cp	r1, r24
    297c:	4c f5       	brge	.+82     	; 0x29d0 <LCD_voidSendCommand+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    297e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2980:	7c 85       	ldd	r23, Y+12	; 0x0c
    2982:	8d 85       	ldd	r24, Y+13	; 0x0d
    2984:	9e 85       	ldd	r25, Y+14	; 0x0e
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e2       	ldi	r20, 0x20	; 32
    298c:	51 e4       	ldi	r21, 0x41	; 65
    298e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	bc 01       	movw	r22, r24
    2998:	cd 01       	movw	r24, r26
    299a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	9e 83       	std	Y+6, r25	; 0x06
    29a4:	8d 83       	std	Y+5, r24	; 0x05
    29a6:	0f c0       	rjmp	.+30     	; 0x29c6 <LCD_voidSendCommand+0x2dc>
    29a8:	88 ec       	ldi	r24, 0xC8	; 200
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	9c 83       	std	Y+4, r25	; 0x04
    29ae:	8b 83       	std	Y+3, r24	; 0x03
    29b0:	8b 81       	ldd	r24, Y+3	; 0x03
    29b2:	9c 81       	ldd	r25, Y+4	; 0x04
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <LCD_voidSendCommand+0x2ca>
    29b8:	9c 83       	std	Y+4, r25	; 0x04
    29ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29bc:	8d 81       	ldd	r24, Y+5	; 0x05
    29be:	9e 81       	ldd	r25, Y+6	; 0x06
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	9e 83       	std	Y+6, r25	; 0x06
    29c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c6:	8d 81       	ldd	r24, Y+5	; 0x05
    29c8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ca:	00 97       	sbiw	r24, 0x00	; 0
    29cc:	69 f7       	brne	.-38     	; 0x29a8 <LCD_voidSendCommand+0x2be>
    29ce:	14 c0       	rjmp	.+40     	; 0x29f8 <LCD_voidSendCommand+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d0:	6f 81       	ldd	r22, Y+7	; 0x07
    29d2:	78 85       	ldd	r23, Y+8	; 0x08
    29d4:	89 85       	ldd	r24, Y+9	; 0x09
    29d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	9e 83       	std	Y+6, r25	; 0x06
    29e2:	8d 83       	std	Y+5, r24	; 0x05
    29e4:	8d 81       	ldd	r24, Y+5	; 0x05
    29e6:	9e 81       	ldd	r25, Y+6	; 0x06
    29e8:	9a 83       	std	Y+2, r25	; 0x02
    29ea:	89 83       	std	Y+1, r24	; 0x01
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	9a 81       	ldd	r25, Y+2	; 0x02
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <LCD_voidSendCommand+0x306>
    29f4:	9a 83       	std	Y+2, r25	; 0x02
    29f6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);
		}

}
    29f8:	ac 96       	adiw	r28, 0x2c	; 44
    29fa:	0f b6       	in	r0, 0x3f	; 63
    29fc:	f8 94       	cli
    29fe:	de bf       	out	0x3e, r29	; 62
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	cd bf       	out	0x3d, r28	; 61
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	08 95       	ret

00002a0a <LCD_voidSendString>:



void LCD_voidSendString(uint8 u8IndexCpy, uint8* pau8CharCpy)
{
    2a0a:	df 93       	push	r29
    2a0c:	cf 93       	push	r28
    2a0e:	00 d0       	rcall	.+0      	; 0x2a10 <LCD_voidSendString+0x6>
    2a10:	00 d0       	rcall	.+0      	; 0x2a12 <LCD_voidSendString+0x8>
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
    2a16:	8a 83       	std	Y+2, r24	; 0x02
    2a18:	7c 83       	std	Y+4, r23	; 0x04
    2a1a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 u8CntLoc=0;
    2a1c:	19 82       	std	Y+1, r1	; 0x01
    2a1e:	10 c0       	rjmp	.+32     	; 0x2a40 <LCD_voidSendString+0x36>
	while(pau8CharCpy[u8CntLoc]!= '\0')
			{
				LCD_voidSendChar(u8IndexCpy,pau8CharCpy[u8CntLoc])	;
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	28 2f       	mov	r18, r24
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	8b 81       	ldd	r24, Y+3	; 0x03
    2a28:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2a:	fc 01       	movw	r30, r24
    2a2c:	e2 0f       	add	r30, r18
    2a2e:	f3 1f       	adc	r31, r19
    2a30:	90 81       	ld	r25, Z
    2a32:	8a 81       	ldd	r24, Y+2	; 0x02
    2a34:	69 2f       	mov	r22, r25
    2a36:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
				u8CntLoc++;
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	8f 5f       	subi	r24, 0xFF	; 255
    2a3e:	89 83       	std	Y+1, r24	; 0x01


void LCD_voidSendString(uint8 u8IndexCpy, uint8* pau8CharCpy)
{
	uint8 u8CntLoc=0;
	while(pau8CharCpy[u8CntLoc]!= '\0')
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	28 2f       	mov	r18, r24
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	e2 0f       	add	r30, r18
    2a4e:	f3 1f       	adc	r31, r19
    2a50:	80 81       	ld	r24, Z
    2a52:	88 23       	and	r24, r24
    2a54:	29 f7       	brne	.-54     	; 0x2a20 <LCD_voidSendString+0x16>
			{
				LCD_voidSendChar(u8IndexCpy,pau8CharCpy[u8CntLoc])	;
				u8CntLoc++;
			}
}
    2a56:	0f 90       	pop	r0
    2a58:	0f 90       	pop	r0
    2a5a:	0f 90       	pop	r0
    2a5c:	0f 90       	pop	r0
    2a5e:	cf 91       	pop	r28
    2a60:	df 91       	pop	r29
    2a62:	08 95       	ret

00002a64 <LCD_voidClrScr>:

void LCD_voidClrScr(uint8 u8IndexCpy)
	{
    2a64:	df 93       	push	r29
    2a66:	cf 93       	push	r28
    2a68:	0f 92       	push	r0
    2a6a:	cd b7       	in	r28, 0x3d	; 61
    2a6c:	de b7       	in	r29, 0x3e	; 62
    2a6e:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidSendCommand(u8IndexCpy,0x01);
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	61 e0       	ldi	r22, 0x01	; 1
    2a74:	0e 94 75 13 	call	0x26ea	; 0x26ea <LCD_voidSendCommand>
	}
    2a78:	0f 90       	pop	r0
    2a7a:	cf 91       	pop	r28
    2a7c:	df 91       	pop	r29
    2a7e:	08 95       	ret

00002a80 <LCD_voidSendNumber>:

void LCD_voidSendNumber(uint8 u8IndexCpy,uint16 u16NumberCpy )
{
    2a80:	df 93       	push	r29
    2a82:	cf 93       	push	r28
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
    2a88:	2b 97       	sbiw	r28, 0x0b	; 11
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
    2a94:	89 87       	std	Y+9, r24	; 0x09
    2a96:	7b 87       	std	Y+11, r23	; 0x0b
    2a98:	6a 87       	std	Y+10, r22	; 0x0a

	uint8 au8NumberLoc[6]={0};/* store the number which consists of 6 digits in array*/
    2a9a:	86 e0       	ldi	r24, 0x06	; 6
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	33 96       	adiw	r30, 0x03	; 3
    2aa0:	df 01       	movw	r26, r30
    2aa2:	98 2f       	mov	r25, r24
    2aa4:	1d 92       	st	X+, r1
    2aa6:	9a 95       	dec	r25
    2aa8:	e9 f7       	brne	.-6      	; 0x2aa4 <LCD_voidSendNumber+0x24>
	uint8 u8IndxLoc=5;
    2aaa:	85 e0       	ldi	r24, 0x05	; 5
    2aac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 u8CounterLoc=0;
    2aae:	19 82       	std	Y+1, r1	; 0x01
    2ab0:	1d c0       	rjmp	.+58     	; 0x2aec <LCD_voidSendNumber+0x6c>

	while(u16NumberCpy!=0 && u16NumberCpy<1000000)
	{
		au8NumberLoc[u8IndxLoc]=u16NumberCpy%10;
    2ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab4:	e8 2f       	mov	r30, r24
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2aba:	9b 85       	ldd	r25, Y+11	; 0x0b
    2abc:	2a e0       	ldi	r18, 0x0A	; 10
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	b9 01       	movw	r22, r18
    2ac2:	0e 94 21 24 	call	0x4842	; 0x4842 <__udivmodhi4>
    2ac6:	28 2f       	mov	r18, r24
    2ac8:	ce 01       	movw	r24, r28
    2aca:	03 96       	adiw	r24, 0x03	; 3
    2acc:	e8 0f       	add	r30, r24
    2ace:	f9 1f       	adc	r31, r25
    2ad0:	20 83       	st	Z, r18
		u16NumberCpy/=10;
    2ad2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ad4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ad6:	2a e0       	ldi	r18, 0x0A	; 10
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	b9 01       	movw	r22, r18
    2adc:	0e 94 21 24 	call	0x4842	; 0x4842 <__udivmodhi4>
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	9b 87       	std	Y+11, r25	; 0x0b
    2ae4:	8a 87       	std	Y+10, r24	; 0x0a
		u8IndxLoc--;
    2ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae8:	81 50       	subi	r24, 0x01	; 1
    2aea:	8a 83       	std	Y+2, r24	; 0x02

	uint8 au8NumberLoc[6]={0};/* store the number which consists of 6 digits in array*/
	uint8 u8IndxLoc=5;
	uint8 u8CounterLoc=0;

	while(u16NumberCpy!=0 && u16NumberCpy<1000000)
    2aec:	8a 85       	ldd	r24, Y+10	; 0x0a
    2aee:	9b 85       	ldd	r25, Y+11	; 0x0b
    2af0:	00 97       	sbiw	r24, 0x00	; 0
    2af2:	f9 f6       	brne	.-66     	; 0x2ab2 <LCD_voidSendNumber+0x32>
    2af4:	03 c0       	rjmp	.+6      	; 0x2afc <LCD_voidSendNumber+0x7c>
		u8IndxLoc--;
	}

	while(au8NumberLoc[u8CounterLoc]==0)
	{
		u8CounterLoc++;
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	8f 5f       	subi	r24, 0xFF	; 255
    2afa:	89 83       	std	Y+1, r24	; 0x01
		au8NumberLoc[u8IndxLoc]=u16NumberCpy%10;
		u16NumberCpy/=10;
		u8IndxLoc--;
	}

	while(au8NumberLoc[u8CounterLoc]==0)
    2afc:	89 81       	ldd	r24, Y+1	; 0x01
    2afe:	28 2f       	mov	r18, r24
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	ce 01       	movw	r24, r28
    2b04:	03 96       	adiw	r24, 0x03	; 3
    2b06:	fc 01       	movw	r30, r24
    2b08:	e2 0f       	add	r30, r18
    2b0a:	f3 1f       	adc	r31, r19
    2b0c:	80 81       	ld	r24, Z
    2b0e:	88 23       	and	r24, r24
    2b10:	91 f3       	breq	.-28     	; 0x2af6 <LCD_voidSendNumber+0x76>
    2b12:	12 c0       	rjmp	.+36     	; 0x2b38 <LCD_voidSendNumber+0xb8>
	{
		u8CounterLoc++;
	}
	while(u8CounterLoc<6)
	{
		LCD_voidSendChar(u8IndexCpy,au8NumberLoc[u8CounterLoc]+48);
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	28 2f       	mov	r18, r24
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	ce 01       	movw	r24, r28
    2b1c:	03 96       	adiw	r24, 0x03	; 3
    2b1e:	fc 01       	movw	r30, r24
    2b20:	e2 0f       	add	r30, r18
    2b22:	f3 1f       	adc	r31, r19
    2b24:	80 81       	ld	r24, Z
    2b26:	98 2f       	mov	r25, r24
    2b28:	90 5d       	subi	r25, 0xD0	; 208
    2b2a:	89 85       	ldd	r24, Y+9	; 0x09
    2b2c:	69 2f       	mov	r22, r25
    2b2e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
		u8CounterLoc++;
    2b32:	89 81       	ldd	r24, Y+1	; 0x01
    2b34:	8f 5f       	subi	r24, 0xFF	; 255
    2b36:	89 83       	std	Y+1, r24	; 0x01

	while(au8NumberLoc[u8CounterLoc]==0)
	{
		u8CounterLoc++;
	}
	while(u8CounterLoc<6)
    2b38:	89 81       	ldd	r24, Y+1	; 0x01
    2b3a:	86 30       	cpi	r24, 0x06	; 6
    2b3c:	58 f3       	brcs	.-42     	; 0x2b14 <LCD_voidSendNumber+0x94>
	{
		LCD_voidSendChar(u8IndexCpy,au8NumberLoc[u8CounterLoc]+48);
		u8CounterLoc++;
	}
	}
    2b3e:	2b 96       	adiw	r28, 0x0b	; 11
    2b40:	0f b6       	in	r0, 0x3f	; 63
    2b42:	f8 94       	cli
    2b44:	de bf       	out	0x3e, r29	; 62
    2b46:	0f be       	out	0x3f, r0	; 63
    2b48:	cd bf       	out	0x3d, r28	; 61
    2b4a:	cf 91       	pop	r28
    2b4c:	df 91       	pop	r29
    2b4e:	08 95       	ret

00002b50 <LCD_voidDisplayHex>:


void LCD_voidDisplayHex(uint8 u8IndexCpy,uint16 u16DecNumberCpy )
{
    2b50:	df 93       	push	r29
    2b52:	cf 93       	push	r28
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
    2b58:	2f 97       	sbiw	r28, 0x0f	; 15
    2b5a:	0f b6       	in	r0, 0x3f	; 63
    2b5c:	f8 94       	cli
    2b5e:	de bf       	out	0x3e, r29	; 62
    2b60:	0f be       	out	0x3f, r0	; 63
    2b62:	cd bf       	out	0x3d, r28	; 61
    2b64:	8d 87       	std	Y+13, r24	; 0x0d
    2b66:	7f 87       	std	Y+15, r23	; 0x0f
    2b68:	6e 87       	std	Y+14, r22	; 0x0e
	uint8 au8NumberLoc[4]={0};
    2b6a:	19 86       	std	Y+9, r1	; 0x09
    2b6c:	1a 86       	std	Y+10, r1	; 0x0a
    2b6e:	1b 86       	std	Y+11, r1	; 0x0b
    2b70:	1c 86       	std	Y+12, r1	; 0x0c
	uint8 u8IndxLoc=3;
    2b72:	83 e0       	ldi	r24, 0x03	; 3
    2b74:	88 87       	std	Y+8, r24	; 0x08
	uint8 u8CounterLoc=0;
    2b76:	1f 82       	std	Y+7, r1	; 0x07
    2b78:	49 c0       	rjmp	.+146    	; 0x2c0c <LCD_voidDisplayHex+0xbc>
	uint16 u16remainder2;


	while(u16DecNumberCpy!=0 && u16DecNumberCpy <10000)
	{
		u16quotient=u16DecNumberCpy/16;
    2b7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b7e:	92 95       	swap	r25
    2b80:	82 95       	swap	r24
    2b82:	8f 70       	andi	r24, 0x0F	; 15
    2b84:	89 27       	eor	r24, r25
    2b86:	9f 70       	andi	r25, 0x0F	; 15
    2b88:	89 27       	eor	r24, r25
    2b8a:	9e 83       	std	Y+6, r25	; 0x06
    2b8c:	8d 83       	std	Y+5, r24	; 0x05
		u16remainder1=u16quotient*16;
    2b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b90:	9e 81       	ldd	r25, Y+6	; 0x06
    2b92:	82 95       	swap	r24
    2b94:	92 95       	swap	r25
    2b96:	90 7f       	andi	r25, 0xF0	; 240
    2b98:	98 27       	eor	r25, r24
    2b9a:	80 7f       	andi	r24, 0xF0	; 240
    2b9c:	98 27       	eor	r25, r24
    2b9e:	9c 83       	std	Y+4, r25	; 0x04
    2ba0:	8b 83       	std	Y+3, r24	; 0x03
		u16remainder2=u16DecNumberCpy-u16remainder1;
    2ba2:	2e 85       	ldd	r18, Y+14	; 0x0e
    2ba4:	3f 85       	ldd	r19, Y+15	; 0x0f
    2ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    2baa:	a9 01       	movw	r20, r18
    2bac:	48 1b       	sub	r20, r24
    2bae:	59 0b       	sbc	r21, r25
    2bb0:	ca 01       	movw	r24, r20
    2bb2:	9a 83       	std	Y+2, r25	; 0x02
    2bb4:	89 83       	std	Y+1, r24	; 0x01
		u16DecNumberCpy/=16;
    2bb6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bb8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bba:	92 95       	swap	r25
    2bbc:	82 95       	swap	r24
    2bbe:	8f 70       	andi	r24, 0x0F	; 15
    2bc0:	89 27       	eor	r24, r25
    2bc2:	9f 70       	andi	r25, 0x0F	; 15
    2bc4:	89 27       	eor	r24, r25
    2bc6:	9f 87       	std	Y+15, r25	; 0x0f
    2bc8:	8e 87       	std	Y+14, r24	; 0x0e
		u8IndxLoc--;
    2bca:	88 85       	ldd	r24, Y+8	; 0x08
    2bcc:	81 50       	subi	r24, 0x01	; 1
    2bce:	88 87       	std	Y+8, r24	; 0x08

		if(u16remainder2 <10)
    2bd0:	89 81       	ldd	r24, Y+1	; 0x01
    2bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd4:	8a 30       	cpi	r24, 0x0A	; 10
    2bd6:	91 05       	cpc	r25, r1
    2bd8:	68 f4       	brcc	.+26     	; 0x2bf4 <LCD_voidDisplayHex+0xa4>
		{
			au8NumberLoc[u8IndxLoc]=u16remainder2+48;
    2bda:	88 85       	ldd	r24, Y+8	; 0x08
    2bdc:	28 2f       	mov	r18, r24
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	48 2f       	mov	r20, r24
    2be4:	40 5d       	subi	r20, 0xD0	; 208
    2be6:	ce 01       	movw	r24, r28
    2be8:	09 96       	adiw	r24, 0x09	; 9
    2bea:	fc 01       	movw	r30, r24
    2bec:	e2 0f       	add	r30, r18
    2bee:	f3 1f       	adc	r31, r19
    2bf0:	40 83       	st	Z, r20
    2bf2:	0c c0       	rjmp	.+24     	; 0x2c0c <LCD_voidDisplayHex+0xbc>
		}
		else
		{
			au8NumberLoc[u8IndxLoc]=u16remainder2+55;
    2bf4:	88 85       	ldd	r24, Y+8	; 0x08
    2bf6:	28 2f       	mov	r18, r24
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	48 2f       	mov	r20, r24
    2bfe:	49 5c       	subi	r20, 0xC9	; 201
    2c00:	ce 01       	movw	r24, r28
    2c02:	09 96       	adiw	r24, 0x09	; 9
    2c04:	fc 01       	movw	r30, r24
    2c06:	e2 0f       	add	r30, r18
    2c08:	f3 1f       	adc	r31, r19
    2c0a:	40 83       	st	Z, r20
	uint16 u16quotient;
	uint16 u16remainder1;
	uint16 u16remainder2;


	while(u16DecNumberCpy!=0 && u16DecNumberCpy <10000)
    2c0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c0e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c10:	00 97       	sbiw	r24, 0x00	; 0
    2c12:	59 f0       	breq	.+22     	; 0x2c2a <LCD_voidDisplayHex+0xda>
    2c14:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c16:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c18:	57 e2       	ldi	r21, 0x27	; 39
    2c1a:	80 31       	cpi	r24, 0x10	; 16
    2c1c:	95 07       	cpc	r25, r21
    2c1e:	08 f4       	brcc	.+2      	; 0x2c22 <LCD_voidDisplayHex+0xd2>
    2c20:	ac cf       	rjmp	.-168    	; 0x2b7a <LCD_voidDisplayHex+0x2a>
    2c22:	03 c0       	rjmp	.+6      	; 0x2c2a <LCD_voidDisplayHex+0xda>
		}
	}

		while(au8NumberLoc[u8CounterLoc]==0)
			{
				u8CounterLoc++;
    2c24:	8f 81       	ldd	r24, Y+7	; 0x07
    2c26:	8f 5f       	subi	r24, 0xFF	; 255
    2c28:	8f 83       	std	Y+7, r24	; 0x07
		{
			au8NumberLoc[u8IndxLoc]=u16remainder2+55;
		}
	}

		while(au8NumberLoc[u8CounterLoc]==0)
    2c2a:	8f 81       	ldd	r24, Y+7	; 0x07
    2c2c:	28 2f       	mov	r18, r24
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	ce 01       	movw	r24, r28
    2c32:	09 96       	adiw	r24, 0x09	; 9
    2c34:	fc 01       	movw	r30, r24
    2c36:	e2 0f       	add	r30, r18
    2c38:	f3 1f       	adc	r31, r19
    2c3a:	80 81       	ld	r24, Z
    2c3c:	88 23       	and	r24, r24
    2c3e:	91 f3       	breq	.-28     	; 0x2c24 <LCD_voidDisplayHex+0xd4>
    2c40:	10 c0       	rjmp	.+32     	; 0x2c62 <LCD_voidDisplayHex+0x112>
			{
				u8CounterLoc++;
			}
	while(u8CounterLoc<4)
	{
		LCD_voidSendChar(u8IndexCpy,au8NumberLoc[u8CounterLoc]);
    2c42:	8f 81       	ldd	r24, Y+7	; 0x07
    2c44:	28 2f       	mov	r18, r24
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	ce 01       	movw	r24, r28
    2c4a:	09 96       	adiw	r24, 0x09	; 9
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	e2 0f       	add	r30, r18
    2c50:	f3 1f       	adc	r31, r19
    2c52:	90 81       	ld	r25, Z
    2c54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c56:	69 2f       	mov	r22, r25
    2c58:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
				u8CounterLoc++;
    2c5c:	8f 81       	ldd	r24, Y+7	; 0x07
    2c5e:	8f 5f       	subi	r24, 0xFF	; 255
    2c60:	8f 83       	std	Y+7, r24	; 0x07

		while(au8NumberLoc[u8CounterLoc]==0)
			{
				u8CounterLoc++;
			}
	while(u8CounterLoc<4)
    2c62:	8f 81       	ldd	r24, Y+7	; 0x07
    2c64:	84 30       	cpi	r24, 0x04	; 4
    2c66:	68 f3       	brcs	.-38     	; 0x2c42 <LCD_voidDisplayHex+0xf2>
	{
		LCD_voidSendChar(u8IndexCpy,au8NumberLoc[u8CounterLoc]);
				u8CounterLoc++;
	}

	}
    2c68:	2f 96       	adiw	r28, 0x0f	; 15
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	f8 94       	cli
    2c6e:	de bf       	out	0x3e, r29	; 62
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	cd bf       	out	0x3d, r28	; 61
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	08 95       	ret

00002c7a <LCD_voidMoveCourser>:


void LCD_voidMoveCourser(uint8 u8IndexCpy,uint8 u8RowCPy,uint8 u8ColmCpy)
{
    2c7a:	df 93       	push	r29
    2c7c:	cf 93       	push	r28
    2c7e:	00 d0       	rcall	.+0      	; 0x2c80 <LCD_voidMoveCourser+0x6>
    2c80:	00 d0       	rcall	.+0      	; 0x2c82 <LCD_voidMoveCourser+0x8>
    2c82:	00 d0       	rcall	.+0      	; 0x2c84 <LCD_voidMoveCourser+0xa>
    2c84:	cd b7       	in	r28, 0x3d	; 61
    2c86:	de b7       	in	r29, 0x3e	; 62
    2c88:	8a 83       	std	Y+2, r24	; 0x02
    2c8a:	6b 83       	std	Y+3, r22	; 0x03
    2c8c:	4c 83       	std	Y+4, r20	; 0x04
	uint8 u8adressLoc;

			switch(u8RowCPy)
    2c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c90:	28 2f       	mov	r18, r24
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	3e 83       	std	Y+6, r19	; 0x06
    2c96:	2d 83       	std	Y+5, r18	; 0x05
    2c98:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9c:	00 97       	sbiw	r24, 0x00	; 0
    2c9e:	31 f0       	breq	.+12     	; 0x2cac <LCD_voidMoveCourser+0x32>
    2ca0:	2d 81       	ldd	r18, Y+5	; 0x05
    2ca2:	3e 81       	ldd	r19, Y+6	; 0x06
    2ca4:	21 30       	cpi	r18, 0x01	; 1
    2ca6:	31 05       	cpc	r19, r1
    2ca8:	29 f0       	breq	.+10     	; 0x2cb4 <LCD_voidMoveCourser+0x3a>
    2caa:	07 c0       	rjmp	.+14     	; 0x2cba <LCD_voidMoveCourser+0x40>
			{
			case 0:
				u8adressLoc=0x80+u8ColmCpy;
    2cac:	8c 81       	ldd	r24, Y+4	; 0x04
    2cae:	80 58       	subi	r24, 0x80	; 128
    2cb0:	89 83       	std	Y+1, r24	; 0x01
    2cb2:	03 c0       	rjmp	.+6      	; 0x2cba <LCD_voidMoveCourser+0x40>
				break;
			case 1:
				u8adressLoc=0xC0+u8ColmCpy;
    2cb4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb6:	80 54       	subi	r24, 0x40	; 64
    2cb8:	89 83       	std	Y+1, r24	; 0x01

			}

		LCD_voidSendCommand(u8IndexCpy,u8adressLoc);
    2cba:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbc:	69 81       	ldd	r22, Y+1	; 0x01
    2cbe:	0e 94 75 13 	call	0x26ea	; 0x26ea <LCD_voidSendCommand>
}
    2cc2:	26 96       	adiw	r28, 0x06	; 6
    2cc4:	0f b6       	in	r0, 0x3f	; 63
    2cc6:	f8 94       	cli
    2cc8:	de bf       	out	0x3e, r29	; 62
    2cca:	0f be       	out	0x3f, r0	; 63
    2ccc:	cd bf       	out	0x3d, r28	; 61
    2cce:	cf 91       	pop	r28
    2cd0:	df 91       	pop	r29
    2cd2:	08 95       	ret

00002cd4 <KPD_voidInit>:
#include "KYEPAD_priv.h"



void KPD_voidInit(void)
{
    2cd4:	df 93       	push	r29
    2cd6:	cf 93       	push	r28
    2cd8:	cd b7       	in	r28, 0x3d	; 61
    2cda:	de b7       	in	r29, 0x3e	; 62
	DIO_enuWritePin(KPD_COL0,DIO_HIGH);
    2cdc:	80 e1       	ldi	r24, 0x10	; 16
    2cde:	61 e0       	ldi	r22, 0x01	; 1
    2ce0:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
	DIO_enuWritePin(KPD_COL1,DIO_HIGH);
    2ce4:	81 e1       	ldi	r24, 0x11	; 17
    2ce6:	61 e0       	ldi	r22, 0x01	; 1
    2ce8:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
	DIO_enuWritePin(KPD_COL2,DIO_HIGH);
    2cec:	82 e1       	ldi	r24, 0x12	; 18
    2cee:	61 e0       	ldi	r22, 0x01	; 1
    2cf0:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
	DIO_enuWritePin(KPD_COL3,DIO_HIGH);
    2cf4:	83 e1       	ldi	r24, 0x13	; 19
    2cf6:	61 e0       	ldi	r22, 0x01	; 1
    2cf8:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>

	DIO_enuStatePullup(KPD_ROW0,DIO_ACTIVATE_PULLUP);
    2cfc:	88 e1       	ldi	r24, 0x18	; 24
    2cfe:	61 e0       	ldi	r22, 0x01	; 1
    2d00:	0e 94 6f 07 	call	0xede	; 0xede <DIO_enuStatePullup>
	DIO_enuStatePullup(KPD_ROW1,DIO_ACTIVATE_PULLUP);
    2d04:	89 e1       	ldi	r24, 0x19	; 25
    2d06:	61 e0       	ldi	r22, 0x01	; 1
    2d08:	0e 94 6f 07 	call	0xede	; 0xede <DIO_enuStatePullup>
	DIO_enuStatePullup(KPD_ROW2,DIO_ACTIVATE_PULLUP);
    2d0c:	8a e1       	ldi	r24, 0x1A	; 26
    2d0e:	61 e0       	ldi	r22, 0x01	; 1
    2d10:	0e 94 6f 07 	call	0xede	; 0xede <DIO_enuStatePullup>
	DIO_enuStatePullup(KPD_ROW3,DIO_ACTIVATE_PULLUP);
    2d14:	8b e1       	ldi	r24, 0x1B	; 27
    2d16:	61 e0       	ldi	r22, 0x01	; 1
    2d18:	0e 94 6f 07 	call	0xede	; 0xede <DIO_enuStatePullup>

}
    2d1c:	cf 91       	pop	r28
    2d1e:	df 91       	pop	r29
    2d20:	08 95       	ret

00002d22 <KPD_u8GetPressedKey>:
uint8 KPD_u8GetPressedKey(void)
{
    2d22:	df 93       	push	r29
    2d24:	cf 93       	push	r28
    2d26:	00 d0       	rcall	.+0      	; 0x2d28 <KPD_u8GetPressedKey+0x6>
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
	static uint8 u8KpdColArr[4]={KPD_COL0,KPD_COL1,KPD_COL2,KPD_COL3};
	static uint8 u8KpdRowArr[4]={KPD_ROW0,KPD_ROW1,KPD_ROW2,KPD_ROW3};
	static uint8 u8KpdColIdx;
	static uint8 u8KpdRowIdx;
	static uint8 u8KpdPinState;
	uint8 u8KpdPressedKeyLoc=NOT_KEY_PRESSED;
    2d2c:	8f ef       	ldi	r24, 0xFF	; 255
    2d2e:	89 83       	std	Y+1, r24	; 0x01

	static uint8 au8KpdArrLoc[4][4]= KPD_PUTTONS;


	for (u8KpdColIdx=0 ;u8KpdColIdx<4 ;u8KpdColIdx++)
    2d30:	10 92 c8 00 	sts	0x00C8, r1
    2d34:	6d c0       	rjmp	.+218    	; 0x2e10 <KPD_u8GetPressedKey+0xee>
	{
		DIO_enuWritePin(u8KpdColArr[u8KpdColIdx],DIO_LOW);
    2d36:	80 91 c8 00 	lds	r24, 0x00C8
    2d3a:	88 2f       	mov	r24, r24
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	fc 01       	movw	r30, r24
    2d40:	ef 53       	subi	r30, 0x3F	; 63
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	80 81       	ld	r24, Z
    2d46:	60 e0       	ldi	r22, 0x00	; 0
    2d48:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>


		for(u8KpdRowIdx=0;u8KpdRowIdx<4;u8KpdRowIdx++)
    2d4c:	10 92 c7 00 	sts	0x00C7, r1
    2d50:	4a c0       	rjmp	.+148    	; 0x2de6 <KPD_u8GetPressedKey+0xc4>
		{
			DIO_enuReadPin(u8KpdRowArr[u8KpdRowIdx],&u8KpdPinState);
    2d52:	80 91 c7 00 	lds	r24, 0x00C7
    2d56:	88 2f       	mov	r24, r24
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	e3 54       	subi	r30, 0x43	; 67
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	80 81       	ld	r24, Z
    2d62:	26 ec       	ldi	r18, 0xC6	; 198
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	b9 01       	movw	r22, r18
    2d68:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <DIO_enuReadPin>
			if (u8KpdPinState==DIO_LOW)
    2d6c:	80 91 c6 00 	lds	r24, 0x00C6
    2d70:	88 23       	and	r24, r24
    2d72:	a1 f5       	brne	.+104    	; 0x2ddc <KPD_u8GetPressedKey+0xba>
			{
				u8KpdPressedKeyLoc=au8KpdArrLoc[u8KpdRowIdx][u8KpdColIdx];
    2d74:	80 91 c7 00 	lds	r24, 0x00C7
    2d78:	48 2f       	mov	r20, r24
    2d7a:	50 e0       	ldi	r21, 0x00	; 0
    2d7c:	80 91 c8 00 	lds	r24, 0x00C8
    2d80:	28 2f       	mov	r18, r24
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	ca 01       	movw	r24, r20
    2d86:	88 0f       	add	r24, r24
    2d88:	99 1f       	adc	r25, r25
    2d8a:	88 0f       	add	r24, r24
    2d8c:	99 1f       	adc	r25, r25
    2d8e:	82 0f       	add	r24, r18
    2d90:	93 1f       	adc	r25, r19
    2d92:	fc 01       	movw	r30, r24
    2d94:	e3 55       	subi	r30, 0x53	; 83
    2d96:	ff 4f       	sbci	r31, 0xFF	; 255
    2d98:	80 81       	ld	r24, Z
    2d9a:	89 83       	std	Y+1, r24	; 0x01
    2d9c:	0d c0       	rjmp	.+26     	; 0x2db8 <KPD_u8GetPressedKey+0x96>

				while(u8KpdPinState==DIO_LOW) /* to handle en el user yefdal dayes
					3ala el zorar w mayshelsh eido, w bardo hetet el debouncing */
				{
					DIO_enuReadPin(u8KpdRowArr[u8KpdRowIdx],&u8KpdPinState);
    2d9e:	80 91 c7 00 	lds	r24, 0x00C7
    2da2:	88 2f       	mov	r24, r24
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	fc 01       	movw	r30, r24
    2da8:	e3 54       	subi	r30, 0x43	; 67
    2daa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dac:	80 81       	ld	r24, Z
    2dae:	26 ec       	ldi	r18, 0xC6	; 198
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	b9 01       	movw	r22, r18
    2db4:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <DIO_enuReadPin>
			DIO_enuReadPin(u8KpdRowArr[u8KpdRowIdx],&u8KpdPinState);
			if (u8KpdPinState==DIO_LOW)
			{
				u8KpdPressedKeyLoc=au8KpdArrLoc[u8KpdRowIdx][u8KpdColIdx];

				while(u8KpdPinState==DIO_LOW) /* to handle en el user yefdal dayes
    2db8:	80 91 c6 00 	lds	r24, 0x00C6
    2dbc:	88 23       	and	r24, r24
    2dbe:	79 f3       	breq	.-34     	; 0x2d9e <KPD_u8GetPressedKey+0x7c>
					3ala el zorar w mayshelsh eido, w bardo hetet el debouncing */
				{
					DIO_enuReadPin(u8KpdRowArr[u8KpdRowIdx],&u8KpdPinState);
				}
				DIO_enuWritePin(u8KpdColArr[u8KpdColIdx],DIO_HIGH);
    2dc0:	80 91 c8 00 	lds	r24, 0x00C8
    2dc4:	88 2f       	mov	r24, r24
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	fc 01       	movw	r30, r24
    2dca:	ef 53       	subi	r30, 0x3F	; 63
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	80 81       	ld	r24, Z
    2dd0:	61 e0       	ldi	r22, 0x01	; 1
    2dd2:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>

				return u8KpdPressedKeyLoc;
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	8a 83       	std	Y+2, r24	; 0x02
    2dda:	21 c0       	rjmp	.+66     	; 0x2e1e <KPD_u8GetPressedKey+0xfc>
	for (u8KpdColIdx=0 ;u8KpdColIdx<4 ;u8KpdColIdx++)
	{
		DIO_enuWritePin(u8KpdColArr[u8KpdColIdx],DIO_LOW);


		for(u8KpdRowIdx=0;u8KpdRowIdx<4;u8KpdRowIdx++)
    2ddc:	80 91 c7 00 	lds	r24, 0x00C7
    2de0:	8f 5f       	subi	r24, 0xFF	; 255
    2de2:	80 93 c7 00 	sts	0x00C7, r24
    2de6:	80 91 c7 00 	lds	r24, 0x00C7
    2dea:	84 30       	cpi	r24, 0x04	; 4
    2dec:	08 f4       	brcc	.+2      	; 0x2df0 <KPD_u8GetPressedKey+0xce>
    2dee:	b1 cf       	rjmp	.-158    	; 0x2d52 <KPD_u8GetPressedKey+0x30>

				return u8KpdPressedKeyLoc;
			}

		}
		DIO_enuWritePin(u8KpdColArr[u8KpdColIdx],DIO_HIGH);
    2df0:	80 91 c8 00 	lds	r24, 0x00C8
    2df4:	88 2f       	mov	r24, r24
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	fc 01       	movw	r30, r24
    2dfa:	ef 53       	subi	r30, 0x3F	; 63
    2dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfe:	80 81       	ld	r24, Z
    2e00:	61 e0       	ldi	r22, 0x01	; 1
    2e02:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
	uint8 u8KpdPressedKeyLoc=NOT_KEY_PRESSED;

	static uint8 au8KpdArrLoc[4][4]= KPD_PUTTONS;


	for (u8KpdColIdx=0 ;u8KpdColIdx<4 ;u8KpdColIdx++)
    2e06:	80 91 c8 00 	lds	r24, 0x00C8
    2e0a:	8f 5f       	subi	r24, 0xFF	; 255
    2e0c:	80 93 c8 00 	sts	0x00C8, r24
    2e10:	80 91 c8 00 	lds	r24, 0x00C8
    2e14:	84 30       	cpi	r24, 0x04	; 4
    2e16:	08 f4       	brcc	.+2      	; 0x2e1a <KPD_u8GetPressedKey+0xf8>
    2e18:	8e cf       	rjmp	.-228    	; 0x2d36 <KPD_u8GetPressedKey+0x14>

		}
		DIO_enuWritePin(u8KpdColArr[u8KpdColIdx],DIO_HIGH);

	}
	return u8KpdPressedKeyLoc; /*3ashan law mafesh ay key metdas haterg3 0xFF,
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	8a 83       	std	Y+2, r24	; 0x02
    2e1e:	8a 81       	ldd	r24, Y+2	; 0x02
	w met3rfa fe el private , yeb2a lazm fe code el app a3mel check 3ala el 0xFF
	el hwa ha3mel variable el awel be 0xFF */


}
    2e20:	0f 90       	pop	r0
    2e22:	0f 90       	pop	r0
    2e24:	cf 91       	pop	r28
    2e26:	df 91       	pop	r29
    2e28:	08 95       	ret

00002e2a <LCD_voidMoveRight>:
uint8 u8checksec=0;




void LCD_voidMoveRight(void){
    2e2a:	df 93       	push	r29
    2e2c:	cf 93       	push	r28
    2e2e:	cd b7       	in	r28, 0x3d	; 61
    2e30:	de b7       	in	r29, 0x3e	; 62

	if(u8MoveCursor==5)
    2e32:	80 91 c5 00 	lds	r24, 0x00C5
    2e36:	85 30       	cpi	r24, 0x05	; 5
    2e38:	a1 f4       	brne	.+40     	; 0x2e62 <LCD_voidMoveRight+0x38>
		{
			u8MoveCursor=(u8MoveCursor-1+2)%6;
    2e3a:	80 91 c5 00 	lds	r24, 0x00C5
    2e3e:	88 2f       	mov	r24, r24
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	01 96       	adiw	r24, 0x01	; 1
    2e44:	26 e0       	ldi	r18, 0x06	; 6
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	b9 01       	movw	r22, r18
    2e4a:	0e 94 35 24 	call	0x486a	; 0x486a <__divmodhi4>
    2e4e:	80 93 c5 00 	sts	0x00C5, r24
			LCD_voidMoveCourser(0,0,u8MoveCursor);
    2e52:	90 91 c5 00 	lds	r25, 0x00C5
    2e56:	80 e0       	ldi	r24, 0x00	; 0
    2e58:	60 e0       	ldi	r22, 0x00	; 0
    2e5a:	49 2f       	mov	r20, r25
    2e5c:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
    2e60:	35 c0       	rjmp	.+106    	; 0x2ecc <LCD_voidMoveRight+0xa2>
		}
	else
		{
			u8MoveCursor=(u8MoveCursor+2)%6;
    2e62:	80 91 c5 00 	lds	r24, 0x00C5
    2e66:	88 2f       	mov	r24, r24
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	02 96       	adiw	r24, 0x02	; 2
    2e6c:	26 e0       	ldi	r18, 0x06	; 6
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	b9 01       	movw	r22, r18
    2e72:	0e 94 35 24 	call	0x486a	; 0x486a <__divmodhi4>
    2e76:	80 93 c5 00 	sts	0x00C5, r24
			if(u8MoveCursor==0)
    2e7a:	80 91 c5 00 	lds	r24, 0x00C5
    2e7e:	88 23       	and	r24, r24
    2e80:	51 f4       	brne	.+20     	; 0x2e96 <LCD_voidMoveRight+0x6c>
				LCD_voidMoveCourser(0,0,u8MoveCursor+1);
    2e82:	80 91 c5 00 	lds	r24, 0x00C5
    2e86:	98 2f       	mov	r25, r24
    2e88:	9f 5f       	subi	r25, 0xFF	; 255
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	60 e0       	ldi	r22, 0x00	; 0
    2e8e:	49 2f       	mov	r20, r25
    2e90:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
    2e94:	1b c0       	rjmp	.+54     	; 0x2ecc <LCD_voidMoveRight+0xa2>
			else if(u8MoveCursor==2)
    2e96:	80 91 c5 00 	lds	r24, 0x00C5
    2e9a:	82 30       	cpi	r24, 0x02	; 2
    2e9c:	51 f4       	brne	.+20     	; 0x2eb2 <LCD_voidMoveRight+0x88>
				LCD_voidMoveCourser(0,0,u8MoveCursor+2);
    2e9e:	80 91 c5 00 	lds	r24, 0x00C5
    2ea2:	98 2f       	mov	r25, r24
    2ea4:	9e 5f       	subi	r25, 0xFE	; 254
    2ea6:	80 e0       	ldi	r24, 0x00	; 0
    2ea8:	60 e0       	ldi	r22, 0x00	; 0
    2eaa:	49 2f       	mov	r20, r25
    2eac:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
    2eb0:	0d c0       	rjmp	.+26     	; 0x2ecc <LCD_voidMoveRight+0xa2>
			else if(u8MoveCursor==4)
    2eb2:	80 91 c5 00 	lds	r24, 0x00C5
    2eb6:	84 30       	cpi	r24, 0x04	; 4
    2eb8:	49 f4       	brne	.+18     	; 0x2ecc <LCD_voidMoveRight+0xa2>
				LCD_voidMoveCourser(0,0,u8MoveCursor+3);
    2eba:	80 91 c5 00 	lds	r24, 0x00C5
    2ebe:	98 2f       	mov	r25, r24
    2ec0:	9d 5f       	subi	r25, 0xFD	; 253
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	60 e0       	ldi	r22, 0x00	; 0
    2ec6:	49 2f       	mov	r20, r25
    2ec8:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>

		}

}
    2ecc:	cf 91       	pop	r28
    2ece:	df 91       	pop	r29
    2ed0:	08 95       	ret

00002ed2 <LCD_voidMoveLeft>:
void LCD_voidMoveLeft(void){
    2ed2:	df 93       	push	r29
    2ed4:	cf 93       	push	r28
    2ed6:	cd b7       	in	r28, 0x3d	; 61
    2ed8:	de b7       	in	r29, 0x3e	; 62

	if(u8MoveCursor==5)
    2eda:	80 91 c5 00 	lds	r24, 0x00C5
    2ede:	85 30       	cpi	r24, 0x05	; 5
    2ee0:	a1 f4       	brne	.+40     	; 0x2f0a <LCD_voidMoveLeft+0x38>
		{
			u8MoveCursor=(u8MoveCursor-1-2)%6;
    2ee2:	80 91 c5 00 	lds	r24, 0x00C5
    2ee6:	88 2f       	mov	r24, r24
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	03 97       	sbiw	r24, 0x03	; 3
    2eec:	26 e0       	ldi	r18, 0x06	; 6
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	b9 01       	movw	r22, r18
    2ef2:	0e 94 35 24 	call	0x486a	; 0x486a <__divmodhi4>
    2ef6:	80 93 c5 00 	sts	0x00C5, r24
			LCD_voidMoveCourser(0,0,u8MoveCursor);
    2efa:	90 91 c5 00 	lds	r25, 0x00C5
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	60 e0       	ldi	r22, 0x00	; 0
    2f02:	49 2f       	mov	r20, r25
    2f04:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
    2f08:	35 c0       	rjmp	.+106    	; 0x2f74 <LCD_voidMoveLeft+0xa2>
		}
		else
		{
			u8MoveCursor=(u8MoveCursor-2)%6;
    2f0a:	80 91 c5 00 	lds	r24, 0x00C5
    2f0e:	88 2f       	mov	r24, r24
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	02 97       	sbiw	r24, 0x02	; 2
    2f14:	26 e0       	ldi	r18, 0x06	; 6
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	b9 01       	movw	r22, r18
    2f1a:	0e 94 35 24 	call	0x486a	; 0x486a <__divmodhi4>
    2f1e:	80 93 c5 00 	sts	0x00C5, r24
			if(u8MoveCursor==0)
    2f22:	80 91 c5 00 	lds	r24, 0x00C5
    2f26:	88 23       	and	r24, r24
    2f28:	51 f4       	brne	.+20     	; 0x2f3e <LCD_voidMoveLeft+0x6c>
				LCD_voidMoveCourser(0,0,u8MoveCursor+1);
    2f2a:	80 91 c5 00 	lds	r24, 0x00C5
    2f2e:	98 2f       	mov	r25, r24
    2f30:	9f 5f       	subi	r25, 0xFF	; 255
    2f32:	80 e0       	ldi	r24, 0x00	; 0
    2f34:	60 e0       	ldi	r22, 0x00	; 0
    2f36:	49 2f       	mov	r20, r25
    2f38:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
    2f3c:	1b c0       	rjmp	.+54     	; 0x2f74 <LCD_voidMoveLeft+0xa2>
			else if(u8MoveCursor==2)
    2f3e:	80 91 c5 00 	lds	r24, 0x00C5
    2f42:	82 30       	cpi	r24, 0x02	; 2
    2f44:	51 f4       	brne	.+20     	; 0x2f5a <LCD_voidMoveLeft+0x88>
				LCD_voidMoveCourser(0,0,u8MoveCursor+2);
    2f46:	80 91 c5 00 	lds	r24, 0x00C5
    2f4a:	98 2f       	mov	r25, r24
    2f4c:	9e 5f       	subi	r25, 0xFE	; 254
    2f4e:	80 e0       	ldi	r24, 0x00	; 0
    2f50:	60 e0       	ldi	r22, 0x00	; 0
    2f52:	49 2f       	mov	r20, r25
    2f54:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
    2f58:	0d c0       	rjmp	.+26     	; 0x2f74 <LCD_voidMoveLeft+0xa2>
			else if(u8MoveCursor==4)
    2f5a:	80 91 c5 00 	lds	r24, 0x00C5
    2f5e:	84 30       	cpi	r24, 0x04	; 4
    2f60:	49 f4       	brne	.+18     	; 0x2f74 <LCD_voidMoveLeft+0xa2>
				LCD_voidMoveCourser(0,0,u8MoveCursor+3);
    2f62:	80 91 c5 00 	lds	r24, 0x00C5
    2f66:	98 2f       	mov	r25, r24
    2f68:	9d 5f       	subi	r25, 0xFD	; 253
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	60 e0       	ldi	r22, 0x00	; 0
    2f6e:	49 2f       	mov	r20, r25
    2f70:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
		}

}
    2f74:	cf 91       	pop	r28
    2f76:	df 91       	pop	r29
    2f78:	08 95       	ret

00002f7a <LCD_voidIncrement>:
void LCD_voidIncrement(void){
    2f7a:	df 93       	push	r29
    2f7c:	cf 93       	push	r28
    2f7e:	00 d0       	rcall	.+0      	; 0x2f80 <LCD_voidIncrement+0x6>
    2f80:	cd b7       	in	r28, 0x3d	; 61
    2f82:	de b7       	in	r29, 0x3e	; 62

	switch(u8MoveCursor)
    2f84:	80 91 c5 00 	lds	r24, 0x00C5
    2f88:	28 2f       	mov	r18, r24
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	3a 83       	std	Y+2, r19	; 0x02
    2f8e:	29 83       	std	Y+1, r18	; 0x01
    2f90:	89 81       	ldd	r24, Y+1	; 0x01
    2f92:	9a 81       	ldd	r25, Y+2	; 0x02
    2f94:	82 30       	cpi	r24, 0x02	; 2
    2f96:	91 05       	cpc	r25, r1
    2f98:	09 f4       	brne	.+2      	; 0x2f9c <LCD_voidIncrement+0x22>
    2f9a:	40 c0       	rjmp	.+128    	; 0x301c <LCD_voidIncrement+0xa2>
    2f9c:	29 81       	ldd	r18, Y+1	; 0x01
    2f9e:	3a 81       	ldd	r19, Y+2	; 0x02
    2fa0:	24 30       	cpi	r18, 0x04	; 4
    2fa2:	31 05       	cpc	r19, r1
    2fa4:	09 f4       	brne	.+2      	; 0x2fa8 <LCD_voidIncrement+0x2e>
    2fa6:	71 c0       	rjmp	.+226    	; 0x308a <LCD_voidIncrement+0x110>
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
    2faa:	9a 81       	ldd	r25, Y+2	; 0x02
    2fac:	00 97       	sbiw	r24, 0x00	; 0
    2fae:	09 f0       	breq	.+2      	; 0x2fb2 <LCD_voidIncrement+0x38>
    2fb0:	a1 c0       	rjmp	.+322    	; 0x30f4 <LCD_voidIncrement+0x17a>
		{
		case 0:
			if(u8hour<9)
    2fb2:	80 91 c9 00 	lds	r24, 0x00C9
    2fb6:	89 30       	cpi	r24, 0x09	; 9
    2fb8:	b8 f4       	brcc	.+46     	; 0x2fe8 <LCD_voidIncrement+0x6e>
			{
			u8hour++;
    2fba:	80 91 c9 00 	lds	r24, 0x00C9
    2fbe:	8f 5f       	subi	r24, 0xFF	; 255
    2fc0:	80 93 c9 00 	sts	0x00C9, r24
			LCD_voidSendNumber(0,u8hour);
    2fc4:	80 91 c9 00 	lds	r24, 0x00C9
    2fc8:	28 2f       	mov	r18, r24
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
    2fce:	b9 01       	movw	r22, r18
    2fd0:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
			LCD_voidMoveCourser(0,0,u8MoveCursor+1);
    2fd4:	80 91 c5 00 	lds	r24, 0x00C5
    2fd8:	98 2f       	mov	r25, r24
    2fda:	9f 5f       	subi	r25, 0xFF	; 255
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	60 e0       	ldi	r22, 0x00	; 0
    2fe0:	49 2f       	mov	r20, r25
    2fe2:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
    2fe6:	86 c0       	rjmp	.+268    	; 0x30f4 <LCD_voidIncrement+0x17a>
			}
			else if(u8hour>=9)
    2fe8:	80 91 c9 00 	lds	r24, 0x00C9
    2fec:	89 30       	cpi	r24, 0x09	; 9
    2fee:	08 f4       	brcc	.+2      	; 0x2ff2 <LCD_voidIncrement+0x78>
    2ff0:	81 c0       	rjmp	.+258    	; 0x30f4 <LCD_voidIncrement+0x17a>
			{
				LCD_voidMoveCourser(0,0,u8MoveCursor);
    2ff2:	90 91 c5 00 	lds	r25, 0x00C5
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	60 e0       	ldi	r22, 0x00	; 0
    2ffa:	49 2f       	mov	r20, r25
    2ffc:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				u8hour++;
    3000:	80 91 c9 00 	lds	r24, 0x00C9
    3004:	8f 5f       	subi	r24, 0xFF	; 255
    3006:	80 93 c9 00 	sts	0x00C9, r24
				LCD_voidSendNumber(0,u8hour);
    300a:	80 91 c9 00 	lds	r24, 0x00C9
    300e:	28 2f       	mov	r18, r24
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	b9 01       	movw	r22, r18
    3016:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
    301a:	6c c0       	rjmp	.+216    	; 0x30f4 <LCD_voidIncrement+0x17a>
			}

			break;

		case 2:
			if(u8minute<9)
    301c:	80 91 ca 00 	lds	r24, 0x00CA
    3020:	89 30       	cpi	r24, 0x09	; 9
    3022:	b8 f4       	brcc	.+46     	; 0x3052 <LCD_voidIncrement+0xd8>
			{
			LCD_voidMoveCourser(0,0,u8MoveCursor+2);
    3024:	80 91 c5 00 	lds	r24, 0x00C5
    3028:	98 2f       	mov	r25, r24
    302a:	9e 5f       	subi	r25, 0xFE	; 254
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	60 e0       	ldi	r22, 0x00	; 0
    3030:	49 2f       	mov	r20, r25
    3032:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
			u8minute++;
    3036:	80 91 ca 00 	lds	r24, 0x00CA
    303a:	8f 5f       	subi	r24, 0xFF	; 255
    303c:	80 93 ca 00 	sts	0x00CA, r24
			LCD_voidSendNumber(0,u8minute);
    3040:	80 91 ca 00 	lds	r24, 0x00CA
    3044:	28 2f       	mov	r18, r24
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	b9 01       	movw	r22, r18
    304c:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
    3050:	51 c0       	rjmp	.+162    	; 0x30f4 <LCD_voidIncrement+0x17a>

			}
			else if(u8minute>=9)
    3052:	80 91 ca 00 	lds	r24, 0x00CA
    3056:	89 30       	cpi	r24, 0x09	; 9
    3058:	08 f4       	brcc	.+2      	; 0x305c <LCD_voidIncrement+0xe2>
    305a:	4c c0       	rjmp	.+152    	; 0x30f4 <LCD_voidIncrement+0x17a>
			{
				LCD_voidMoveCourser(0,0,u8MoveCursor+1);
    305c:	80 91 c5 00 	lds	r24, 0x00C5
    3060:	98 2f       	mov	r25, r24
    3062:	9f 5f       	subi	r25, 0xFF	; 255
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	60 e0       	ldi	r22, 0x00	; 0
    3068:	49 2f       	mov	r20, r25
    306a:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				u8minute++;
    306e:	80 91 ca 00 	lds	r24, 0x00CA
    3072:	8f 5f       	subi	r24, 0xFF	; 255
    3074:	80 93 ca 00 	sts	0x00CA, r24
				LCD_voidSendNumber(0,u8minute);
    3078:	80 91 ca 00 	lds	r24, 0x00CA
    307c:	28 2f       	mov	r18, r24
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	b9 01       	movw	r22, r18
    3084:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
    3088:	35 c0       	rjmp	.+106    	; 0x30f4 <LCD_voidIncrement+0x17a>
			}
			break;
		case 4:
			if(u8sec<9)
    308a:	80 91 cb 00 	lds	r24, 0x00CB
    308e:	89 30       	cpi	r24, 0x09	; 9
    3090:	b8 f4       	brcc	.+46     	; 0x30c0 <LCD_voidIncrement+0x146>
			{
				LCD_voidMoveCourser(0,0,u8MoveCursor+3);
    3092:	80 91 c5 00 	lds	r24, 0x00C5
    3096:	98 2f       	mov	r25, r24
    3098:	9d 5f       	subi	r25, 0xFD	; 253
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	60 e0       	ldi	r22, 0x00	; 0
    309e:	49 2f       	mov	r20, r25
    30a0:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				u8sec++;
    30a4:	80 91 cb 00 	lds	r24, 0x00CB
    30a8:	8f 5f       	subi	r24, 0xFF	; 255
    30aa:	80 93 cb 00 	sts	0x00CB, r24
				LCD_voidSendNumber(0,u8sec);
    30ae:	80 91 cb 00 	lds	r24, 0x00CB
    30b2:	28 2f       	mov	r18, r24
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	b9 01       	movw	r22, r18
    30ba:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
    30be:	1a c0       	rjmp	.+52     	; 0x30f4 <LCD_voidIncrement+0x17a>

			}
			else if(u8sec>=9)
    30c0:	80 91 cb 00 	lds	r24, 0x00CB
    30c4:	89 30       	cpi	r24, 0x09	; 9
    30c6:	b0 f0       	brcs	.+44     	; 0x30f4 <LCD_voidIncrement+0x17a>
			{
				LCD_voidMoveCourser(0,0,u8MoveCursor+2);
    30c8:	80 91 c5 00 	lds	r24, 0x00C5
    30cc:	98 2f       	mov	r25, r24
    30ce:	9e 5f       	subi	r25, 0xFE	; 254
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	60 e0       	ldi	r22, 0x00	; 0
    30d4:	49 2f       	mov	r20, r25
    30d6:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				u8sec++;
    30da:	80 91 cb 00 	lds	r24, 0x00CB
    30de:	8f 5f       	subi	r24, 0xFF	; 255
    30e0:	80 93 cb 00 	sts	0x00CB, r24
				LCD_voidSendNumber(0,u8sec);
    30e4:	80 91 cb 00 	lds	r24, 0x00CB
    30e8:	28 2f       	mov	r18, r24
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	b9 01       	movw	r22, r18
    30f0:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
			break;

		}


}
    30f4:	0f 90       	pop	r0
    30f6:	0f 90       	pop	r0
    30f8:	cf 91       	pop	r28
    30fa:	df 91       	pop	r29
    30fc:	08 95       	ret

000030fe <LCD_voidDecrement>:
void LCD_voidDecrement(void){
    30fe:	df 93       	push	r29
    3100:	cf 93       	push	r28
    3102:	00 d0       	rcall	.+0      	; 0x3104 <LCD_voidDecrement+0x6>
    3104:	cd b7       	in	r28, 0x3d	; 61
    3106:	de b7       	in	r29, 0x3e	; 62

	switch(u8MoveCursor)
    3108:	80 91 c5 00 	lds	r24, 0x00C5
    310c:	28 2f       	mov	r18, r24
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	3a 83       	std	Y+2, r19	; 0x02
    3112:	29 83       	std	Y+1, r18	; 0x01
    3114:	89 81       	ldd	r24, Y+1	; 0x01
    3116:	9a 81       	ldd	r25, Y+2	; 0x02
    3118:	82 30       	cpi	r24, 0x02	; 2
    311a:	91 05       	cpc	r25, r1
    311c:	09 f4       	brne	.+2      	; 0x3120 <LCD_voidDecrement+0x22>
    311e:	4f c0       	rjmp	.+158    	; 0x31be <LCD_voidDecrement+0xc0>
    3120:	29 81       	ldd	r18, Y+1	; 0x01
    3122:	3a 81       	ldd	r19, Y+2	; 0x02
    3124:	24 30       	cpi	r18, 0x04	; 4
    3126:	31 05       	cpc	r19, r1
    3128:	09 f4       	brne	.+2      	; 0x312c <LCD_voidDecrement+0x2e>
    312a:	91 c0       	rjmp	.+290    	; 0x324e <LCD_voidDecrement+0x150>
    312c:	89 81       	ldd	r24, Y+1	; 0x01
    312e:	9a 81       	ldd	r25, Y+2	; 0x02
    3130:	00 97       	sbiw	r24, 0x00	; 0
    3132:	09 f0       	breq	.+2      	; 0x3136 <LCD_voidDecrement+0x38>
    3134:	d2 c0       	rjmp	.+420    	; 0x32da <LCD_voidDecrement+0x1dc>
		{
		case 0:
			if(u8hour!=0 && u8hour<=10)
    3136:	80 91 c9 00 	lds	r24, 0x00C9
    313a:	88 23       	and	r24, r24
    313c:	31 f1       	breq	.+76     	; 0x318a <LCD_voidDecrement+0x8c>
    313e:	80 91 c9 00 	lds	r24, 0x00C9
    3142:	8b 30       	cpi	r24, 0x0B	; 11
    3144:	10 f5       	brcc	.+68     	; 0x318a <LCD_voidDecrement+0x8c>
			{
				u8hour--;
    3146:	80 91 c9 00 	lds	r24, 0x00C9
    314a:	81 50       	subi	r24, 0x01	; 1
    314c:	80 93 c9 00 	sts	0x00C9, r24
				LCD_voidMoveCourser(0,0,u8MoveCursor);
    3150:	90 91 c5 00 	lds	r25, 0x00C5
    3154:	80 e0       	ldi	r24, 0x00	; 0
    3156:	60 e0       	ldi	r22, 0x00	; 0
    3158:	49 2f       	mov	r20, r25
    315a:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				LCD_voidSendChar(0,'0');
    315e:	80 e0       	ldi	r24, 0x00	; 0
    3160:	60 e3       	ldi	r22, 0x30	; 48
    3162:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>

				LCD_voidMoveCourser(0,0,u8MoveCursor+1);
    3166:	80 91 c5 00 	lds	r24, 0x00C5
    316a:	98 2f       	mov	r25, r24
    316c:	9f 5f       	subi	r25, 0xFF	; 255
    316e:	80 e0       	ldi	r24, 0x00	; 0
    3170:	60 e0       	ldi	r22, 0x00	; 0
    3172:	49 2f       	mov	r20, r25
    3174:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>

				LCD_voidSendNumber(0,u8hour);
    3178:	80 91 c9 00 	lds	r24, 0x00C9
    317c:	28 2f       	mov	r18, r24
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	80 e0       	ldi	r24, 0x00	; 0
    3182:	b9 01       	movw	r22, r18
    3184:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
    3188:	a8 c0       	rjmp	.+336    	; 0x32da <LCD_voidDecrement+0x1dc>
			}
			else if(u8hour>10)
    318a:	80 91 c9 00 	lds	r24, 0x00C9
    318e:	8b 30       	cpi	r24, 0x0B	; 11
    3190:	08 f4       	brcc	.+2      	; 0x3194 <LCD_voidDecrement+0x96>
    3192:	a3 c0       	rjmp	.+326    	; 0x32da <LCD_voidDecrement+0x1dc>
			{
				u8hour--;
    3194:	80 91 c9 00 	lds	r24, 0x00C9
    3198:	81 50       	subi	r24, 0x01	; 1
    319a:	80 93 c9 00 	sts	0x00C9, r24
				LCD_voidMoveCourser(0,0,u8MoveCursor);
    319e:	90 91 c5 00 	lds	r25, 0x00C5
    31a2:	80 e0       	ldi	r24, 0x00	; 0
    31a4:	60 e0       	ldi	r22, 0x00	; 0
    31a6:	49 2f       	mov	r20, r25
    31a8:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				LCD_voidSendNumber(0,u8hour);
    31ac:	80 91 c9 00 	lds	r24, 0x00C9
    31b0:	28 2f       	mov	r18, r24
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	80 e0       	ldi	r24, 0x00	; 0
    31b6:	b9 01       	movw	r22, r18
    31b8:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
    31bc:	8e c0       	rjmp	.+284    	; 0x32da <LCD_voidDecrement+0x1dc>
			}

			break;
		case 2:
			if(u8minute!=0 && u8minute<=10)
    31be:	80 91 ca 00 	lds	r24, 0x00CA
    31c2:	88 23       	and	r24, r24
    31c4:	41 f1       	breq	.+80     	; 0x3216 <LCD_voidDecrement+0x118>
    31c6:	80 91 ca 00 	lds	r24, 0x00CA
    31ca:	8b 30       	cpi	r24, 0x0B	; 11
    31cc:	20 f5       	brcc	.+72     	; 0x3216 <LCD_voidDecrement+0x118>
			{
				LCD_voidMoveCourser(0,0,u8MoveCursor+1);
    31ce:	80 91 c5 00 	lds	r24, 0x00C5
    31d2:	98 2f       	mov	r25, r24
    31d4:	9f 5f       	subi	r25, 0xFF	; 255
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	60 e0       	ldi	r22, 0x00	; 0
    31da:	49 2f       	mov	r20, r25
    31dc:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				LCD_voidSendChar(0,'0');
    31e0:	80 e0       	ldi	r24, 0x00	; 0
    31e2:	60 e3       	ldi	r22, 0x30	; 48
    31e4:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
				u8minute--;
    31e8:	80 91 ca 00 	lds	r24, 0x00CA
    31ec:	81 50       	subi	r24, 0x01	; 1
    31ee:	80 93 ca 00 	sts	0x00CA, r24
				LCD_voidMoveCourser(0,0,u8MoveCursor+2);
    31f2:	80 91 c5 00 	lds	r24, 0x00C5
    31f6:	98 2f       	mov	r25, r24
    31f8:	9e 5f       	subi	r25, 0xFE	; 254
    31fa:	80 e0       	ldi	r24, 0x00	; 0
    31fc:	60 e0       	ldi	r22, 0x00	; 0
    31fe:	49 2f       	mov	r20, r25
    3200:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				LCD_voidSendNumber(0,u8minute);
    3204:	80 91 ca 00 	lds	r24, 0x00CA
    3208:	28 2f       	mov	r18, r24
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	b9 01       	movw	r22, r18
    3210:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
    3214:	62 c0       	rjmp	.+196    	; 0x32da <LCD_voidDecrement+0x1dc>

			}
			else if(u8minute>10)
    3216:	80 91 ca 00 	lds	r24, 0x00CA
    321a:	8b 30       	cpi	r24, 0x0B	; 11
    321c:	08 f4       	brcc	.+2      	; 0x3220 <LCD_voidDecrement+0x122>
    321e:	5d c0       	rjmp	.+186    	; 0x32da <LCD_voidDecrement+0x1dc>
			{
				LCD_voidMoveCourser(0,0,u8MoveCursor+1);
    3220:	80 91 c5 00 	lds	r24, 0x00C5
    3224:	98 2f       	mov	r25, r24
    3226:	9f 5f       	subi	r25, 0xFF	; 255
    3228:	80 e0       	ldi	r24, 0x00	; 0
    322a:	60 e0       	ldi	r22, 0x00	; 0
    322c:	49 2f       	mov	r20, r25
    322e:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				u8minute--;
    3232:	80 91 ca 00 	lds	r24, 0x00CA
    3236:	81 50       	subi	r24, 0x01	; 1
    3238:	80 93 ca 00 	sts	0x00CA, r24
				LCD_voidSendNumber(0,u8minute);
    323c:	80 91 ca 00 	lds	r24, 0x00CA
    3240:	28 2f       	mov	r18, r24
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	80 e0       	ldi	r24, 0x00	; 0
    3246:	b9 01       	movw	r22, r18
    3248:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
    324c:	46 c0       	rjmp	.+140    	; 0x32da <LCD_voidDecrement+0x1dc>
			}
			break;
		case 4:
			if(u8sec!=0 && u8sec<=10)
    324e:	80 91 cb 00 	lds	r24, 0x00CB
    3252:	88 23       	and	r24, r24
    3254:	41 f1       	breq	.+80     	; 0x32a6 <LCD_voidDecrement+0x1a8>
    3256:	80 91 cb 00 	lds	r24, 0x00CB
    325a:	8b 30       	cpi	r24, 0x0B	; 11
    325c:	20 f5       	brcc	.+72     	; 0x32a6 <LCD_voidDecrement+0x1a8>
			{
				LCD_voidMoveCourser(0,0,u8MoveCursor+2);
    325e:	80 91 c5 00 	lds	r24, 0x00C5
    3262:	98 2f       	mov	r25, r24
    3264:	9e 5f       	subi	r25, 0xFE	; 254
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	60 e0       	ldi	r22, 0x00	; 0
    326a:	49 2f       	mov	r20, r25
    326c:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				LCD_voidSendChar(0,'0');
    3270:	80 e0       	ldi	r24, 0x00	; 0
    3272:	60 e3       	ldi	r22, 0x30	; 48
    3274:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
				u8sec--;
    3278:	80 91 cb 00 	lds	r24, 0x00CB
    327c:	81 50       	subi	r24, 0x01	; 1
    327e:	80 93 cb 00 	sts	0x00CB, r24
				LCD_voidMoveCourser(0,0,u8MoveCursor+3);
    3282:	80 91 c5 00 	lds	r24, 0x00C5
    3286:	98 2f       	mov	r25, r24
    3288:	9d 5f       	subi	r25, 0xFD	; 253
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	60 e0       	ldi	r22, 0x00	; 0
    328e:	49 2f       	mov	r20, r25
    3290:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				LCD_voidSendNumber(0,u8sec);
    3294:	80 91 cb 00 	lds	r24, 0x00CB
    3298:	28 2f       	mov	r18, r24
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	b9 01       	movw	r22, r18
    32a0:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
    32a4:	1a c0       	rjmp	.+52     	; 0x32da <LCD_voidDecrement+0x1dc>

			}
			else if(u8sec>10)
    32a6:	80 91 cb 00 	lds	r24, 0x00CB
    32aa:	8b 30       	cpi	r24, 0x0B	; 11
    32ac:	b0 f0       	brcs	.+44     	; 0x32da <LCD_voidDecrement+0x1dc>
					{
						LCD_voidMoveCourser(0,0,u8MoveCursor+2);
    32ae:	80 91 c5 00 	lds	r24, 0x00C5
    32b2:	98 2f       	mov	r25, r24
    32b4:	9e 5f       	subi	r25, 0xFE	; 254
    32b6:	80 e0       	ldi	r24, 0x00	; 0
    32b8:	60 e0       	ldi	r22, 0x00	; 0
    32ba:	49 2f       	mov	r20, r25
    32bc:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
						u8sec--;
    32c0:	80 91 cb 00 	lds	r24, 0x00CB
    32c4:	81 50       	subi	r24, 0x01	; 1
    32c6:	80 93 cb 00 	sts	0x00CB, r24
						LCD_voidSendNumber(0,u8sec);
    32ca:	80 91 cb 00 	lds	r24, 0x00CB
    32ce:	28 2f       	mov	r18, r24
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	80 e0       	ldi	r24, 0x00	; 0
    32d4:	b9 01       	movw	r22, r18
    32d6:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
					}

			break;
		}

}
    32da:	0f 90       	pop	r0
    32dc:	0f 90       	pop	r0
    32de:	cf 91       	pop	r28
    32e0:	df 91       	pop	r29
    32e2:	08 95       	ret

000032e4 <LCD_voidTime>:
void LCD_voidTime(void){
    32e4:	0f 93       	push	r16
    32e6:	1f 93       	push	r17
    32e8:	df 93       	push	r29
    32ea:	cf 93       	push	r28
    32ec:	cd b7       	in	r28, 0x3d	; 61
    32ee:	de b7       	in	r29, 0x3e	; 62
    32f0:	c2 56       	subi	r28, 0x62	; 98
    32f2:	d0 40       	sbci	r29, 0x00	; 0
    32f4:	0f b6       	in	r0, 0x3f	; 63
    32f6:	f8 94       	cli
    32f8:	de bf       	out	0x3e, r29	; 62
    32fa:	0f be       	out	0x3f, r0	; 63
    32fc:	cd bf       	out	0x3d, r28	; 61
	LCD_voidClrScr(0);
    32fe:	80 e0       	ldi	r24, 0x00	; 0
    3300:	0e 94 32 15 	call	0x2a64	; 0x2a64 <LCD_voidClrScr>
		LCD_voidSendString(0,"Time is set");
    3304:	20 e6       	ldi	r18, 0x60	; 96
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	b9 01       	movw	r22, r18
    330c:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_voidSendString>
    3310:	fe 01       	movw	r30, r28
    3312:	e1 5a       	subi	r30, 0xA1	; 161
    3314:	ff 4f       	sbci	r31, 0xFF	; 255
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	a8 ec       	ldi	r26, 0xC8	; 200
    331c:	b2 e4       	ldi	r27, 0x42	; 66
    331e:	80 83       	st	Z, r24
    3320:	91 83       	std	Z+1, r25	; 0x01
    3322:	a2 83       	std	Z+2, r26	; 0x02
    3324:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3326:	8e 01       	movw	r16, r28
    3328:	05 5a       	subi	r16, 0xA5	; 165
    332a:	1f 4f       	sbci	r17, 0xFF	; 255
    332c:	fe 01       	movw	r30, r28
    332e:	e1 5a       	subi	r30, 0xA1	; 161
    3330:	ff 4f       	sbci	r31, 0xFF	; 255
    3332:	60 81       	ld	r22, Z
    3334:	71 81       	ldd	r23, Z+1	; 0x01
    3336:	82 81       	ldd	r24, Z+2	; 0x02
    3338:	93 81       	ldd	r25, Z+3	; 0x03
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	4a ef       	ldi	r20, 0xFA	; 250
    3340:	54 e4       	ldi	r21, 0x44	; 68
    3342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	f8 01       	movw	r30, r16
    334c:	80 83       	st	Z, r24
    334e:	91 83       	std	Z+1, r25	; 0x01
    3350:	a2 83       	std	Z+2, r26	; 0x02
    3352:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3354:	fe 01       	movw	r30, r28
    3356:	e5 5a       	subi	r30, 0xA5	; 165
    3358:	ff 4f       	sbci	r31, 0xFF	; 255
    335a:	60 81       	ld	r22, Z
    335c:	71 81       	ldd	r23, Z+1	; 0x01
    335e:	82 81       	ldd	r24, Z+2	; 0x02
    3360:	93 81       	ldd	r25, Z+3	; 0x03
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	40 e8       	ldi	r20, 0x80	; 128
    3368:	5f e3       	ldi	r21, 0x3F	; 63
    336a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    336e:	88 23       	and	r24, r24
    3370:	44 f4       	brge	.+16     	; 0x3382 <LCD_voidTime+0x9e>
		__ticks = 1;
    3372:	fe 01       	movw	r30, r28
    3374:	e7 5a       	subi	r30, 0xA7	; 167
    3376:	ff 4f       	sbci	r31, 0xFF	; 255
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	91 83       	std	Z+1, r25	; 0x01
    337e:	80 83       	st	Z, r24
    3380:	64 c0       	rjmp	.+200    	; 0x344a <LCD_voidTime+0x166>
	else if (__tmp > 65535)
    3382:	fe 01       	movw	r30, r28
    3384:	e5 5a       	subi	r30, 0xA5	; 165
    3386:	ff 4f       	sbci	r31, 0xFF	; 255
    3388:	60 81       	ld	r22, Z
    338a:	71 81       	ldd	r23, Z+1	; 0x01
    338c:	82 81       	ldd	r24, Z+2	; 0x02
    338e:	93 81       	ldd	r25, Z+3	; 0x03
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	3f ef       	ldi	r19, 0xFF	; 255
    3394:	4f e7       	ldi	r20, 0x7F	; 127
    3396:	57 e4       	ldi	r21, 0x47	; 71
    3398:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    339c:	18 16       	cp	r1, r24
    339e:	0c f0       	brlt	.+2      	; 0x33a2 <LCD_voidTime+0xbe>
    33a0:	43 c0       	rjmp	.+134    	; 0x3428 <LCD_voidTime+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a2:	fe 01       	movw	r30, r28
    33a4:	e1 5a       	subi	r30, 0xA1	; 161
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	60 81       	ld	r22, Z
    33aa:	71 81       	ldd	r23, Z+1	; 0x01
    33ac:	82 81       	ldd	r24, Z+2	; 0x02
    33ae:	93 81       	ldd	r25, Z+3	; 0x03
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	40 e2       	ldi	r20, 0x20	; 32
    33b6:	51 e4       	ldi	r21, 0x41	; 65
    33b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33bc:	dc 01       	movw	r26, r24
    33be:	cb 01       	movw	r24, r22
    33c0:	8e 01       	movw	r16, r28
    33c2:	07 5a       	subi	r16, 0xA7	; 167
    33c4:	1f 4f       	sbci	r17, 0xFF	; 255
    33c6:	bc 01       	movw	r22, r24
    33c8:	cd 01       	movw	r24, r26
    33ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	f8 01       	movw	r30, r16
    33d4:	91 83       	std	Z+1, r25	; 0x01
    33d6:	80 83       	st	Z, r24
    33d8:	1f c0       	rjmp	.+62     	; 0x3418 <LCD_voidTime+0x134>
    33da:	fe 01       	movw	r30, r28
    33dc:	e9 5a       	subi	r30, 0xA9	; 169
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	88 ec       	ldi	r24, 0xC8	; 200
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	91 83       	std	Z+1, r25	; 0x01
    33e6:	80 83       	st	Z, r24
    33e8:	fe 01       	movw	r30, r28
    33ea:	e9 5a       	subi	r30, 0xA9	; 169
    33ec:	ff 4f       	sbci	r31, 0xFF	; 255
    33ee:	80 81       	ld	r24, Z
    33f0:	91 81       	ldd	r25, Z+1	; 0x01
    33f2:	01 97       	sbiw	r24, 0x01	; 1
    33f4:	f1 f7       	brne	.-4      	; 0x33f2 <LCD_voidTime+0x10e>
    33f6:	fe 01       	movw	r30, r28
    33f8:	e9 5a       	subi	r30, 0xA9	; 169
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	91 83       	std	Z+1, r25	; 0x01
    33fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3400:	de 01       	movw	r26, r28
    3402:	a7 5a       	subi	r26, 0xA7	; 167
    3404:	bf 4f       	sbci	r27, 0xFF	; 255
    3406:	fe 01       	movw	r30, r28
    3408:	e7 5a       	subi	r30, 0xA7	; 167
    340a:	ff 4f       	sbci	r31, 0xFF	; 255
    340c:	80 81       	ld	r24, Z
    340e:	91 81       	ldd	r25, Z+1	; 0x01
    3410:	01 97       	sbiw	r24, 0x01	; 1
    3412:	11 96       	adiw	r26, 0x01	; 1
    3414:	9c 93       	st	X, r25
    3416:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3418:	fe 01       	movw	r30, r28
    341a:	e7 5a       	subi	r30, 0xA7	; 167
    341c:	ff 4f       	sbci	r31, 0xFF	; 255
    341e:	80 81       	ld	r24, Z
    3420:	91 81       	ldd	r25, Z+1	; 0x01
    3422:	00 97       	sbiw	r24, 0x00	; 0
    3424:	d1 f6       	brne	.-76     	; 0x33da <LCD_voidTime+0xf6>
    3426:	27 c0       	rjmp	.+78     	; 0x3476 <LCD_voidTime+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3428:	8e 01       	movw	r16, r28
    342a:	07 5a       	subi	r16, 0xA7	; 167
    342c:	1f 4f       	sbci	r17, 0xFF	; 255
    342e:	fe 01       	movw	r30, r28
    3430:	e5 5a       	subi	r30, 0xA5	; 165
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	60 81       	ld	r22, Z
    3436:	71 81       	ldd	r23, Z+1	; 0x01
    3438:	82 81       	ldd	r24, Z+2	; 0x02
    343a:	93 81       	ldd	r25, Z+3	; 0x03
    343c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	f8 01       	movw	r30, r16
    3446:	91 83       	std	Z+1, r25	; 0x01
    3448:	80 83       	st	Z, r24
    344a:	de 01       	movw	r26, r28
    344c:	ab 5a       	subi	r26, 0xAB	; 171
    344e:	bf 4f       	sbci	r27, 0xFF	; 255
    3450:	fe 01       	movw	r30, r28
    3452:	e7 5a       	subi	r30, 0xA7	; 167
    3454:	ff 4f       	sbci	r31, 0xFF	; 255
    3456:	80 81       	ld	r24, Z
    3458:	91 81       	ldd	r25, Z+1	; 0x01
    345a:	8d 93       	st	X+, r24
    345c:	9c 93       	st	X, r25
    345e:	fe 01       	movw	r30, r28
    3460:	eb 5a       	subi	r30, 0xAB	; 171
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	80 81       	ld	r24, Z
    3466:	91 81       	ldd	r25, Z+1	; 0x01
    3468:	01 97       	sbiw	r24, 0x01	; 1
    346a:	f1 f7       	brne	.-4      	; 0x3468 <LCD_voidTime+0x184>
    346c:	fe 01       	movw	r30, r28
    346e:	eb 5a       	subi	r30, 0xAB	; 171
    3470:	ff 4f       	sbci	r31, 0xFF	; 255
    3472:	91 83       	std	Z+1, r25	; 0x01
    3474:	80 83       	st	Z, r24
		_delay_ms(100);
		LCD_voidClrScr(0);
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	0e 94 32 15 	call	0x2a64	; 0x2a64 <LCD_voidClrScr>
		LCD_voidSendString(0,"00:00:00");
    347c:	2c e6       	ldi	r18, 0x6C	; 108
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	80 e0       	ldi	r24, 0x00	; 0
    3482:	b9 01       	movw	r22, r18
    3484:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_voidSendString>
		if(u8sec<=10)
    3488:	80 91 cb 00 	lds	r24, 0x00CB
    348c:	8b 30       	cpi	r24, 0x0B	; 11
    348e:	b8 f4       	brcc	.+46     	; 0x34be <LCD_voidTime+0x1da>
		{
			LCD_voidMoveCourser(0,0,6);
    3490:	80 e0       	ldi	r24, 0x00	; 0
    3492:	60 e0       	ldi	r22, 0x00	; 0
    3494:	46 e0       	ldi	r20, 0x06	; 6
    3496:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
			LCD_voidSendChar(0,'0');
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	60 e3       	ldi	r22, 0x30	; 48
    349e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
			LCD_voidMoveCourser(0,0,7);
    34a2:	80 e0       	ldi	r24, 0x00	; 0
    34a4:	60 e0       	ldi	r22, 0x00	; 0
    34a6:	47 e0       	ldi	r20, 0x07	; 7
    34a8:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
			LCD_voidSendChar(0,u8sec+48);
    34ac:	80 91 cb 00 	lds	r24, 0x00CB
    34b0:	98 2f       	mov	r25, r24
    34b2:	90 5d       	subi	r25, 0xD0	; 208
    34b4:	80 e0       	ldi	r24, 0x00	; 0
    34b6:	69 2f       	mov	r22, r25
    34b8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
    34bc:	11 c0       	rjmp	.+34     	; 0x34e0 <LCD_voidTime+0x1fc>
		}
		else if(u8sec>10)
    34be:	80 91 cb 00 	lds	r24, 0x00CB
    34c2:	8b 30       	cpi	r24, 0x0B	; 11
    34c4:	68 f0       	brcs	.+26     	; 0x34e0 <LCD_voidTime+0x1fc>
		{
			LCD_voidMoveCourser(0,0,6);
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	60 e0       	ldi	r22, 0x00	; 0
    34ca:	46 e0       	ldi	r20, 0x06	; 6
    34cc:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
			LCD_voidSendNumber(0,u8sec);
    34d0:	80 91 cb 00 	lds	r24, 0x00CB
    34d4:	28 2f       	mov	r18, r24
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	b9 01       	movw	r22, r18
    34dc:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
		}
		if(u8minute<=10)
    34e0:	80 91 ca 00 	lds	r24, 0x00CA
    34e4:	8b 30       	cpi	r24, 0x0B	; 11
    34e6:	b8 f4       	brcc	.+46     	; 0x3516 <LCD_voidTime+0x232>
			{
			LCD_voidMoveCourser(0,0,3);
    34e8:	80 e0       	ldi	r24, 0x00	; 0
    34ea:	60 e0       	ldi	r22, 0x00	; 0
    34ec:	43 e0       	ldi	r20, 0x03	; 3
    34ee:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
			LCD_voidSendChar(0,'0');
    34f2:	80 e0       	ldi	r24, 0x00	; 0
    34f4:	60 e3       	ldi	r22, 0x30	; 48
    34f6:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
			LCD_voidMoveCourser(0,0,4);
    34fa:	80 e0       	ldi	r24, 0x00	; 0
    34fc:	60 e0       	ldi	r22, 0x00	; 0
    34fe:	44 e0       	ldi	r20, 0x04	; 4
    3500:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
			LCD_voidSendChar(0,u8minute+48);
    3504:	80 91 ca 00 	lds	r24, 0x00CA
    3508:	98 2f       	mov	r25, r24
    350a:	90 5d       	subi	r25, 0xD0	; 208
    350c:	80 e0       	ldi	r24, 0x00	; 0
    350e:	69 2f       	mov	r22, r25
    3510:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
    3514:	11 c0       	rjmp	.+34     	; 0x3538 <LCD_voidTime+0x254>
			}
		else if(u8minute>10)
    3516:	80 91 ca 00 	lds	r24, 0x00CA
    351a:	8b 30       	cpi	r24, 0x0B	; 11
    351c:	68 f0       	brcs	.+26     	; 0x3538 <LCD_voidTime+0x254>
		{
			LCD_voidMoveCourser(0,0,3);
    351e:	80 e0       	ldi	r24, 0x00	; 0
    3520:	60 e0       	ldi	r22, 0x00	; 0
    3522:	43 e0       	ldi	r20, 0x03	; 3
    3524:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
			LCD_voidSendNumber(0,u8minute);
    3528:	80 91 ca 00 	lds	r24, 0x00CA
    352c:	28 2f       	mov	r18, r24
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	b9 01       	movw	r22, r18
    3534:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
		}
		if(u8hour<=10)
    3538:	80 91 c9 00 	lds	r24, 0x00C9
    353c:	8b 30       	cpi	r24, 0x0B	; 11
    353e:	b8 f4       	brcc	.+46     	; 0x356e <LCD_voidTime+0x28a>
		{
			LCD_voidMoveCourser(0,0,0);
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	60 e0       	ldi	r22, 0x00	; 0
    3544:	40 e0       	ldi	r20, 0x00	; 0
    3546:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
			LCD_voidSendChar(0,'0');
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	60 e3       	ldi	r22, 0x30	; 48
    354e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
			LCD_voidMoveCourser(0,0,1);
    3552:	80 e0       	ldi	r24, 0x00	; 0
    3554:	60 e0       	ldi	r22, 0x00	; 0
    3556:	41 e0       	ldi	r20, 0x01	; 1
    3558:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
			LCD_voidSendChar(0,u8hour+48);
    355c:	80 91 c9 00 	lds	r24, 0x00C9
    3560:	98 2f       	mov	r25, r24
    3562:	90 5d       	subi	r25, 0xD0	; 208
    3564:	80 e0       	ldi	r24, 0x00	; 0
    3566:	69 2f       	mov	r22, r25
    3568:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
    356c:	11 c0       	rjmp	.+34     	; 0x3590 <LCD_voidTime+0x2ac>
		}
		else if(u8hour>10)
    356e:	80 91 c9 00 	lds	r24, 0x00C9
    3572:	8b 30       	cpi	r24, 0x0B	; 11
    3574:	68 f0       	brcs	.+26     	; 0x3590 <LCD_voidTime+0x2ac>
		{
					LCD_voidMoveCourser(0,0,0);
    3576:	80 e0       	ldi	r24, 0x00	; 0
    3578:	60 e0       	ldi	r22, 0x00	; 0
    357a:	40 e0       	ldi	r20, 0x00	; 0
    357c:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
					LCD_voidSendNumber(0,u8hour);
    3580:	80 91 c9 00 	lds	r24, 0x00C9
    3584:	28 2f       	mov	r18, r24
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	80 e0       	ldi	r24, 0x00	; 0
    358a:	b9 01       	movw	r22, r18
    358c:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
				}



		if(u8sec!=0)
    3590:	80 91 cb 00 	lds	r24, 0x00CB
    3594:	88 23       	and	r24, r24
    3596:	09 f4       	brne	.+2      	; 0x359a <LCD_voidTime+0x2b6>
    3598:	80 c1       	rjmp	.+768    	; 0x389a <LCD_voidTime+0x5b6>
		{
			u8sec=u8sec+1;
    359a:	80 91 cb 00 	lds	r24, 0x00CB
    359e:	8f 5f       	subi	r24, 0xFF	; 255
    35a0:	80 93 cb 00 	sts	0x00CB, r24
    35a4:	75 c1       	rjmp	.+746    	; 0x3890 <LCD_voidTime+0x5ac>
			while(u8sec!=0)
			{
				if(u8sec<=10)
    35a6:	80 91 cb 00 	lds	r24, 0x00CB
    35aa:	8b 30       	cpi	r24, 0x0B	; 11
    35ac:	08 f0       	brcs	.+2      	; 0x35b0 <LCD_voidTime+0x2cc>
    35ae:	d0 c0       	rjmp	.+416    	; 0x3750 <LCD_voidTime+0x46c>
				{
					LCD_voidMoveCourser(0,0,6);
    35b0:	80 e0       	ldi	r24, 0x00	; 0
    35b2:	60 e0       	ldi	r22, 0x00	; 0
    35b4:	46 e0       	ldi	r20, 0x06	; 6
    35b6:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
					LCD_voidSendChar(0,'0');
    35ba:	80 e0       	ldi	r24, 0x00	; 0
    35bc:	60 e3       	ldi	r22, 0x30	; 48
    35be:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
					u8sec--;
    35c2:	80 91 cb 00 	lds	r24, 0x00CB
    35c6:	81 50       	subi	r24, 0x01	; 1
    35c8:	80 93 cb 00 	sts	0x00CB, r24
					LCD_voidMoveCourser(0,0,7);
    35cc:	80 e0       	ldi	r24, 0x00	; 0
    35ce:	60 e0       	ldi	r22, 0x00	; 0
    35d0:	47 e0       	ldi	r20, 0x07	; 7
    35d2:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
					LCD_voidSendChar(0,u8sec+48);
    35d6:	80 91 cb 00 	lds	r24, 0x00CB
    35da:	98 2f       	mov	r25, r24
    35dc:	90 5d       	subi	r25, 0xD0	; 208
    35de:	80 e0       	ldi	r24, 0x00	; 0
    35e0:	69 2f       	mov	r22, r25
    35e2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
    35e6:	fe 01       	movw	r30, r28
    35e8:	ef 5a       	subi	r30, 0xAF	; 175
    35ea:	ff 4f       	sbci	r31, 0xFF	; 255
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	a8 ec       	ldi	r26, 0xC8	; 200
    35f2:	b2 e4       	ldi	r27, 0x42	; 66
    35f4:	80 83       	st	Z, r24
    35f6:	91 83       	std	Z+1, r25	; 0x01
    35f8:	a2 83       	std	Z+2, r26	; 0x02
    35fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35fc:	8e 01       	movw	r16, r28
    35fe:	03 5b       	subi	r16, 0xB3	; 179
    3600:	1f 4f       	sbci	r17, 0xFF	; 255
    3602:	fe 01       	movw	r30, r28
    3604:	ef 5a       	subi	r30, 0xAF	; 175
    3606:	ff 4f       	sbci	r31, 0xFF	; 255
    3608:	60 81       	ld	r22, Z
    360a:	71 81       	ldd	r23, Z+1	; 0x01
    360c:	82 81       	ldd	r24, Z+2	; 0x02
    360e:	93 81       	ldd	r25, Z+3	; 0x03
    3610:	20 e0       	ldi	r18, 0x00	; 0
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	4a ef       	ldi	r20, 0xFA	; 250
    3616:	54 e4       	ldi	r21, 0x44	; 68
    3618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    361c:	dc 01       	movw	r26, r24
    361e:	cb 01       	movw	r24, r22
    3620:	f8 01       	movw	r30, r16
    3622:	80 83       	st	Z, r24
    3624:	91 83       	std	Z+1, r25	; 0x01
    3626:	a2 83       	std	Z+2, r26	; 0x02
    3628:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    362a:	fe 01       	movw	r30, r28
    362c:	e3 5b       	subi	r30, 0xB3	; 179
    362e:	ff 4f       	sbci	r31, 0xFF	; 255
    3630:	60 81       	ld	r22, Z
    3632:	71 81       	ldd	r23, Z+1	; 0x01
    3634:	82 81       	ldd	r24, Z+2	; 0x02
    3636:	93 81       	ldd	r25, Z+3	; 0x03
    3638:	20 e0       	ldi	r18, 0x00	; 0
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	40 e8       	ldi	r20, 0x80	; 128
    363e:	5f e3       	ldi	r21, 0x3F	; 63
    3640:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3644:	88 23       	and	r24, r24
    3646:	44 f4       	brge	.+16     	; 0x3658 <LCD_voidTime+0x374>
		__ticks = 1;
    3648:	fe 01       	movw	r30, r28
    364a:	e5 5b       	subi	r30, 0xB5	; 181
    364c:	ff 4f       	sbci	r31, 0xFF	; 255
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	91 83       	std	Z+1, r25	; 0x01
    3654:	80 83       	st	Z, r24
    3656:	64 c0       	rjmp	.+200    	; 0x3720 <LCD_voidTime+0x43c>
	else if (__tmp > 65535)
    3658:	fe 01       	movw	r30, r28
    365a:	e3 5b       	subi	r30, 0xB3	; 179
    365c:	ff 4f       	sbci	r31, 0xFF	; 255
    365e:	60 81       	ld	r22, Z
    3660:	71 81       	ldd	r23, Z+1	; 0x01
    3662:	82 81       	ldd	r24, Z+2	; 0x02
    3664:	93 81       	ldd	r25, Z+3	; 0x03
    3666:	20 e0       	ldi	r18, 0x00	; 0
    3668:	3f ef       	ldi	r19, 0xFF	; 255
    366a:	4f e7       	ldi	r20, 0x7F	; 127
    366c:	57 e4       	ldi	r21, 0x47	; 71
    366e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3672:	18 16       	cp	r1, r24
    3674:	0c f0       	brlt	.+2      	; 0x3678 <LCD_voidTime+0x394>
    3676:	43 c0       	rjmp	.+134    	; 0x36fe <LCD_voidTime+0x41a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3678:	fe 01       	movw	r30, r28
    367a:	ef 5a       	subi	r30, 0xAF	; 175
    367c:	ff 4f       	sbci	r31, 0xFF	; 255
    367e:	60 81       	ld	r22, Z
    3680:	71 81       	ldd	r23, Z+1	; 0x01
    3682:	82 81       	ldd	r24, Z+2	; 0x02
    3684:	93 81       	ldd	r25, Z+3	; 0x03
    3686:	20 e0       	ldi	r18, 0x00	; 0
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	40 e2       	ldi	r20, 0x20	; 32
    368c:	51 e4       	ldi	r21, 0x41	; 65
    368e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	8e 01       	movw	r16, r28
    3698:	05 5b       	subi	r16, 0xB5	; 181
    369a:	1f 4f       	sbci	r17, 0xFF	; 255
    369c:	bc 01       	movw	r22, r24
    369e:	cd 01       	movw	r24, r26
    36a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	f8 01       	movw	r30, r16
    36aa:	91 83       	std	Z+1, r25	; 0x01
    36ac:	80 83       	st	Z, r24
    36ae:	1f c0       	rjmp	.+62     	; 0x36ee <LCD_voidTime+0x40a>
    36b0:	fe 01       	movw	r30, r28
    36b2:	e7 5b       	subi	r30, 0xB7	; 183
    36b4:	ff 4f       	sbci	r31, 0xFF	; 255
    36b6:	88 ec       	ldi	r24, 0xC8	; 200
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	91 83       	std	Z+1, r25	; 0x01
    36bc:	80 83       	st	Z, r24
    36be:	fe 01       	movw	r30, r28
    36c0:	e7 5b       	subi	r30, 0xB7	; 183
    36c2:	ff 4f       	sbci	r31, 0xFF	; 255
    36c4:	80 81       	ld	r24, Z
    36c6:	91 81       	ldd	r25, Z+1	; 0x01
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	f1 f7       	brne	.-4      	; 0x36c8 <LCD_voidTime+0x3e4>
    36cc:	fe 01       	movw	r30, r28
    36ce:	e7 5b       	subi	r30, 0xB7	; 183
    36d0:	ff 4f       	sbci	r31, 0xFF	; 255
    36d2:	91 83       	std	Z+1, r25	; 0x01
    36d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d6:	de 01       	movw	r26, r28
    36d8:	a5 5b       	subi	r26, 0xB5	; 181
    36da:	bf 4f       	sbci	r27, 0xFF	; 255
    36dc:	fe 01       	movw	r30, r28
    36de:	e5 5b       	subi	r30, 0xB5	; 181
    36e0:	ff 4f       	sbci	r31, 0xFF	; 255
    36e2:	80 81       	ld	r24, Z
    36e4:	91 81       	ldd	r25, Z+1	; 0x01
    36e6:	01 97       	sbiw	r24, 0x01	; 1
    36e8:	11 96       	adiw	r26, 0x01	; 1
    36ea:	9c 93       	st	X, r25
    36ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ee:	fe 01       	movw	r30, r28
    36f0:	e5 5b       	subi	r30, 0xB5	; 181
    36f2:	ff 4f       	sbci	r31, 0xFF	; 255
    36f4:	80 81       	ld	r24, Z
    36f6:	91 81       	ldd	r25, Z+1	; 0x01
    36f8:	00 97       	sbiw	r24, 0x00	; 0
    36fa:	d1 f6       	brne	.-76     	; 0x36b0 <LCD_voidTime+0x3cc>
    36fc:	c5 c0       	rjmp	.+394    	; 0x3888 <LCD_voidTime+0x5a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36fe:	8e 01       	movw	r16, r28
    3700:	05 5b       	subi	r16, 0xB5	; 181
    3702:	1f 4f       	sbci	r17, 0xFF	; 255
    3704:	fe 01       	movw	r30, r28
    3706:	e3 5b       	subi	r30, 0xB3	; 179
    3708:	ff 4f       	sbci	r31, 0xFF	; 255
    370a:	60 81       	ld	r22, Z
    370c:	71 81       	ldd	r23, Z+1	; 0x01
    370e:	82 81       	ldd	r24, Z+2	; 0x02
    3710:	93 81       	ldd	r25, Z+3	; 0x03
    3712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3716:	dc 01       	movw	r26, r24
    3718:	cb 01       	movw	r24, r22
    371a:	f8 01       	movw	r30, r16
    371c:	91 83       	std	Z+1, r25	; 0x01
    371e:	80 83       	st	Z, r24
    3720:	de 01       	movw	r26, r28
    3722:	a9 5b       	subi	r26, 0xB9	; 185
    3724:	bf 4f       	sbci	r27, 0xFF	; 255
    3726:	fe 01       	movw	r30, r28
    3728:	e5 5b       	subi	r30, 0xB5	; 181
    372a:	ff 4f       	sbci	r31, 0xFF	; 255
    372c:	80 81       	ld	r24, Z
    372e:	91 81       	ldd	r25, Z+1	; 0x01
    3730:	11 96       	adiw	r26, 0x01	; 1
    3732:	9c 93       	st	X, r25
    3734:	8e 93       	st	-X, r24
    3736:	fe 01       	movw	r30, r28
    3738:	e9 5b       	subi	r30, 0xB9	; 185
    373a:	ff 4f       	sbci	r31, 0xFF	; 255
    373c:	80 81       	ld	r24, Z
    373e:	91 81       	ldd	r25, Z+1	; 0x01
    3740:	01 97       	sbiw	r24, 0x01	; 1
    3742:	f1 f7       	brne	.-4      	; 0x3740 <LCD_voidTime+0x45c>
    3744:	fe 01       	movw	r30, r28
    3746:	e9 5b       	subi	r30, 0xB9	; 185
    3748:	ff 4f       	sbci	r31, 0xFF	; 255
    374a:	91 83       	std	Z+1, r25	; 0x01
    374c:	80 83       	st	Z, r24
    374e:	9c c0       	rjmp	.+312    	; 0x3888 <LCD_voidTime+0x5a4>
					_delay_ms(100);
				}

				else if(u8sec>10)
    3750:	80 91 cb 00 	lds	r24, 0x00CB
    3754:	8b 30       	cpi	r24, 0x0B	; 11
    3756:	08 f4       	brcc	.+2      	; 0x375a <LCD_voidTime+0x476>
    3758:	97 c0       	rjmp	.+302    	; 0x3888 <LCD_voidTime+0x5a4>
				{
					u8sec--;
    375a:	80 91 cb 00 	lds	r24, 0x00CB
    375e:	81 50       	subi	r24, 0x01	; 1
    3760:	80 93 cb 00 	sts	0x00CB, r24
					LCD_voidMoveCourser(0,0,6);
    3764:	80 e0       	ldi	r24, 0x00	; 0
    3766:	60 e0       	ldi	r22, 0x00	; 0
    3768:	46 e0       	ldi	r20, 0x06	; 6
    376a:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
					LCD_voidSendNumber(0,u8sec);
    376e:	80 91 cb 00 	lds	r24, 0x00CB
    3772:	28 2f       	mov	r18, r24
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	80 e0       	ldi	r24, 0x00	; 0
    3778:	b9 01       	movw	r22, r18
    377a:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
    377e:	fe 01       	movw	r30, r28
    3780:	ed 5b       	subi	r30, 0xBD	; 189
    3782:	ff 4f       	sbci	r31, 0xFF	; 255
    3784:	80 e0       	ldi	r24, 0x00	; 0
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	a8 ec       	ldi	r26, 0xC8	; 200
    378a:	b2 e4       	ldi	r27, 0x42	; 66
    378c:	80 83       	st	Z, r24
    378e:	91 83       	std	Z+1, r25	; 0x01
    3790:	a2 83       	std	Z+2, r26	; 0x02
    3792:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3794:	8e 01       	movw	r16, r28
    3796:	01 5c       	subi	r16, 0xC1	; 193
    3798:	1f 4f       	sbci	r17, 0xFF	; 255
    379a:	fe 01       	movw	r30, r28
    379c:	ed 5b       	subi	r30, 0xBD	; 189
    379e:	ff 4f       	sbci	r31, 0xFF	; 255
    37a0:	60 81       	ld	r22, Z
    37a2:	71 81       	ldd	r23, Z+1	; 0x01
    37a4:	82 81       	ldd	r24, Z+2	; 0x02
    37a6:	93 81       	ldd	r25, Z+3	; 0x03
    37a8:	20 e0       	ldi	r18, 0x00	; 0
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	4a ef       	ldi	r20, 0xFA	; 250
    37ae:	54 e4       	ldi	r21, 0x44	; 68
    37b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b4:	dc 01       	movw	r26, r24
    37b6:	cb 01       	movw	r24, r22
    37b8:	f8 01       	movw	r30, r16
    37ba:	80 83       	st	Z, r24
    37bc:	91 83       	std	Z+1, r25	; 0x01
    37be:	a2 83       	std	Z+2, r26	; 0x02
    37c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37c2:	fe 01       	movw	r30, r28
    37c4:	ff 96       	adiw	r30, 0x3f	; 63
    37c6:	60 81       	ld	r22, Z
    37c8:	71 81       	ldd	r23, Z+1	; 0x01
    37ca:	82 81       	ldd	r24, Z+2	; 0x02
    37cc:	93 81       	ldd	r25, Z+3	; 0x03
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	40 e8       	ldi	r20, 0x80	; 128
    37d4:	5f e3       	ldi	r21, 0x3F	; 63
    37d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37da:	88 23       	and	r24, r24
    37dc:	2c f4       	brge	.+10     	; 0x37e8 <LCD_voidTime+0x504>
		__ticks = 1;
    37de:	81 e0       	ldi	r24, 0x01	; 1
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	9e af       	std	Y+62, r25	; 0x3e
    37e4:	8d af       	std	Y+61, r24	; 0x3d
    37e6:	46 c0       	rjmp	.+140    	; 0x3874 <LCD_voidTime+0x590>
	else if (__tmp > 65535)
    37e8:	fe 01       	movw	r30, r28
    37ea:	ff 96       	adiw	r30, 0x3f	; 63
    37ec:	60 81       	ld	r22, Z
    37ee:	71 81       	ldd	r23, Z+1	; 0x01
    37f0:	82 81       	ldd	r24, Z+2	; 0x02
    37f2:	93 81       	ldd	r25, Z+3	; 0x03
    37f4:	20 e0       	ldi	r18, 0x00	; 0
    37f6:	3f ef       	ldi	r19, 0xFF	; 255
    37f8:	4f e7       	ldi	r20, 0x7F	; 127
    37fa:	57 e4       	ldi	r21, 0x47	; 71
    37fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3800:	18 16       	cp	r1, r24
    3802:	64 f5       	brge	.+88     	; 0x385c <LCD_voidTime+0x578>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3804:	fe 01       	movw	r30, r28
    3806:	ed 5b       	subi	r30, 0xBD	; 189
    3808:	ff 4f       	sbci	r31, 0xFF	; 255
    380a:	60 81       	ld	r22, Z
    380c:	71 81       	ldd	r23, Z+1	; 0x01
    380e:	82 81       	ldd	r24, Z+2	; 0x02
    3810:	93 81       	ldd	r25, Z+3	; 0x03
    3812:	20 e0       	ldi	r18, 0x00	; 0
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	40 e2       	ldi	r20, 0x20	; 32
    3818:	51 e4       	ldi	r21, 0x41	; 65
    381a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    381e:	dc 01       	movw	r26, r24
    3820:	cb 01       	movw	r24, r22
    3822:	bc 01       	movw	r22, r24
    3824:	cd 01       	movw	r24, r26
    3826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    382a:	dc 01       	movw	r26, r24
    382c:	cb 01       	movw	r24, r22
    382e:	9e af       	std	Y+62, r25	; 0x3e
    3830:	8d af       	std	Y+61, r24	; 0x3d
    3832:	0f c0       	rjmp	.+30     	; 0x3852 <LCD_voidTime+0x56e>
    3834:	88 ec       	ldi	r24, 0xC8	; 200
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	9c af       	std	Y+60, r25	; 0x3c
    383a:	8b af       	std	Y+59, r24	; 0x3b
    383c:	8b ad       	ldd	r24, Y+59	; 0x3b
    383e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3840:	01 97       	sbiw	r24, 0x01	; 1
    3842:	f1 f7       	brne	.-4      	; 0x3840 <LCD_voidTime+0x55c>
    3844:	9c af       	std	Y+60, r25	; 0x3c
    3846:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3848:	8d ad       	ldd	r24, Y+61	; 0x3d
    384a:	9e ad       	ldd	r25, Y+62	; 0x3e
    384c:	01 97       	sbiw	r24, 0x01	; 1
    384e:	9e af       	std	Y+62, r25	; 0x3e
    3850:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3852:	8d ad       	ldd	r24, Y+61	; 0x3d
    3854:	9e ad       	ldd	r25, Y+62	; 0x3e
    3856:	00 97       	sbiw	r24, 0x00	; 0
    3858:	69 f7       	brne	.-38     	; 0x3834 <LCD_voidTime+0x550>
    385a:	16 c0       	rjmp	.+44     	; 0x3888 <LCD_voidTime+0x5a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    385c:	fe 01       	movw	r30, r28
    385e:	ff 96       	adiw	r30, 0x3f	; 63
    3860:	60 81       	ld	r22, Z
    3862:	71 81       	ldd	r23, Z+1	; 0x01
    3864:	82 81       	ldd	r24, Z+2	; 0x02
    3866:	93 81       	ldd	r25, Z+3	; 0x03
    3868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    386c:	dc 01       	movw	r26, r24
    386e:	cb 01       	movw	r24, r22
    3870:	9e af       	std	Y+62, r25	; 0x3e
    3872:	8d af       	std	Y+61, r24	; 0x3d
    3874:	8d ad       	ldd	r24, Y+61	; 0x3d
    3876:	9e ad       	ldd	r25, Y+62	; 0x3e
    3878:	9a af       	std	Y+58, r25	; 0x3a
    387a:	89 af       	std	Y+57, r24	; 0x39
    387c:	89 ad       	ldd	r24, Y+57	; 0x39
    387e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3880:	01 97       	sbiw	r24, 0x01	; 1
    3882:	f1 f7       	brne	.-4      	; 0x3880 <LCD_voidTime+0x59c>
    3884:	9a af       	std	Y+58, r25	; 0x3a
    3886:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(100);

				}

				if(u8sec==0)
    3888:	80 91 cb 00 	lds	r24, 0x00CB
    388c:	88 23       	and	r24, r24
    388e:	29 f0       	breq	.+10     	; 0x389a <LCD_voidTime+0x5b6>


		if(u8sec!=0)
		{
			u8sec=u8sec+1;
			while(u8sec!=0)
    3890:	80 91 cb 00 	lds	r24, 0x00CB
    3894:	88 23       	and	r24, r24
    3896:	09 f0       	breq	.+2      	; 0x389a <LCD_voidTime+0x5b6>
    3898:	86 ce       	rjmp	.-756    	; 0x35a6 <LCD_voidTime+0x2c2>
				if(u8sec==0)
					break;
			}
		}

			if(u8minute!=0)
    389a:	80 91 ca 00 	lds	r24, 0x00CA
    389e:	88 23       	and	r24, r24
    38a0:	09 f4       	brne	.+2      	; 0x38a4 <LCD_voidTime+0x5c0>
    38a2:	2f c1       	rjmp	.+606    	; 0x3b02 <LCD_voidTime+0x81e>
			{
				u8minute=u8minute+1;
    38a4:	80 91 ca 00 	lds	r24, 0x00CA
    38a8:	8f 5f       	subi	r24, 0xFF	; 255
    38aa:	80 93 ca 00 	sts	0x00CA, r24
    38ae:	24 c1       	rjmp	.+584    	; 0x3af8 <LCD_voidTime+0x814>
				while(u8minute!=0)
				{
					if(u8minute<=10)
    38b0:	80 91 ca 00 	lds	r24, 0x00CA
    38b4:	8b 30       	cpi	r24, 0x0B	; 11
    38b6:	08 f0       	brcs	.+2      	; 0x38ba <LCD_voidTime+0x5d6>
    38b8:	90 c0       	rjmp	.+288    	; 0x39da <LCD_voidTime+0x6f6>
					{
						LCD_voidMoveCourser(0,0,3);
    38ba:	80 e0       	ldi	r24, 0x00	; 0
    38bc:	60 e0       	ldi	r22, 0x00	; 0
    38be:	43 e0       	ldi	r20, 0x03	; 3
    38c0:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
						LCD_voidSendChar(0,'0');
    38c4:	80 e0       	ldi	r24, 0x00	; 0
    38c6:	60 e3       	ldi	r22, 0x30	; 48
    38c8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
						u8minute--;
    38cc:	80 91 ca 00 	lds	r24, 0x00CA
    38d0:	81 50       	subi	r24, 0x01	; 1
    38d2:	80 93 ca 00 	sts	0x00CA, r24
						LCD_voidMoveCourser(0,0,4);
    38d6:	80 e0       	ldi	r24, 0x00	; 0
    38d8:	60 e0       	ldi	r22, 0x00	; 0
    38da:	44 e0       	ldi	r20, 0x04	; 4
    38dc:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
						LCD_voidSendChar(0,u8minute+48);
    38e0:	80 91 ca 00 	lds	r24, 0x00CA
    38e4:	98 2f       	mov	r25, r24
    38e6:	90 5d       	subi	r25, 0xD0	; 208
    38e8:	80 e0       	ldi	r24, 0x00	; 0
    38ea:	69 2f       	mov	r22, r25
    38ec:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
    38f0:	80 e0       	ldi	r24, 0x00	; 0
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	aa e7       	ldi	r26, 0x7A	; 122
    38f6:	b4 e4       	ldi	r27, 0x44	; 68
    38f8:	8d ab       	std	Y+53, r24	; 0x35
    38fa:	9e ab       	std	Y+54, r25	; 0x36
    38fc:	af ab       	std	Y+55, r26	; 0x37
    38fe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3900:	6d a9       	ldd	r22, Y+53	; 0x35
    3902:	7e a9       	ldd	r23, Y+54	; 0x36
    3904:	8f a9       	ldd	r24, Y+55	; 0x37
    3906:	98 ad       	ldd	r25, Y+56	; 0x38
    3908:	20 e0       	ldi	r18, 0x00	; 0
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	4a ef       	ldi	r20, 0xFA	; 250
    390e:	54 e4       	ldi	r21, 0x44	; 68
    3910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3914:	dc 01       	movw	r26, r24
    3916:	cb 01       	movw	r24, r22
    3918:	89 ab       	std	Y+49, r24	; 0x31
    391a:	9a ab       	std	Y+50, r25	; 0x32
    391c:	ab ab       	std	Y+51, r26	; 0x33
    391e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3920:	69 a9       	ldd	r22, Y+49	; 0x31
    3922:	7a a9       	ldd	r23, Y+50	; 0x32
    3924:	8b a9       	ldd	r24, Y+51	; 0x33
    3926:	9c a9       	ldd	r25, Y+52	; 0x34
    3928:	20 e0       	ldi	r18, 0x00	; 0
    392a:	30 e0       	ldi	r19, 0x00	; 0
    392c:	40 e8       	ldi	r20, 0x80	; 128
    392e:	5f e3       	ldi	r21, 0x3F	; 63
    3930:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3934:	88 23       	and	r24, r24
    3936:	2c f4       	brge	.+10     	; 0x3942 <LCD_voidTime+0x65e>
		__ticks = 1;
    3938:	81 e0       	ldi	r24, 0x01	; 1
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	98 ab       	std	Y+48, r25	; 0x30
    393e:	8f a7       	std	Y+47, r24	; 0x2f
    3940:	3f c0       	rjmp	.+126    	; 0x39c0 <LCD_voidTime+0x6dc>
	else if (__tmp > 65535)
    3942:	69 a9       	ldd	r22, Y+49	; 0x31
    3944:	7a a9       	ldd	r23, Y+50	; 0x32
    3946:	8b a9       	ldd	r24, Y+51	; 0x33
    3948:	9c a9       	ldd	r25, Y+52	; 0x34
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	3f ef       	ldi	r19, 0xFF	; 255
    394e:	4f e7       	ldi	r20, 0x7F	; 127
    3950:	57 e4       	ldi	r21, 0x47	; 71
    3952:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3956:	18 16       	cp	r1, r24
    3958:	4c f5       	brge	.+82     	; 0x39ac <LCD_voidTime+0x6c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    395a:	6d a9       	ldd	r22, Y+53	; 0x35
    395c:	7e a9       	ldd	r23, Y+54	; 0x36
    395e:	8f a9       	ldd	r24, Y+55	; 0x37
    3960:	98 ad       	ldd	r25, Y+56	; 0x38
    3962:	20 e0       	ldi	r18, 0x00	; 0
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	40 e2       	ldi	r20, 0x20	; 32
    3968:	51 e4       	ldi	r21, 0x41	; 65
    396a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    396e:	dc 01       	movw	r26, r24
    3970:	cb 01       	movw	r24, r22
    3972:	bc 01       	movw	r22, r24
    3974:	cd 01       	movw	r24, r26
    3976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    397a:	dc 01       	movw	r26, r24
    397c:	cb 01       	movw	r24, r22
    397e:	98 ab       	std	Y+48, r25	; 0x30
    3980:	8f a7       	std	Y+47, r24	; 0x2f
    3982:	0f c0       	rjmp	.+30     	; 0x39a2 <LCD_voidTime+0x6be>
    3984:	88 ec       	ldi	r24, 0xC8	; 200
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	9e a7       	std	Y+46, r25	; 0x2e
    398a:	8d a7       	std	Y+45, r24	; 0x2d
    398c:	8d a5       	ldd	r24, Y+45	; 0x2d
    398e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3990:	01 97       	sbiw	r24, 0x01	; 1
    3992:	f1 f7       	brne	.-4      	; 0x3990 <LCD_voidTime+0x6ac>
    3994:	9e a7       	std	Y+46, r25	; 0x2e
    3996:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3998:	8f a5       	ldd	r24, Y+47	; 0x2f
    399a:	98 a9       	ldd	r25, Y+48	; 0x30
    399c:	01 97       	sbiw	r24, 0x01	; 1
    399e:	98 ab       	std	Y+48, r25	; 0x30
    39a0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    39a4:	98 a9       	ldd	r25, Y+48	; 0x30
    39a6:	00 97       	sbiw	r24, 0x00	; 0
    39a8:	69 f7       	brne	.-38     	; 0x3984 <LCD_voidTime+0x6a0>
    39aa:	14 c0       	rjmp	.+40     	; 0x39d4 <LCD_voidTime+0x6f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ac:	69 a9       	ldd	r22, Y+49	; 0x31
    39ae:	7a a9       	ldd	r23, Y+50	; 0x32
    39b0:	8b a9       	ldd	r24, Y+51	; 0x33
    39b2:	9c a9       	ldd	r25, Y+52	; 0x34
    39b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b8:	dc 01       	movw	r26, r24
    39ba:	cb 01       	movw	r24, r22
    39bc:	98 ab       	std	Y+48, r25	; 0x30
    39be:	8f a7       	std	Y+47, r24	; 0x2f
    39c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    39c2:	98 a9       	ldd	r25, Y+48	; 0x30
    39c4:	9c a7       	std	Y+44, r25	; 0x2c
    39c6:	8b a7       	std	Y+43, r24	; 0x2b
    39c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    39ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    39cc:	01 97       	sbiw	r24, 0x01	; 1
    39ce:	f1 f7       	brne	.-4      	; 0x39cc <LCD_voidTime+0x6e8>
    39d0:	9c a7       	std	Y+44, r25	; 0x2c
    39d2:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(1000);
						LCD_Second();
    39d4:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <LCD_Second>
    39d8:	8b c0       	rjmp	.+278    	; 0x3af0 <LCD_voidTime+0x80c>
					}

					else if(u8minute>10)
    39da:	80 91 ca 00 	lds	r24, 0x00CA
    39de:	8b 30       	cpi	r24, 0x0B	; 11
    39e0:	08 f4       	brcc	.+2      	; 0x39e4 <LCD_voidTime+0x700>
    39e2:	86 c0       	rjmp	.+268    	; 0x3af0 <LCD_voidTime+0x80c>
					{
						u8minute--;
    39e4:	80 91 ca 00 	lds	r24, 0x00CA
    39e8:	81 50       	subi	r24, 0x01	; 1
    39ea:	80 93 ca 00 	sts	0x00CA, r24
						LCD_voidMoveCourser(0,0,3);
    39ee:	80 e0       	ldi	r24, 0x00	; 0
    39f0:	60 e0       	ldi	r22, 0x00	; 0
    39f2:	43 e0       	ldi	r20, 0x03	; 3
    39f4:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
						LCD_voidSendNumber(0,u8minute);
    39f8:	80 91 ca 00 	lds	r24, 0x00CA
    39fc:	28 2f       	mov	r18, r24
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	80 e0       	ldi	r24, 0x00	; 0
    3a02:	b9 01       	movw	r22, r18
    3a04:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	aa e7       	ldi	r26, 0x7A	; 122
    3a0e:	b4 e4       	ldi	r27, 0x44	; 68
    3a10:	8f a3       	std	Y+39, r24	; 0x27
    3a12:	98 a7       	std	Y+40, r25	; 0x28
    3a14:	a9 a7       	std	Y+41, r26	; 0x29
    3a16:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a18:	6f a1       	ldd	r22, Y+39	; 0x27
    3a1a:	78 a5       	ldd	r23, Y+40	; 0x28
    3a1c:	89 a5       	ldd	r24, Y+41	; 0x29
    3a1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	4a ef       	ldi	r20, 0xFA	; 250
    3a26:	54 e4       	ldi	r21, 0x44	; 68
    3a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a2c:	dc 01       	movw	r26, r24
    3a2e:	cb 01       	movw	r24, r22
    3a30:	8b a3       	std	Y+35, r24	; 0x23
    3a32:	9c a3       	std	Y+36, r25	; 0x24
    3a34:	ad a3       	std	Y+37, r26	; 0x25
    3a36:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a38:	6b a1       	ldd	r22, Y+35	; 0x23
    3a3a:	7c a1       	ldd	r23, Y+36	; 0x24
    3a3c:	8d a1       	ldd	r24, Y+37	; 0x25
    3a3e:	9e a1       	ldd	r25, Y+38	; 0x26
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	40 e8       	ldi	r20, 0x80	; 128
    3a46:	5f e3       	ldi	r21, 0x3F	; 63
    3a48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a4c:	88 23       	and	r24, r24
    3a4e:	2c f4       	brge	.+10     	; 0x3a5a <LCD_voidTime+0x776>
		__ticks = 1;
    3a50:	81 e0       	ldi	r24, 0x01	; 1
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	9a a3       	std	Y+34, r25	; 0x22
    3a56:	89 a3       	std	Y+33, r24	; 0x21
    3a58:	3f c0       	rjmp	.+126    	; 0x3ad8 <LCD_voidTime+0x7f4>
	else if (__tmp > 65535)
    3a5a:	6b a1       	ldd	r22, Y+35	; 0x23
    3a5c:	7c a1       	ldd	r23, Y+36	; 0x24
    3a5e:	8d a1       	ldd	r24, Y+37	; 0x25
    3a60:	9e a1       	ldd	r25, Y+38	; 0x26
    3a62:	20 e0       	ldi	r18, 0x00	; 0
    3a64:	3f ef       	ldi	r19, 0xFF	; 255
    3a66:	4f e7       	ldi	r20, 0x7F	; 127
    3a68:	57 e4       	ldi	r21, 0x47	; 71
    3a6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a6e:	18 16       	cp	r1, r24
    3a70:	4c f5       	brge	.+82     	; 0x3ac4 <LCD_voidTime+0x7e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a72:	6f a1       	ldd	r22, Y+39	; 0x27
    3a74:	78 a5       	ldd	r23, Y+40	; 0x28
    3a76:	89 a5       	ldd	r24, Y+41	; 0x29
    3a78:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a7a:	20 e0       	ldi	r18, 0x00	; 0
    3a7c:	30 e0       	ldi	r19, 0x00	; 0
    3a7e:	40 e2       	ldi	r20, 0x20	; 32
    3a80:	51 e4       	ldi	r21, 0x41	; 65
    3a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a86:	dc 01       	movw	r26, r24
    3a88:	cb 01       	movw	r24, r22
    3a8a:	bc 01       	movw	r22, r24
    3a8c:	cd 01       	movw	r24, r26
    3a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a92:	dc 01       	movw	r26, r24
    3a94:	cb 01       	movw	r24, r22
    3a96:	9a a3       	std	Y+34, r25	; 0x22
    3a98:	89 a3       	std	Y+33, r24	; 0x21
    3a9a:	0f c0       	rjmp	.+30     	; 0x3aba <LCD_voidTime+0x7d6>
    3a9c:	88 ec       	ldi	r24, 0xC8	; 200
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	98 a3       	std	Y+32, r25	; 0x20
    3aa2:	8f 8f       	std	Y+31, r24	; 0x1f
    3aa4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3aa6:	98 a1       	ldd	r25, Y+32	; 0x20
    3aa8:	01 97       	sbiw	r24, 0x01	; 1
    3aaa:	f1 f7       	brne	.-4      	; 0x3aa8 <LCD_voidTime+0x7c4>
    3aac:	98 a3       	std	Y+32, r25	; 0x20
    3aae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ab0:	89 a1       	ldd	r24, Y+33	; 0x21
    3ab2:	9a a1       	ldd	r25, Y+34	; 0x22
    3ab4:	01 97       	sbiw	r24, 0x01	; 1
    3ab6:	9a a3       	std	Y+34, r25	; 0x22
    3ab8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aba:	89 a1       	ldd	r24, Y+33	; 0x21
    3abc:	9a a1       	ldd	r25, Y+34	; 0x22
    3abe:	00 97       	sbiw	r24, 0x00	; 0
    3ac0:	69 f7       	brne	.-38     	; 0x3a9c <LCD_voidTime+0x7b8>
    3ac2:	14 c0       	rjmp	.+40     	; 0x3aec <LCD_voidTime+0x808>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac4:	6b a1       	ldd	r22, Y+35	; 0x23
    3ac6:	7c a1       	ldd	r23, Y+36	; 0x24
    3ac8:	8d a1       	ldd	r24, Y+37	; 0x25
    3aca:	9e a1       	ldd	r25, Y+38	; 0x26
    3acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad0:	dc 01       	movw	r26, r24
    3ad2:	cb 01       	movw	r24, r22
    3ad4:	9a a3       	std	Y+34, r25	; 0x22
    3ad6:	89 a3       	std	Y+33, r24	; 0x21
    3ad8:	89 a1       	ldd	r24, Y+33	; 0x21
    3ada:	9a a1       	ldd	r25, Y+34	; 0x22
    3adc:	9e 8f       	std	Y+30, r25	; 0x1e
    3ade:	8d 8f       	std	Y+29, r24	; 0x1d
    3ae0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ae2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ae4:	01 97       	sbiw	r24, 0x01	; 1
    3ae6:	f1 f7       	brne	.-4      	; 0x3ae4 <LCD_voidTime+0x800>
    3ae8:	9e 8f       	std	Y+30, r25	; 0x1e
    3aea:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(1000);
						LCD_Second();
    3aec:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <LCD_Second>
					}

					if(u8minute==0)
    3af0:	80 91 ca 00 	lds	r24, 0x00CA
    3af4:	88 23       	and	r24, r24
    3af6:	29 f0       	breq	.+10     	; 0x3b02 <LCD_voidTime+0x81e>
		}

			if(u8minute!=0)
			{
				u8minute=u8minute+1;
				while(u8minute!=0)
    3af8:	80 91 ca 00 	lds	r24, 0x00CA
    3afc:	88 23       	and	r24, r24
    3afe:	09 f0       	breq	.+2      	; 0x3b02 <LCD_voidTime+0x81e>
    3b00:	d7 ce       	rjmp	.-594    	; 0x38b0 <LCD_voidTime+0x5cc>
					if(u8minute==0)
						break;
				}

			}
			if(u8hour!=0)
    3b02:	80 91 c9 00 	lds	r24, 0x00C9
    3b06:	88 23       	and	r24, r24
    3b08:	09 f4       	brne	.+2      	; 0x3b0c <LCD_voidTime+0x828>
    3b0a:	2f c1       	rjmp	.+606    	; 0x3d6a <LCD_voidTime+0xa86>
			{
				u8hour=u8hour+1;
    3b0c:	80 91 c9 00 	lds	r24, 0x00C9
    3b10:	8f 5f       	subi	r24, 0xFF	; 255
    3b12:	80 93 c9 00 	sts	0x00C9, r24
    3b16:	24 c1       	rjmp	.+584    	; 0x3d60 <LCD_voidTime+0xa7c>
				while(u8hour!=0)
				{
					if(u8hour<=10)
    3b18:	80 91 c9 00 	lds	r24, 0x00C9
    3b1c:	8b 30       	cpi	r24, 0x0B	; 11
    3b1e:	08 f0       	brcs	.+2      	; 0x3b22 <LCD_voidTime+0x83e>
    3b20:	90 c0       	rjmp	.+288    	; 0x3c42 <LCD_voidTime+0x95e>
					{
						LCD_voidMoveCourser(0,0,0);
    3b22:	80 e0       	ldi	r24, 0x00	; 0
    3b24:	60 e0       	ldi	r22, 0x00	; 0
    3b26:	40 e0       	ldi	r20, 0x00	; 0
    3b28:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
						LCD_voidSendChar(0,'0');
    3b2c:	80 e0       	ldi	r24, 0x00	; 0
    3b2e:	60 e3       	ldi	r22, 0x30	; 48
    3b30:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
						u8hour--;
    3b34:	80 91 c9 00 	lds	r24, 0x00C9
    3b38:	81 50       	subi	r24, 0x01	; 1
    3b3a:	80 93 c9 00 	sts	0x00C9, r24
						LCD_voidMoveCourser(0,0,1);
    3b3e:	80 e0       	ldi	r24, 0x00	; 0
    3b40:	60 e0       	ldi	r22, 0x00	; 0
    3b42:	41 e0       	ldi	r20, 0x01	; 1
    3b44:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
						LCD_voidSendChar(0,u8hour+48);
    3b48:	80 91 c9 00 	lds	r24, 0x00C9
    3b4c:	98 2f       	mov	r25, r24
    3b4e:	90 5d       	subi	r25, 0xD0	; 208
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	69 2f       	mov	r22, r25
    3b54:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
    3b58:	80 e0       	ldi	r24, 0x00	; 0
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	a8 ec       	ldi	r26, 0xC8	; 200
    3b5e:	b2 e4       	ldi	r27, 0x42	; 66
    3b60:	89 8f       	std	Y+25, r24	; 0x19
    3b62:	9a 8f       	std	Y+26, r25	; 0x1a
    3b64:	ab 8f       	std	Y+27, r26	; 0x1b
    3b66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b68:	69 8d       	ldd	r22, Y+25	; 0x19
    3b6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	4a ef       	ldi	r20, 0xFA	; 250
    3b76:	54 e4       	ldi	r21, 0x44	; 68
    3b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	8d 8b       	std	Y+21, r24	; 0x15
    3b82:	9e 8b       	std	Y+22, r25	; 0x16
    3b84:	af 8b       	std	Y+23, r26	; 0x17
    3b86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b88:	6d 89       	ldd	r22, Y+21	; 0x15
    3b8a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b8c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b8e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b90:	20 e0       	ldi	r18, 0x00	; 0
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	40 e8       	ldi	r20, 0x80	; 128
    3b96:	5f e3       	ldi	r21, 0x3F	; 63
    3b98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b9c:	88 23       	and	r24, r24
    3b9e:	2c f4       	brge	.+10     	; 0x3baa <LCD_voidTime+0x8c6>
		__ticks = 1;
    3ba0:	81 e0       	ldi	r24, 0x01	; 1
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	9c 8b       	std	Y+20, r25	; 0x14
    3ba6:	8b 8b       	std	Y+19, r24	; 0x13
    3ba8:	3f c0       	rjmp	.+126    	; 0x3c28 <LCD_voidTime+0x944>
	else if (__tmp > 65535)
    3baa:	6d 89       	ldd	r22, Y+21	; 0x15
    3bac:	7e 89       	ldd	r23, Y+22	; 0x16
    3bae:	8f 89       	ldd	r24, Y+23	; 0x17
    3bb0:	98 8d       	ldd	r25, Y+24	; 0x18
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	3f ef       	ldi	r19, 0xFF	; 255
    3bb6:	4f e7       	ldi	r20, 0x7F	; 127
    3bb8:	57 e4       	ldi	r21, 0x47	; 71
    3bba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bbe:	18 16       	cp	r1, r24
    3bc0:	4c f5       	brge	.+82     	; 0x3c14 <LCD_voidTime+0x930>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bc2:	69 8d       	ldd	r22, Y+25	; 0x19
    3bc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bca:	20 e0       	ldi	r18, 0x00	; 0
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	40 e2       	ldi	r20, 0x20	; 32
    3bd0:	51 e4       	ldi	r21, 0x41	; 65
    3bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd6:	dc 01       	movw	r26, r24
    3bd8:	cb 01       	movw	r24, r22
    3bda:	bc 01       	movw	r22, r24
    3bdc:	cd 01       	movw	r24, r26
    3bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be2:	dc 01       	movw	r26, r24
    3be4:	cb 01       	movw	r24, r22
    3be6:	9c 8b       	std	Y+20, r25	; 0x14
    3be8:	8b 8b       	std	Y+19, r24	; 0x13
    3bea:	0f c0       	rjmp	.+30     	; 0x3c0a <LCD_voidTime+0x926>
    3bec:	88 ec       	ldi	r24, 0xC8	; 200
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	9a 8b       	std	Y+18, r25	; 0x12
    3bf2:	89 8b       	std	Y+17, r24	; 0x11
    3bf4:	89 89       	ldd	r24, Y+17	; 0x11
    3bf6:	9a 89       	ldd	r25, Y+18	; 0x12
    3bf8:	01 97       	sbiw	r24, 0x01	; 1
    3bfa:	f1 f7       	brne	.-4      	; 0x3bf8 <LCD_voidTime+0x914>
    3bfc:	9a 8b       	std	Y+18, r25	; 0x12
    3bfe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c00:	8b 89       	ldd	r24, Y+19	; 0x13
    3c02:	9c 89       	ldd	r25, Y+20	; 0x14
    3c04:	01 97       	sbiw	r24, 0x01	; 1
    3c06:	9c 8b       	std	Y+20, r25	; 0x14
    3c08:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c0a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c0c:	9c 89       	ldd	r25, Y+20	; 0x14
    3c0e:	00 97       	sbiw	r24, 0x00	; 0
    3c10:	69 f7       	brne	.-38     	; 0x3bec <LCD_voidTime+0x908>
    3c12:	14 c0       	rjmp	.+40     	; 0x3c3c <LCD_voidTime+0x958>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c14:	6d 89       	ldd	r22, Y+21	; 0x15
    3c16:	7e 89       	ldd	r23, Y+22	; 0x16
    3c18:	8f 89       	ldd	r24, Y+23	; 0x17
    3c1a:	98 8d       	ldd	r25, Y+24	; 0x18
    3c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c20:	dc 01       	movw	r26, r24
    3c22:	cb 01       	movw	r24, r22
    3c24:	9c 8b       	std	Y+20, r25	; 0x14
    3c26:	8b 8b       	std	Y+19, r24	; 0x13
    3c28:	8b 89       	ldd	r24, Y+19	; 0x13
    3c2a:	9c 89       	ldd	r25, Y+20	; 0x14
    3c2c:	98 8b       	std	Y+16, r25	; 0x10
    3c2e:	8f 87       	std	Y+15, r24	; 0x0f
    3c30:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c32:	98 89       	ldd	r25, Y+16	; 0x10
    3c34:	01 97       	sbiw	r24, 0x01	; 1
    3c36:	f1 f7       	brne	.-4      	; 0x3c34 <LCD_voidTime+0x950>
    3c38:	98 8b       	std	Y+16, r25	; 0x10
    3c3a:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(100);
						LCD_SecToMin();
    3c3c:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_SecToMin>
    3c40:	8b c0       	rjmp	.+278    	; 0x3d58 <LCD_voidTime+0xa74>
					}

					else if(u8hour>10)
    3c42:	80 91 c9 00 	lds	r24, 0x00C9
    3c46:	8b 30       	cpi	r24, 0x0B	; 11
    3c48:	08 f4       	brcc	.+2      	; 0x3c4c <LCD_voidTime+0x968>
    3c4a:	86 c0       	rjmp	.+268    	; 0x3d58 <LCD_voidTime+0xa74>
					{

						u8hour--;
    3c4c:	80 91 c9 00 	lds	r24, 0x00C9
    3c50:	81 50       	subi	r24, 0x01	; 1
    3c52:	80 93 c9 00 	sts	0x00C9, r24
						LCD_voidMoveCourser(0,0,0);
    3c56:	80 e0       	ldi	r24, 0x00	; 0
    3c58:	60 e0       	ldi	r22, 0x00	; 0
    3c5a:	40 e0       	ldi	r20, 0x00	; 0
    3c5c:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
						LCD_voidSendNumber(0,u8hour);
    3c60:	80 91 c9 00 	lds	r24, 0x00C9
    3c64:	28 2f       	mov	r18, r24
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	80 e0       	ldi	r24, 0x00	; 0
    3c6a:	b9 01       	movw	r22, r18
    3c6c:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
    3c70:	80 e0       	ldi	r24, 0x00	; 0
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	a8 ec       	ldi	r26, 0xC8	; 200
    3c76:	b2 e4       	ldi	r27, 0x42	; 66
    3c78:	8b 87       	std	Y+11, r24	; 0x0b
    3c7a:	9c 87       	std	Y+12, r25	; 0x0c
    3c7c:	ad 87       	std	Y+13, r26	; 0x0d
    3c7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c80:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c82:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c88:	20 e0       	ldi	r18, 0x00	; 0
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	4a ef       	ldi	r20, 0xFA	; 250
    3c8e:	54 e4       	ldi	r21, 0x44	; 68
    3c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c94:	dc 01       	movw	r26, r24
    3c96:	cb 01       	movw	r24, r22
    3c98:	8f 83       	std	Y+7, r24	; 0x07
    3c9a:	98 87       	std	Y+8, r25	; 0x08
    3c9c:	a9 87       	std	Y+9, r26	; 0x09
    3c9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ca2:	78 85       	ldd	r23, Y+8	; 0x08
    3ca4:	89 85       	ldd	r24, Y+9	; 0x09
    3ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ca8:	20 e0       	ldi	r18, 0x00	; 0
    3caa:	30 e0       	ldi	r19, 0x00	; 0
    3cac:	40 e8       	ldi	r20, 0x80	; 128
    3cae:	5f e3       	ldi	r21, 0x3F	; 63
    3cb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cb4:	88 23       	and	r24, r24
    3cb6:	2c f4       	brge	.+10     	; 0x3cc2 <LCD_voidTime+0x9de>
		__ticks = 1;
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	9e 83       	std	Y+6, r25	; 0x06
    3cbe:	8d 83       	std	Y+5, r24	; 0x05
    3cc0:	3f c0       	rjmp	.+126    	; 0x3d40 <LCD_voidTime+0xa5c>
	else if (__tmp > 65535)
    3cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    3cc4:	78 85       	ldd	r23, Y+8	; 0x08
    3cc6:	89 85       	ldd	r24, Y+9	; 0x09
    3cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cca:	20 e0       	ldi	r18, 0x00	; 0
    3ccc:	3f ef       	ldi	r19, 0xFF	; 255
    3cce:	4f e7       	ldi	r20, 0x7F	; 127
    3cd0:	57 e4       	ldi	r21, 0x47	; 71
    3cd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cd6:	18 16       	cp	r1, r24
    3cd8:	4c f5       	brge	.+82     	; 0x3d2c <LCD_voidTime+0xa48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cda:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cde:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ce0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	40 e2       	ldi	r20, 0x20	; 32
    3ce8:	51 e4       	ldi	r21, 0x41	; 65
    3cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cee:	dc 01       	movw	r26, r24
    3cf0:	cb 01       	movw	r24, r22
    3cf2:	bc 01       	movw	r22, r24
    3cf4:	cd 01       	movw	r24, r26
    3cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cfa:	dc 01       	movw	r26, r24
    3cfc:	cb 01       	movw	r24, r22
    3cfe:	9e 83       	std	Y+6, r25	; 0x06
    3d00:	8d 83       	std	Y+5, r24	; 0x05
    3d02:	0f c0       	rjmp	.+30     	; 0x3d22 <LCD_voidTime+0xa3e>
    3d04:	88 ec       	ldi	r24, 0xC8	; 200
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	9c 83       	std	Y+4, r25	; 0x04
    3d0a:	8b 83       	std	Y+3, r24	; 0x03
    3d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d10:	01 97       	sbiw	r24, 0x01	; 1
    3d12:	f1 f7       	brne	.-4      	; 0x3d10 <LCD_voidTime+0xa2c>
    3d14:	9c 83       	std	Y+4, r25	; 0x04
    3d16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d18:	8d 81       	ldd	r24, Y+5	; 0x05
    3d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d1c:	01 97       	sbiw	r24, 0x01	; 1
    3d1e:	9e 83       	std	Y+6, r25	; 0x06
    3d20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d22:	8d 81       	ldd	r24, Y+5	; 0x05
    3d24:	9e 81       	ldd	r25, Y+6	; 0x06
    3d26:	00 97       	sbiw	r24, 0x00	; 0
    3d28:	69 f7       	brne	.-38     	; 0x3d04 <LCD_voidTime+0xa20>
    3d2a:	14 c0       	rjmp	.+40     	; 0x3d54 <LCD_voidTime+0xa70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d2e:	78 85       	ldd	r23, Y+8	; 0x08
    3d30:	89 85       	ldd	r24, Y+9	; 0x09
    3d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d38:	dc 01       	movw	r26, r24
    3d3a:	cb 01       	movw	r24, r22
    3d3c:	9e 83       	std	Y+6, r25	; 0x06
    3d3e:	8d 83       	std	Y+5, r24	; 0x05
    3d40:	8d 81       	ldd	r24, Y+5	; 0x05
    3d42:	9e 81       	ldd	r25, Y+6	; 0x06
    3d44:	9a 83       	std	Y+2, r25	; 0x02
    3d46:	89 83       	std	Y+1, r24	; 0x01
    3d48:	89 81       	ldd	r24, Y+1	; 0x01
    3d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d4c:	01 97       	sbiw	r24, 0x01	; 1
    3d4e:	f1 f7       	brne	.-4      	; 0x3d4c <LCD_voidTime+0xa68>
    3d50:	9a 83       	std	Y+2, r25	; 0x02
    3d52:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(100);
						LCD_SecToMin();
    3d54:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_SecToMin>

						}

						if(u8hour==0)
    3d58:	80 91 c9 00 	lds	r24, 0x00C9
    3d5c:	88 23       	and	r24, r24
    3d5e:	29 f0       	breq	.+10     	; 0x3d6a <LCD_voidTime+0xa86>

			}
			if(u8hour!=0)
			{
				u8hour=u8hour+1;
				while(u8hour!=0)
    3d60:	80 91 c9 00 	lds	r24, 0x00C9
    3d64:	88 23       	and	r24, r24
    3d66:	09 f0       	breq	.+2      	; 0x3d6a <LCD_voidTime+0xa86>
    3d68:	d7 ce       	rjmp	.-594    	; 0x3b18 <LCD_voidTime+0x834>
					}

				}


			LCD_voidClrScr(0);
    3d6a:	80 e0       	ldi	r24, 0x00	; 0
    3d6c:	0e 94 32 15 	call	0x2a64	; 0x2a64 <LCD_voidClrScr>
			LCD_voidSendString(0,"It is the time");
    3d70:	25 e7       	ldi	r18, 0x75	; 117
    3d72:	30 e0       	ldi	r19, 0x00	; 0
    3d74:	80 e0       	ldi	r24, 0x00	; 0
    3d76:	b9 01       	movw	r22, r18
    3d78:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_voidSendString>



}
    3d7c:	ce 59       	subi	r28, 0x9E	; 158
    3d7e:	df 4f       	sbci	r29, 0xFF	; 255
    3d80:	0f b6       	in	r0, 0x3f	; 63
    3d82:	f8 94       	cli
    3d84:	de bf       	out	0x3e, r29	; 62
    3d86:	0f be       	out	0x3f, r0	; 63
    3d88:	cd bf       	out	0x3d, r28	; 61
    3d8a:	cf 91       	pop	r28
    3d8c:	df 91       	pop	r29
    3d8e:	1f 91       	pop	r17
    3d90:	0f 91       	pop	r16
    3d92:	08 95       	ret

00003d94 <LCD_Second>:
void LCD_Second(void){
    3d94:	df 93       	push	r29
    3d96:	cf 93       	push	r28
    3d98:	cd b7       	in	r28, 0x3d	; 61
    3d9a:	de b7       	in	r29, 0x3e	; 62
    3d9c:	6c 97       	sbiw	r28, 0x1c	; 28
    3d9e:	0f b6       	in	r0, 0x3f	; 63
    3da0:	f8 94       	cli
    3da2:	de bf       	out	0x3e, r29	; 62
    3da4:	0f be       	out	0x3f, r0	; 63
    3da6:	cd bf       	out	0x3d, r28	; 61
	u8sec=60;
    3da8:	8c e3       	ldi	r24, 0x3C	; 60
    3daa:	80 93 cb 00 	sts	0x00CB, r24
    3dae:	21 c1       	rjmp	.+578    	; 0x3ff2 <LCD_Second+0x25e>
		while(u8sec!=0)
		{
			if(u8minute==0)
    3db0:	80 91 ca 00 	lds	r24, 0x00CA
    3db4:	88 23       	and	r24, r24
    3db6:	09 f4       	brne	.+2      	; 0x3dba <LCD_Second+0x26>
    3db8:	21 c1       	rjmp	.+578    	; 0x3ffc <LCD_Second+0x268>
					break;
			if(u8sec<=10)
    3dba:	80 91 cb 00 	lds	r24, 0x00CB
    3dbe:	8b 30       	cpi	r24, 0x0B	; 11
    3dc0:	08 f0       	brcs	.+2      	; 0x3dc4 <LCD_Second+0x30>
    3dc2:	8e c0       	rjmp	.+284    	; 0x3ee0 <LCD_Second+0x14c>
			{
				LCD_voidMoveCourser(0,0,6);
    3dc4:	80 e0       	ldi	r24, 0x00	; 0
    3dc6:	60 e0       	ldi	r22, 0x00	; 0
    3dc8:	46 e0       	ldi	r20, 0x06	; 6
    3dca:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				LCD_voidSendChar(0,'0');
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	60 e3       	ldi	r22, 0x30	; 48
    3dd2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
				u8sec--;
    3dd6:	80 91 cb 00 	lds	r24, 0x00CB
    3dda:	81 50       	subi	r24, 0x01	; 1
    3ddc:	80 93 cb 00 	sts	0x00CB, r24
				LCD_voidMoveCourser(0,0,7);
    3de0:	80 e0       	ldi	r24, 0x00	; 0
    3de2:	60 e0       	ldi	r22, 0x00	; 0
    3de4:	47 e0       	ldi	r20, 0x07	; 7
    3de6:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				LCD_voidSendChar(0,u8sec+48);
    3dea:	80 91 cb 00 	lds	r24, 0x00CB
    3dee:	98 2f       	mov	r25, r24
    3df0:	90 5d       	subi	r25, 0xD0	; 208
    3df2:	80 e0       	ldi	r24, 0x00	; 0
    3df4:	69 2f       	mov	r22, r25
    3df6:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
    3dfa:	80 e0       	ldi	r24, 0x00	; 0
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	a8 ec       	ldi	r26, 0xC8	; 200
    3e00:	b2 e4       	ldi	r27, 0x42	; 66
    3e02:	89 8f       	std	Y+25, r24	; 0x19
    3e04:	9a 8f       	std	Y+26, r25	; 0x1a
    3e06:	ab 8f       	std	Y+27, r26	; 0x1b
    3e08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e0a:	69 8d       	ldd	r22, Y+25	; 0x19
    3e0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e12:	20 e0       	ldi	r18, 0x00	; 0
    3e14:	30 e0       	ldi	r19, 0x00	; 0
    3e16:	4a ef       	ldi	r20, 0xFA	; 250
    3e18:	54 e4       	ldi	r21, 0x44	; 68
    3e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e1e:	dc 01       	movw	r26, r24
    3e20:	cb 01       	movw	r24, r22
    3e22:	8d 8b       	std	Y+21, r24	; 0x15
    3e24:	9e 8b       	std	Y+22, r25	; 0x16
    3e26:	af 8b       	std	Y+23, r26	; 0x17
    3e28:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e2a:	6d 89       	ldd	r22, Y+21	; 0x15
    3e2c:	7e 89       	ldd	r23, Y+22	; 0x16
    3e2e:	8f 89       	ldd	r24, Y+23	; 0x17
    3e30:	98 8d       	ldd	r25, Y+24	; 0x18
    3e32:	20 e0       	ldi	r18, 0x00	; 0
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	40 e8       	ldi	r20, 0x80	; 128
    3e38:	5f e3       	ldi	r21, 0x3F	; 63
    3e3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e3e:	88 23       	and	r24, r24
    3e40:	2c f4       	brge	.+10     	; 0x3e4c <LCD_Second+0xb8>
		__ticks = 1;
    3e42:	81 e0       	ldi	r24, 0x01	; 1
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	9c 8b       	std	Y+20, r25	; 0x14
    3e48:	8b 8b       	std	Y+19, r24	; 0x13
    3e4a:	3f c0       	rjmp	.+126    	; 0x3eca <LCD_Second+0x136>
	else if (__tmp > 65535)
    3e4c:	6d 89       	ldd	r22, Y+21	; 0x15
    3e4e:	7e 89       	ldd	r23, Y+22	; 0x16
    3e50:	8f 89       	ldd	r24, Y+23	; 0x17
    3e52:	98 8d       	ldd	r25, Y+24	; 0x18
    3e54:	20 e0       	ldi	r18, 0x00	; 0
    3e56:	3f ef       	ldi	r19, 0xFF	; 255
    3e58:	4f e7       	ldi	r20, 0x7F	; 127
    3e5a:	57 e4       	ldi	r21, 0x47	; 71
    3e5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e60:	18 16       	cp	r1, r24
    3e62:	4c f5       	brge	.+82     	; 0x3eb6 <LCD_Second+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e64:	69 8d       	ldd	r22, Y+25	; 0x19
    3e66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e6c:	20 e0       	ldi	r18, 0x00	; 0
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	40 e2       	ldi	r20, 0x20	; 32
    3e72:	51 e4       	ldi	r21, 0x41	; 65
    3e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e78:	dc 01       	movw	r26, r24
    3e7a:	cb 01       	movw	r24, r22
    3e7c:	bc 01       	movw	r22, r24
    3e7e:	cd 01       	movw	r24, r26
    3e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e84:	dc 01       	movw	r26, r24
    3e86:	cb 01       	movw	r24, r22
    3e88:	9c 8b       	std	Y+20, r25	; 0x14
    3e8a:	8b 8b       	std	Y+19, r24	; 0x13
    3e8c:	0f c0       	rjmp	.+30     	; 0x3eac <LCD_Second+0x118>
    3e8e:	88 ec       	ldi	r24, 0xC8	; 200
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	9a 8b       	std	Y+18, r25	; 0x12
    3e94:	89 8b       	std	Y+17, r24	; 0x11
    3e96:	89 89       	ldd	r24, Y+17	; 0x11
    3e98:	9a 89       	ldd	r25, Y+18	; 0x12
    3e9a:	01 97       	sbiw	r24, 0x01	; 1
    3e9c:	f1 f7       	brne	.-4      	; 0x3e9a <LCD_Second+0x106>
    3e9e:	9a 8b       	std	Y+18, r25	; 0x12
    3ea0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ea2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ea4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ea6:	01 97       	sbiw	r24, 0x01	; 1
    3ea8:	9c 8b       	std	Y+20, r25	; 0x14
    3eaa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eac:	8b 89       	ldd	r24, Y+19	; 0x13
    3eae:	9c 89       	ldd	r25, Y+20	; 0x14
    3eb0:	00 97       	sbiw	r24, 0x00	; 0
    3eb2:	69 f7       	brne	.-38     	; 0x3e8e <LCD_Second+0xfa>
    3eb4:	9e c0       	rjmp	.+316    	; 0x3ff2 <LCD_Second+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eb6:	6d 89       	ldd	r22, Y+21	; 0x15
    3eb8:	7e 89       	ldd	r23, Y+22	; 0x16
    3eba:	8f 89       	ldd	r24, Y+23	; 0x17
    3ebc:	98 8d       	ldd	r25, Y+24	; 0x18
    3ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ec2:	dc 01       	movw	r26, r24
    3ec4:	cb 01       	movw	r24, r22
    3ec6:	9c 8b       	std	Y+20, r25	; 0x14
    3ec8:	8b 8b       	std	Y+19, r24	; 0x13
    3eca:	8b 89       	ldd	r24, Y+19	; 0x13
    3ecc:	9c 89       	ldd	r25, Y+20	; 0x14
    3ece:	98 8b       	std	Y+16, r25	; 0x10
    3ed0:	8f 87       	std	Y+15, r24	; 0x0f
    3ed2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ed4:	98 89       	ldd	r25, Y+16	; 0x10
    3ed6:	01 97       	sbiw	r24, 0x01	; 1
    3ed8:	f1 f7       	brne	.-4      	; 0x3ed6 <LCD_Second+0x142>
    3eda:	98 8b       	std	Y+16, r25	; 0x10
    3edc:	8f 87       	std	Y+15, r24	; 0x0f
    3ede:	89 c0       	rjmp	.+274    	; 0x3ff2 <LCD_Second+0x25e>
				_delay_ms(100);
			}

			else if(u8sec>10)
    3ee0:	80 91 cb 00 	lds	r24, 0x00CB
    3ee4:	8b 30       	cpi	r24, 0x0B	; 11
    3ee6:	08 f4       	brcc	.+2      	; 0x3eea <LCD_Second+0x156>
    3ee8:	84 c0       	rjmp	.+264    	; 0x3ff2 <LCD_Second+0x25e>
			{
				u8sec--;
    3eea:	80 91 cb 00 	lds	r24, 0x00CB
    3eee:	81 50       	subi	r24, 0x01	; 1
    3ef0:	80 93 cb 00 	sts	0x00CB, r24
				LCD_voidMoveCourser(0,0,6);
    3ef4:	80 e0       	ldi	r24, 0x00	; 0
    3ef6:	60 e0       	ldi	r22, 0x00	; 0
    3ef8:	46 e0       	ldi	r20, 0x06	; 6
    3efa:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				LCD_voidSendNumber(0,u8sec);
    3efe:	80 91 cb 00 	lds	r24, 0x00CB
    3f02:	28 2f       	mov	r18, r24
    3f04:	30 e0       	ldi	r19, 0x00	; 0
    3f06:	80 e0       	ldi	r24, 0x00	; 0
    3f08:	b9 01       	movw	r22, r18
    3f0a:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
    3f0e:	80 e0       	ldi	r24, 0x00	; 0
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	a8 ec       	ldi	r26, 0xC8	; 200
    3f14:	b2 e4       	ldi	r27, 0x42	; 66
    3f16:	8b 87       	std	Y+11, r24	; 0x0b
    3f18:	9c 87       	std	Y+12, r25	; 0x0c
    3f1a:	ad 87       	std	Y+13, r26	; 0x0d
    3f1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f26:	20 e0       	ldi	r18, 0x00	; 0
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	4a ef       	ldi	r20, 0xFA	; 250
    3f2c:	54 e4       	ldi	r21, 0x44	; 68
    3f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f32:	dc 01       	movw	r26, r24
    3f34:	cb 01       	movw	r24, r22
    3f36:	8f 83       	std	Y+7, r24	; 0x07
    3f38:	98 87       	std	Y+8, r25	; 0x08
    3f3a:	a9 87       	std	Y+9, r26	; 0x09
    3f3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f40:	78 85       	ldd	r23, Y+8	; 0x08
    3f42:	89 85       	ldd	r24, Y+9	; 0x09
    3f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f46:	20 e0       	ldi	r18, 0x00	; 0
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	40 e8       	ldi	r20, 0x80	; 128
    3f4c:	5f e3       	ldi	r21, 0x3F	; 63
    3f4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f52:	88 23       	and	r24, r24
    3f54:	2c f4       	brge	.+10     	; 0x3f60 <LCD_Second+0x1cc>
		__ticks = 1;
    3f56:	81 e0       	ldi	r24, 0x01	; 1
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	9e 83       	std	Y+6, r25	; 0x06
    3f5c:	8d 83       	std	Y+5, r24	; 0x05
    3f5e:	3f c0       	rjmp	.+126    	; 0x3fde <LCD_Second+0x24a>
	else if (__tmp > 65535)
    3f60:	6f 81       	ldd	r22, Y+7	; 0x07
    3f62:	78 85       	ldd	r23, Y+8	; 0x08
    3f64:	89 85       	ldd	r24, Y+9	; 0x09
    3f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f68:	20 e0       	ldi	r18, 0x00	; 0
    3f6a:	3f ef       	ldi	r19, 0xFF	; 255
    3f6c:	4f e7       	ldi	r20, 0x7F	; 127
    3f6e:	57 e4       	ldi	r21, 0x47	; 71
    3f70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f74:	18 16       	cp	r1, r24
    3f76:	4c f5       	brge	.+82     	; 0x3fca <LCD_Second+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f78:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f80:	20 e0       	ldi	r18, 0x00	; 0
    3f82:	30 e0       	ldi	r19, 0x00	; 0
    3f84:	40 e2       	ldi	r20, 0x20	; 32
    3f86:	51 e4       	ldi	r21, 0x41	; 65
    3f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f8c:	dc 01       	movw	r26, r24
    3f8e:	cb 01       	movw	r24, r22
    3f90:	bc 01       	movw	r22, r24
    3f92:	cd 01       	movw	r24, r26
    3f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f98:	dc 01       	movw	r26, r24
    3f9a:	cb 01       	movw	r24, r22
    3f9c:	9e 83       	std	Y+6, r25	; 0x06
    3f9e:	8d 83       	std	Y+5, r24	; 0x05
    3fa0:	0f c0       	rjmp	.+30     	; 0x3fc0 <LCD_Second+0x22c>
    3fa2:	88 ec       	ldi	r24, 0xC8	; 200
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	9c 83       	std	Y+4, r25	; 0x04
    3fa8:	8b 83       	std	Y+3, r24	; 0x03
    3faa:	8b 81       	ldd	r24, Y+3	; 0x03
    3fac:	9c 81       	ldd	r25, Y+4	; 0x04
    3fae:	01 97       	sbiw	r24, 0x01	; 1
    3fb0:	f1 f7       	brne	.-4      	; 0x3fae <LCD_Second+0x21a>
    3fb2:	9c 83       	std	Y+4, r25	; 0x04
    3fb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3fba:	01 97       	sbiw	r24, 0x01	; 1
    3fbc:	9e 83       	std	Y+6, r25	; 0x06
    3fbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    3fc4:	00 97       	sbiw	r24, 0x00	; 0
    3fc6:	69 f7       	brne	.-38     	; 0x3fa2 <LCD_Second+0x20e>
    3fc8:	14 c0       	rjmp	.+40     	; 0x3ff2 <LCD_Second+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fca:	6f 81       	ldd	r22, Y+7	; 0x07
    3fcc:	78 85       	ldd	r23, Y+8	; 0x08
    3fce:	89 85       	ldd	r24, Y+9	; 0x09
    3fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fd6:	dc 01       	movw	r26, r24
    3fd8:	cb 01       	movw	r24, r22
    3fda:	9e 83       	std	Y+6, r25	; 0x06
    3fdc:	8d 83       	std	Y+5, r24	; 0x05
    3fde:	8d 81       	ldd	r24, Y+5	; 0x05
    3fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    3fe2:	9a 83       	std	Y+2, r25	; 0x02
    3fe4:	89 83       	std	Y+1, r24	; 0x01
    3fe6:	89 81       	ldd	r24, Y+1	; 0x01
    3fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fea:	01 97       	sbiw	r24, 0x01	; 1
    3fec:	f1 f7       	brne	.-4      	; 0x3fea <LCD_Second+0x256>
    3fee:	9a 83       	std	Y+2, r25	; 0x02
    3ff0:	89 83       	std	Y+1, r24	; 0x01


}
void LCD_Second(void){
	u8sec=60;
		while(u8sec!=0)
    3ff2:	80 91 cb 00 	lds	r24, 0x00CB
    3ff6:	88 23       	and	r24, r24
    3ff8:	09 f0       	breq	.+2      	; 0x3ffc <LCD_Second+0x268>
    3ffa:	da ce       	rjmp	.-588    	; 0x3db0 <LCD_Second+0x1c>

		}



}
    3ffc:	6c 96       	adiw	r28, 0x1c	; 28
    3ffe:	0f b6       	in	r0, 0x3f	; 63
    4000:	f8 94       	cli
    4002:	de bf       	out	0x3e, r29	; 62
    4004:	0f be       	out	0x3f, r0	; 63
    4006:	cd bf       	out	0x3d, r28	; 61
    4008:	cf 91       	pop	r28
    400a:	df 91       	pop	r29
    400c:	08 95       	ret

0000400e <LCD_Minutes>:
void LCD_Minutes(void){
    400e:	df 93       	push	r29
    4010:	cf 93       	push	r28
    4012:	cd b7       	in	r28, 0x3d	; 61
    4014:	de b7       	in	r29, 0x3e	; 62
    4016:	6c 97       	sbiw	r28, 0x1c	; 28
    4018:	0f b6       	in	r0, 0x3f	; 63
    401a:	f8 94       	cli
    401c:	de bf       	out	0x3e, r29	; 62
    401e:	0f be       	out	0x3f, r0	; 63
    4020:	cd bf       	out	0x3d, r28	; 61

	u8minute=60;
    4022:	8c e3       	ldi	r24, 0x3C	; 60
    4024:	80 93 ca 00 	sts	0x00CA, r24
    4028:	1c c1       	rjmp	.+568    	; 0x4262 <LCD_Minutes+0x254>
		while(u8minute!=0)
		{
			if(u8minute<=10)
    402a:	80 91 ca 00 	lds	r24, 0x00CA
    402e:	8b 30       	cpi	r24, 0x0B	; 11
    4030:	08 f0       	brcs	.+2      	; 0x4034 <LCD_Minutes+0x26>
    4032:	8e c0       	rjmp	.+284    	; 0x4150 <LCD_Minutes+0x142>
			{
				LCD_voidMoveCourser(0,0,3);
    4034:	80 e0       	ldi	r24, 0x00	; 0
    4036:	60 e0       	ldi	r22, 0x00	; 0
    4038:	43 e0       	ldi	r20, 0x03	; 3
    403a:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				LCD_voidSendChar(0,'0');
    403e:	80 e0       	ldi	r24, 0x00	; 0
    4040:	60 e3       	ldi	r22, 0x30	; 48
    4042:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
				u8minute--;
    4046:	80 91 ca 00 	lds	r24, 0x00CA
    404a:	81 50       	subi	r24, 0x01	; 1
    404c:	80 93 ca 00 	sts	0x00CA, r24
				LCD_voidMoveCourser(0,0,4);
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	60 e0       	ldi	r22, 0x00	; 0
    4054:	44 e0       	ldi	r20, 0x04	; 4
    4056:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				LCD_voidSendChar(0,u8minute+48);
    405a:	80 91 ca 00 	lds	r24, 0x00CA
    405e:	98 2f       	mov	r25, r24
    4060:	90 5d       	subi	r25, 0xD0	; 208
    4062:	80 e0       	ldi	r24, 0x00	; 0
    4064:	69 2f       	mov	r22, r25
    4066:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
    406a:	80 e0       	ldi	r24, 0x00	; 0
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	a8 ec       	ldi	r26, 0xC8	; 200
    4070:	b2 e4       	ldi	r27, 0x42	; 66
    4072:	89 8f       	std	Y+25, r24	; 0x19
    4074:	9a 8f       	std	Y+26, r25	; 0x1a
    4076:	ab 8f       	std	Y+27, r26	; 0x1b
    4078:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    407a:	69 8d       	ldd	r22, Y+25	; 0x19
    407c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    407e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4080:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4082:	20 e0       	ldi	r18, 0x00	; 0
    4084:	30 e0       	ldi	r19, 0x00	; 0
    4086:	4a ef       	ldi	r20, 0xFA	; 250
    4088:	54 e4       	ldi	r21, 0x44	; 68
    408a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    408e:	dc 01       	movw	r26, r24
    4090:	cb 01       	movw	r24, r22
    4092:	8d 8b       	std	Y+21, r24	; 0x15
    4094:	9e 8b       	std	Y+22, r25	; 0x16
    4096:	af 8b       	std	Y+23, r26	; 0x17
    4098:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    409a:	6d 89       	ldd	r22, Y+21	; 0x15
    409c:	7e 89       	ldd	r23, Y+22	; 0x16
    409e:	8f 89       	ldd	r24, Y+23	; 0x17
    40a0:	98 8d       	ldd	r25, Y+24	; 0x18
    40a2:	20 e0       	ldi	r18, 0x00	; 0
    40a4:	30 e0       	ldi	r19, 0x00	; 0
    40a6:	40 e8       	ldi	r20, 0x80	; 128
    40a8:	5f e3       	ldi	r21, 0x3F	; 63
    40aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40ae:	88 23       	and	r24, r24
    40b0:	2c f4       	brge	.+10     	; 0x40bc <LCD_Minutes+0xae>
		__ticks = 1;
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	9c 8b       	std	Y+20, r25	; 0x14
    40b8:	8b 8b       	std	Y+19, r24	; 0x13
    40ba:	3f c0       	rjmp	.+126    	; 0x413a <LCD_Minutes+0x12c>
	else if (__tmp > 65535)
    40bc:	6d 89       	ldd	r22, Y+21	; 0x15
    40be:	7e 89       	ldd	r23, Y+22	; 0x16
    40c0:	8f 89       	ldd	r24, Y+23	; 0x17
    40c2:	98 8d       	ldd	r25, Y+24	; 0x18
    40c4:	20 e0       	ldi	r18, 0x00	; 0
    40c6:	3f ef       	ldi	r19, 0xFF	; 255
    40c8:	4f e7       	ldi	r20, 0x7F	; 127
    40ca:	57 e4       	ldi	r21, 0x47	; 71
    40cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40d0:	18 16       	cp	r1, r24
    40d2:	4c f5       	brge	.+82     	; 0x4126 <LCD_Minutes+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40d4:	69 8d       	ldd	r22, Y+25	; 0x19
    40d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40dc:	20 e0       	ldi	r18, 0x00	; 0
    40de:	30 e0       	ldi	r19, 0x00	; 0
    40e0:	40 e2       	ldi	r20, 0x20	; 32
    40e2:	51 e4       	ldi	r21, 0x41	; 65
    40e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40e8:	dc 01       	movw	r26, r24
    40ea:	cb 01       	movw	r24, r22
    40ec:	bc 01       	movw	r22, r24
    40ee:	cd 01       	movw	r24, r26
    40f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f4:	dc 01       	movw	r26, r24
    40f6:	cb 01       	movw	r24, r22
    40f8:	9c 8b       	std	Y+20, r25	; 0x14
    40fa:	8b 8b       	std	Y+19, r24	; 0x13
    40fc:	0f c0       	rjmp	.+30     	; 0x411c <LCD_Minutes+0x10e>
    40fe:	88 ec       	ldi	r24, 0xC8	; 200
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	9a 8b       	std	Y+18, r25	; 0x12
    4104:	89 8b       	std	Y+17, r24	; 0x11
    4106:	89 89       	ldd	r24, Y+17	; 0x11
    4108:	9a 89       	ldd	r25, Y+18	; 0x12
    410a:	01 97       	sbiw	r24, 0x01	; 1
    410c:	f1 f7       	brne	.-4      	; 0x410a <LCD_Minutes+0xfc>
    410e:	9a 8b       	std	Y+18, r25	; 0x12
    4110:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4112:	8b 89       	ldd	r24, Y+19	; 0x13
    4114:	9c 89       	ldd	r25, Y+20	; 0x14
    4116:	01 97       	sbiw	r24, 0x01	; 1
    4118:	9c 8b       	std	Y+20, r25	; 0x14
    411a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    411c:	8b 89       	ldd	r24, Y+19	; 0x13
    411e:	9c 89       	ldd	r25, Y+20	; 0x14
    4120:	00 97       	sbiw	r24, 0x00	; 0
    4122:	69 f7       	brne	.-38     	; 0x40fe <LCD_Minutes+0xf0>
    4124:	9e c0       	rjmp	.+316    	; 0x4262 <LCD_Minutes+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4126:	6d 89       	ldd	r22, Y+21	; 0x15
    4128:	7e 89       	ldd	r23, Y+22	; 0x16
    412a:	8f 89       	ldd	r24, Y+23	; 0x17
    412c:	98 8d       	ldd	r25, Y+24	; 0x18
    412e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4132:	dc 01       	movw	r26, r24
    4134:	cb 01       	movw	r24, r22
    4136:	9c 8b       	std	Y+20, r25	; 0x14
    4138:	8b 8b       	std	Y+19, r24	; 0x13
    413a:	8b 89       	ldd	r24, Y+19	; 0x13
    413c:	9c 89       	ldd	r25, Y+20	; 0x14
    413e:	98 8b       	std	Y+16, r25	; 0x10
    4140:	8f 87       	std	Y+15, r24	; 0x0f
    4142:	8f 85       	ldd	r24, Y+15	; 0x0f
    4144:	98 89       	ldd	r25, Y+16	; 0x10
    4146:	01 97       	sbiw	r24, 0x01	; 1
    4148:	f1 f7       	brne	.-4      	; 0x4146 <LCD_Minutes+0x138>
    414a:	98 8b       	std	Y+16, r25	; 0x10
    414c:	8f 87       	std	Y+15, r24	; 0x0f
    414e:	89 c0       	rjmp	.+274    	; 0x4262 <LCD_Minutes+0x254>
				_delay_ms(100);
			}

			else if(u8minute>10)
    4150:	80 91 ca 00 	lds	r24, 0x00CA
    4154:	8b 30       	cpi	r24, 0x0B	; 11
    4156:	08 f4       	brcc	.+2      	; 0x415a <LCD_Minutes+0x14c>
    4158:	84 c0       	rjmp	.+264    	; 0x4262 <LCD_Minutes+0x254>
			{
				u8minute--;
    415a:	80 91 ca 00 	lds	r24, 0x00CA
    415e:	81 50       	subi	r24, 0x01	; 1
    4160:	80 93 ca 00 	sts	0x00CA, r24
				LCD_voidMoveCourser(0,0,3);
    4164:	80 e0       	ldi	r24, 0x00	; 0
    4166:	60 e0       	ldi	r22, 0x00	; 0
    4168:	43 e0       	ldi	r20, 0x03	; 3
    416a:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				LCD_voidSendNumber(0,u8minute);
    416e:	80 91 ca 00 	lds	r24, 0x00CA
    4172:	28 2f       	mov	r18, r24
    4174:	30 e0       	ldi	r19, 0x00	; 0
    4176:	80 e0       	ldi	r24, 0x00	; 0
    4178:	b9 01       	movw	r22, r18
    417a:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
    417e:	80 e0       	ldi	r24, 0x00	; 0
    4180:	90 e0       	ldi	r25, 0x00	; 0
    4182:	a8 ec       	ldi	r26, 0xC8	; 200
    4184:	b2 e4       	ldi	r27, 0x42	; 66
    4186:	8b 87       	std	Y+11, r24	; 0x0b
    4188:	9c 87       	std	Y+12, r25	; 0x0c
    418a:	ad 87       	std	Y+13, r26	; 0x0d
    418c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    418e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4190:	7c 85       	ldd	r23, Y+12	; 0x0c
    4192:	8d 85       	ldd	r24, Y+13	; 0x0d
    4194:	9e 85       	ldd	r25, Y+14	; 0x0e
    4196:	20 e0       	ldi	r18, 0x00	; 0
    4198:	30 e0       	ldi	r19, 0x00	; 0
    419a:	4a ef       	ldi	r20, 0xFA	; 250
    419c:	54 e4       	ldi	r21, 0x44	; 68
    419e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41a2:	dc 01       	movw	r26, r24
    41a4:	cb 01       	movw	r24, r22
    41a6:	8f 83       	std	Y+7, r24	; 0x07
    41a8:	98 87       	std	Y+8, r25	; 0x08
    41aa:	a9 87       	std	Y+9, r26	; 0x09
    41ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41ae:	6f 81       	ldd	r22, Y+7	; 0x07
    41b0:	78 85       	ldd	r23, Y+8	; 0x08
    41b2:	89 85       	ldd	r24, Y+9	; 0x09
    41b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    41b6:	20 e0       	ldi	r18, 0x00	; 0
    41b8:	30 e0       	ldi	r19, 0x00	; 0
    41ba:	40 e8       	ldi	r20, 0x80	; 128
    41bc:	5f e3       	ldi	r21, 0x3F	; 63
    41be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41c2:	88 23       	and	r24, r24
    41c4:	2c f4       	brge	.+10     	; 0x41d0 <LCD_Minutes+0x1c2>
		__ticks = 1;
    41c6:	81 e0       	ldi	r24, 0x01	; 1
    41c8:	90 e0       	ldi	r25, 0x00	; 0
    41ca:	9e 83       	std	Y+6, r25	; 0x06
    41cc:	8d 83       	std	Y+5, r24	; 0x05
    41ce:	3f c0       	rjmp	.+126    	; 0x424e <LCD_Minutes+0x240>
	else if (__tmp > 65535)
    41d0:	6f 81       	ldd	r22, Y+7	; 0x07
    41d2:	78 85       	ldd	r23, Y+8	; 0x08
    41d4:	89 85       	ldd	r24, Y+9	; 0x09
    41d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41d8:	20 e0       	ldi	r18, 0x00	; 0
    41da:	3f ef       	ldi	r19, 0xFF	; 255
    41dc:	4f e7       	ldi	r20, 0x7F	; 127
    41de:	57 e4       	ldi	r21, 0x47	; 71
    41e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41e4:	18 16       	cp	r1, r24
    41e6:	4c f5       	brge	.+82     	; 0x423a <LCD_Minutes+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    41ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    41ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    41ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    41f0:	20 e0       	ldi	r18, 0x00	; 0
    41f2:	30 e0       	ldi	r19, 0x00	; 0
    41f4:	40 e2       	ldi	r20, 0x20	; 32
    41f6:	51 e4       	ldi	r21, 0x41	; 65
    41f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41fc:	dc 01       	movw	r26, r24
    41fe:	cb 01       	movw	r24, r22
    4200:	bc 01       	movw	r22, r24
    4202:	cd 01       	movw	r24, r26
    4204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4208:	dc 01       	movw	r26, r24
    420a:	cb 01       	movw	r24, r22
    420c:	9e 83       	std	Y+6, r25	; 0x06
    420e:	8d 83       	std	Y+5, r24	; 0x05
    4210:	0f c0       	rjmp	.+30     	; 0x4230 <LCD_Minutes+0x222>
    4212:	88 ec       	ldi	r24, 0xC8	; 200
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	9c 83       	std	Y+4, r25	; 0x04
    4218:	8b 83       	std	Y+3, r24	; 0x03
    421a:	8b 81       	ldd	r24, Y+3	; 0x03
    421c:	9c 81       	ldd	r25, Y+4	; 0x04
    421e:	01 97       	sbiw	r24, 0x01	; 1
    4220:	f1 f7       	brne	.-4      	; 0x421e <LCD_Minutes+0x210>
    4222:	9c 83       	std	Y+4, r25	; 0x04
    4224:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4226:	8d 81       	ldd	r24, Y+5	; 0x05
    4228:	9e 81       	ldd	r25, Y+6	; 0x06
    422a:	01 97       	sbiw	r24, 0x01	; 1
    422c:	9e 83       	std	Y+6, r25	; 0x06
    422e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4230:	8d 81       	ldd	r24, Y+5	; 0x05
    4232:	9e 81       	ldd	r25, Y+6	; 0x06
    4234:	00 97       	sbiw	r24, 0x00	; 0
    4236:	69 f7       	brne	.-38     	; 0x4212 <LCD_Minutes+0x204>
    4238:	14 c0       	rjmp	.+40     	; 0x4262 <LCD_Minutes+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    423a:	6f 81       	ldd	r22, Y+7	; 0x07
    423c:	78 85       	ldd	r23, Y+8	; 0x08
    423e:	89 85       	ldd	r24, Y+9	; 0x09
    4240:	9a 85       	ldd	r25, Y+10	; 0x0a
    4242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4246:	dc 01       	movw	r26, r24
    4248:	cb 01       	movw	r24, r22
    424a:	9e 83       	std	Y+6, r25	; 0x06
    424c:	8d 83       	std	Y+5, r24	; 0x05
    424e:	8d 81       	ldd	r24, Y+5	; 0x05
    4250:	9e 81       	ldd	r25, Y+6	; 0x06
    4252:	9a 83       	std	Y+2, r25	; 0x02
    4254:	89 83       	std	Y+1, r24	; 0x01
    4256:	89 81       	ldd	r24, Y+1	; 0x01
    4258:	9a 81       	ldd	r25, Y+2	; 0x02
    425a:	01 97       	sbiw	r24, 0x01	; 1
    425c:	f1 f7       	brne	.-4      	; 0x425a <LCD_Minutes+0x24c>
    425e:	9a 83       	std	Y+2, r25	; 0x02
    4260:	89 83       	std	Y+1, r24	; 0x01

}
void LCD_Minutes(void){

	u8minute=60;
		while(u8minute!=0)
    4262:	80 91 ca 00 	lds	r24, 0x00CA
    4266:	88 23       	and	r24, r24
    4268:	09 f0       	breq	.+2      	; 0x426c <LCD_Minutes+0x25e>
    426a:	df ce       	rjmp	.-578    	; 0x402a <LCD_Minutes+0x1c>
				LCD_voidSendNumber(0,u8minute);
				_delay_ms(100);

			}
			}
}
    426c:	6c 96       	adiw	r28, 0x1c	; 28
    426e:	0f b6       	in	r0, 0x3f	; 63
    4270:	f8 94       	cli
    4272:	de bf       	out	0x3e, r29	; 62
    4274:	0f be       	out	0x3f, r0	; 63
    4276:	cd bf       	out	0x3d, r28	; 61
    4278:	cf 91       	pop	r28
    427a:	df 91       	pop	r29
    427c:	08 95       	ret

0000427e <LCD_SecToMin>:
void LCD_SecToMin(void){
    427e:	df 93       	push	r29
    4280:	cf 93       	push	r28
    4282:	cd b7       	in	r28, 0x3d	; 61
    4284:	de b7       	in	r29, 0x3e	; 62
    4286:	e8 97       	sbiw	r28, 0x38	; 56
    4288:	0f b6       	in	r0, 0x3f	; 63
    428a:	f8 94       	cli
    428c:	de bf       	out	0x3e, r29	; 62
    428e:	0f be       	out	0x3f, r0	; 63
    4290:	cd bf       	out	0x3d, r28	; 61

	u8sec=59;
    4292:	8b e3       	ldi	r24, 0x3B	; 59
    4294:	80 93 cb 00 	sts	0x00CB, r24
		u8minute=59;
    4298:	8b e3       	ldi	r24, 0x3B	; 59
    429a:	80 93 ca 00 	sts	0x00CA, r24
		LCD_voidMoveCourser(0,0,3);
    429e:	80 e0       	ldi	r24, 0x00	; 0
    42a0:	60 e0       	ldi	r22, 0x00	; 0
    42a2:	43 e0       	ldi	r20, 0x03	; 3
    42a4:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
		LCD_voidSendNumber(0,u8minute);
    42a8:	80 91 ca 00 	lds	r24, 0x00CA
    42ac:	28 2f       	mov	r18, r24
    42ae:	30 e0       	ldi	r19, 0x00	; 0
    42b0:	80 e0       	ldi	r24, 0x00	; 0
    42b2:	b9 01       	movw	r22, r18
    42b4:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
    42b8:	58 c2       	rjmp	.+1200   	; 0x476a <LCD_SecToMin+0x4ec>

		while(u8minute!=0)
		{

			u8sec=60;
    42ba:	8c e3       	ldi	r24, 0x3C	; 60
    42bc:	80 93 cb 00 	sts	0x00CB, r24
    42c0:	33 c1       	rjmp	.+614    	; 0x4528 <LCD_SecToMin+0x2aa>
			while(u8sec!=0)
			{
			if(u8minute==0)
    42c2:	80 91 ca 00 	lds	r24, 0x00CA
    42c6:	88 23       	and	r24, r24
    42c8:	09 f4       	brne	.+2      	; 0x42cc <LCD_SecToMin+0x4e>
    42ca:	33 c1       	rjmp	.+614    	; 0x4532 <LCD_SecToMin+0x2b4>
				break;
			if(u8sec<=10)
    42cc:	80 91 cb 00 	lds	r24, 0x00CB
    42d0:	8b 30       	cpi	r24, 0x0B	; 11
    42d2:	08 f0       	brcs	.+2      	; 0x42d6 <LCD_SecToMin+0x58>
    42d4:	a0 c0       	rjmp	.+320    	; 0x4416 <LCD_SecToMin+0x198>
			{
				u8minute--;
    42d6:	80 91 ca 00 	lds	r24, 0x00CA
    42da:	81 50       	subi	r24, 0x01	; 1
    42dc:	80 93 ca 00 	sts	0x00CA, r24
				LCD_voidMoveCourser(0,0,4);
    42e0:	80 e0       	ldi	r24, 0x00	; 0
    42e2:	60 e0       	ldi	r22, 0x00	; 0
    42e4:	44 e0       	ldi	r20, 0x04	; 4
    42e6:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				LCD_voidSendChar(0,u8minute+48);
    42ea:	80 91 ca 00 	lds	r24, 0x00CA
    42ee:	98 2f       	mov	r25, r24
    42f0:	90 5d       	subi	r25, 0xD0	; 208
    42f2:	80 e0       	ldi	r24, 0x00	; 0
    42f4:	69 2f       	mov	r22, r25
    42f6:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
				LCD_voidMoveCourser(0,0,6);
    42fa:	80 e0       	ldi	r24, 0x00	; 0
    42fc:	60 e0       	ldi	r22, 0x00	; 0
    42fe:	46 e0       	ldi	r20, 0x06	; 6
    4300:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				LCD_voidSendChar(0,'0');
    4304:	80 e0       	ldi	r24, 0x00	; 0
    4306:	60 e3       	ldi	r22, 0x30	; 48
    4308:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
				u8sec--;
    430c:	80 91 cb 00 	lds	r24, 0x00CB
    4310:	81 50       	subi	r24, 0x01	; 1
    4312:	80 93 cb 00 	sts	0x00CB, r24
				LCD_voidMoveCourser(0,0,7);
    4316:	80 e0       	ldi	r24, 0x00	; 0
    4318:	60 e0       	ldi	r22, 0x00	; 0
    431a:	47 e0       	ldi	r20, 0x07	; 7
    431c:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				LCD_voidSendChar(0,u8sec+48);
    4320:	80 91 cb 00 	lds	r24, 0x00CB
    4324:	98 2f       	mov	r25, r24
    4326:	90 5d       	subi	r25, 0xD0	; 208
    4328:	80 e0       	ldi	r24, 0x00	; 0
    432a:	69 2f       	mov	r22, r25
    432c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
    4330:	80 e0       	ldi	r24, 0x00	; 0
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	a8 ec       	ldi	r26, 0xC8	; 200
    4336:	b2 e4       	ldi	r27, 0x42	; 66
    4338:	8d ab       	std	Y+53, r24	; 0x35
    433a:	9e ab       	std	Y+54, r25	; 0x36
    433c:	af ab       	std	Y+55, r26	; 0x37
    433e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4340:	6d a9       	ldd	r22, Y+53	; 0x35
    4342:	7e a9       	ldd	r23, Y+54	; 0x36
    4344:	8f a9       	ldd	r24, Y+55	; 0x37
    4346:	98 ad       	ldd	r25, Y+56	; 0x38
    4348:	20 e0       	ldi	r18, 0x00	; 0
    434a:	30 e0       	ldi	r19, 0x00	; 0
    434c:	4a ef       	ldi	r20, 0xFA	; 250
    434e:	54 e4       	ldi	r21, 0x44	; 68
    4350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4354:	dc 01       	movw	r26, r24
    4356:	cb 01       	movw	r24, r22
    4358:	89 ab       	std	Y+49, r24	; 0x31
    435a:	9a ab       	std	Y+50, r25	; 0x32
    435c:	ab ab       	std	Y+51, r26	; 0x33
    435e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4360:	69 a9       	ldd	r22, Y+49	; 0x31
    4362:	7a a9       	ldd	r23, Y+50	; 0x32
    4364:	8b a9       	ldd	r24, Y+51	; 0x33
    4366:	9c a9       	ldd	r25, Y+52	; 0x34
    4368:	20 e0       	ldi	r18, 0x00	; 0
    436a:	30 e0       	ldi	r19, 0x00	; 0
    436c:	40 e8       	ldi	r20, 0x80	; 128
    436e:	5f e3       	ldi	r21, 0x3F	; 63
    4370:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4374:	88 23       	and	r24, r24
    4376:	2c f4       	brge	.+10     	; 0x4382 <LCD_SecToMin+0x104>
		__ticks = 1;
    4378:	81 e0       	ldi	r24, 0x01	; 1
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	98 ab       	std	Y+48, r25	; 0x30
    437e:	8f a7       	std	Y+47, r24	; 0x2f
    4380:	3f c0       	rjmp	.+126    	; 0x4400 <LCD_SecToMin+0x182>
	else if (__tmp > 65535)
    4382:	69 a9       	ldd	r22, Y+49	; 0x31
    4384:	7a a9       	ldd	r23, Y+50	; 0x32
    4386:	8b a9       	ldd	r24, Y+51	; 0x33
    4388:	9c a9       	ldd	r25, Y+52	; 0x34
    438a:	20 e0       	ldi	r18, 0x00	; 0
    438c:	3f ef       	ldi	r19, 0xFF	; 255
    438e:	4f e7       	ldi	r20, 0x7F	; 127
    4390:	57 e4       	ldi	r21, 0x47	; 71
    4392:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4396:	18 16       	cp	r1, r24
    4398:	4c f5       	brge	.+82     	; 0x43ec <LCD_SecToMin+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    439a:	6d a9       	ldd	r22, Y+53	; 0x35
    439c:	7e a9       	ldd	r23, Y+54	; 0x36
    439e:	8f a9       	ldd	r24, Y+55	; 0x37
    43a0:	98 ad       	ldd	r25, Y+56	; 0x38
    43a2:	20 e0       	ldi	r18, 0x00	; 0
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	40 e2       	ldi	r20, 0x20	; 32
    43a8:	51 e4       	ldi	r21, 0x41	; 65
    43aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ae:	dc 01       	movw	r26, r24
    43b0:	cb 01       	movw	r24, r22
    43b2:	bc 01       	movw	r22, r24
    43b4:	cd 01       	movw	r24, r26
    43b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ba:	dc 01       	movw	r26, r24
    43bc:	cb 01       	movw	r24, r22
    43be:	98 ab       	std	Y+48, r25	; 0x30
    43c0:	8f a7       	std	Y+47, r24	; 0x2f
    43c2:	0f c0       	rjmp	.+30     	; 0x43e2 <LCD_SecToMin+0x164>
    43c4:	88 ec       	ldi	r24, 0xC8	; 200
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	9e a7       	std	Y+46, r25	; 0x2e
    43ca:	8d a7       	std	Y+45, r24	; 0x2d
    43cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    43ce:	9e a5       	ldd	r25, Y+46	; 0x2e
    43d0:	01 97       	sbiw	r24, 0x01	; 1
    43d2:	f1 f7       	brne	.-4      	; 0x43d0 <LCD_SecToMin+0x152>
    43d4:	9e a7       	std	Y+46, r25	; 0x2e
    43d6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    43da:	98 a9       	ldd	r25, Y+48	; 0x30
    43dc:	01 97       	sbiw	r24, 0x01	; 1
    43de:	98 ab       	std	Y+48, r25	; 0x30
    43e0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    43e4:	98 a9       	ldd	r25, Y+48	; 0x30
    43e6:	00 97       	sbiw	r24, 0x00	; 0
    43e8:	69 f7       	brne	.-38     	; 0x43c4 <LCD_SecToMin+0x146>
    43ea:	9e c0       	rjmp	.+316    	; 0x4528 <LCD_SecToMin+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43ec:	69 a9       	ldd	r22, Y+49	; 0x31
    43ee:	7a a9       	ldd	r23, Y+50	; 0x32
    43f0:	8b a9       	ldd	r24, Y+51	; 0x33
    43f2:	9c a9       	ldd	r25, Y+52	; 0x34
    43f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43f8:	dc 01       	movw	r26, r24
    43fa:	cb 01       	movw	r24, r22
    43fc:	98 ab       	std	Y+48, r25	; 0x30
    43fe:	8f a7       	std	Y+47, r24	; 0x2f
    4400:	8f a5       	ldd	r24, Y+47	; 0x2f
    4402:	98 a9       	ldd	r25, Y+48	; 0x30
    4404:	9c a7       	std	Y+44, r25	; 0x2c
    4406:	8b a7       	std	Y+43, r24	; 0x2b
    4408:	8b a5       	ldd	r24, Y+43	; 0x2b
    440a:	9c a5       	ldd	r25, Y+44	; 0x2c
    440c:	01 97       	sbiw	r24, 0x01	; 1
    440e:	f1 f7       	brne	.-4      	; 0x440c <LCD_SecToMin+0x18e>
    4410:	9c a7       	std	Y+44, r25	; 0x2c
    4412:	8b a7       	std	Y+43, r24	; 0x2b
    4414:	89 c0       	rjmp	.+274    	; 0x4528 <LCD_SecToMin+0x2aa>
				_delay_ms(100);
			}

			else if(u8sec>10)
    4416:	80 91 cb 00 	lds	r24, 0x00CB
    441a:	8b 30       	cpi	r24, 0x0B	; 11
    441c:	08 f4       	brcc	.+2      	; 0x4420 <LCD_SecToMin+0x1a2>
    441e:	84 c0       	rjmp	.+264    	; 0x4528 <LCD_SecToMin+0x2aa>
			{
				u8sec--;
    4420:	80 91 cb 00 	lds	r24, 0x00CB
    4424:	81 50       	subi	r24, 0x01	; 1
    4426:	80 93 cb 00 	sts	0x00CB, r24
				LCD_voidMoveCourser(0,0,6);
    442a:	80 e0       	ldi	r24, 0x00	; 0
    442c:	60 e0       	ldi	r22, 0x00	; 0
    442e:	46 e0       	ldi	r20, 0x06	; 6
    4430:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				LCD_voidSendNumber(0,u8sec);
    4434:	80 91 cb 00 	lds	r24, 0x00CB
    4438:	28 2f       	mov	r18, r24
    443a:	30 e0       	ldi	r19, 0x00	; 0
    443c:	80 e0       	ldi	r24, 0x00	; 0
    443e:	b9 01       	movw	r22, r18
    4440:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
    4444:	80 e0       	ldi	r24, 0x00	; 0
    4446:	90 e0       	ldi	r25, 0x00	; 0
    4448:	a8 ec       	ldi	r26, 0xC8	; 200
    444a:	b2 e4       	ldi	r27, 0x42	; 66
    444c:	8f a3       	std	Y+39, r24	; 0x27
    444e:	98 a7       	std	Y+40, r25	; 0x28
    4450:	a9 a7       	std	Y+41, r26	; 0x29
    4452:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4454:	6f a1       	ldd	r22, Y+39	; 0x27
    4456:	78 a5       	ldd	r23, Y+40	; 0x28
    4458:	89 a5       	ldd	r24, Y+41	; 0x29
    445a:	9a a5       	ldd	r25, Y+42	; 0x2a
    445c:	20 e0       	ldi	r18, 0x00	; 0
    445e:	30 e0       	ldi	r19, 0x00	; 0
    4460:	4a ef       	ldi	r20, 0xFA	; 250
    4462:	54 e4       	ldi	r21, 0x44	; 68
    4464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4468:	dc 01       	movw	r26, r24
    446a:	cb 01       	movw	r24, r22
    446c:	8b a3       	std	Y+35, r24	; 0x23
    446e:	9c a3       	std	Y+36, r25	; 0x24
    4470:	ad a3       	std	Y+37, r26	; 0x25
    4472:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4474:	6b a1       	ldd	r22, Y+35	; 0x23
    4476:	7c a1       	ldd	r23, Y+36	; 0x24
    4478:	8d a1       	ldd	r24, Y+37	; 0x25
    447a:	9e a1       	ldd	r25, Y+38	; 0x26
    447c:	20 e0       	ldi	r18, 0x00	; 0
    447e:	30 e0       	ldi	r19, 0x00	; 0
    4480:	40 e8       	ldi	r20, 0x80	; 128
    4482:	5f e3       	ldi	r21, 0x3F	; 63
    4484:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4488:	88 23       	and	r24, r24
    448a:	2c f4       	brge	.+10     	; 0x4496 <LCD_SecToMin+0x218>
		__ticks = 1;
    448c:	81 e0       	ldi	r24, 0x01	; 1
    448e:	90 e0       	ldi	r25, 0x00	; 0
    4490:	9a a3       	std	Y+34, r25	; 0x22
    4492:	89 a3       	std	Y+33, r24	; 0x21
    4494:	3f c0       	rjmp	.+126    	; 0x4514 <LCD_SecToMin+0x296>
	else if (__tmp > 65535)
    4496:	6b a1       	ldd	r22, Y+35	; 0x23
    4498:	7c a1       	ldd	r23, Y+36	; 0x24
    449a:	8d a1       	ldd	r24, Y+37	; 0x25
    449c:	9e a1       	ldd	r25, Y+38	; 0x26
    449e:	20 e0       	ldi	r18, 0x00	; 0
    44a0:	3f ef       	ldi	r19, 0xFF	; 255
    44a2:	4f e7       	ldi	r20, 0x7F	; 127
    44a4:	57 e4       	ldi	r21, 0x47	; 71
    44a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44aa:	18 16       	cp	r1, r24
    44ac:	4c f5       	brge	.+82     	; 0x4500 <LCD_SecToMin+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44ae:	6f a1       	ldd	r22, Y+39	; 0x27
    44b0:	78 a5       	ldd	r23, Y+40	; 0x28
    44b2:	89 a5       	ldd	r24, Y+41	; 0x29
    44b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    44b6:	20 e0       	ldi	r18, 0x00	; 0
    44b8:	30 e0       	ldi	r19, 0x00	; 0
    44ba:	40 e2       	ldi	r20, 0x20	; 32
    44bc:	51 e4       	ldi	r21, 0x41	; 65
    44be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44c2:	dc 01       	movw	r26, r24
    44c4:	cb 01       	movw	r24, r22
    44c6:	bc 01       	movw	r22, r24
    44c8:	cd 01       	movw	r24, r26
    44ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44ce:	dc 01       	movw	r26, r24
    44d0:	cb 01       	movw	r24, r22
    44d2:	9a a3       	std	Y+34, r25	; 0x22
    44d4:	89 a3       	std	Y+33, r24	; 0x21
    44d6:	0f c0       	rjmp	.+30     	; 0x44f6 <LCD_SecToMin+0x278>
    44d8:	88 ec       	ldi	r24, 0xC8	; 200
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	98 a3       	std	Y+32, r25	; 0x20
    44de:	8f 8f       	std	Y+31, r24	; 0x1f
    44e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    44e2:	98 a1       	ldd	r25, Y+32	; 0x20
    44e4:	01 97       	sbiw	r24, 0x01	; 1
    44e6:	f1 f7       	brne	.-4      	; 0x44e4 <LCD_SecToMin+0x266>
    44e8:	98 a3       	std	Y+32, r25	; 0x20
    44ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44ec:	89 a1       	ldd	r24, Y+33	; 0x21
    44ee:	9a a1       	ldd	r25, Y+34	; 0x22
    44f0:	01 97       	sbiw	r24, 0x01	; 1
    44f2:	9a a3       	std	Y+34, r25	; 0x22
    44f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44f6:	89 a1       	ldd	r24, Y+33	; 0x21
    44f8:	9a a1       	ldd	r25, Y+34	; 0x22
    44fa:	00 97       	sbiw	r24, 0x00	; 0
    44fc:	69 f7       	brne	.-38     	; 0x44d8 <LCD_SecToMin+0x25a>
    44fe:	14 c0       	rjmp	.+40     	; 0x4528 <LCD_SecToMin+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4500:	6b a1       	ldd	r22, Y+35	; 0x23
    4502:	7c a1       	ldd	r23, Y+36	; 0x24
    4504:	8d a1       	ldd	r24, Y+37	; 0x25
    4506:	9e a1       	ldd	r25, Y+38	; 0x26
    4508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    450c:	dc 01       	movw	r26, r24
    450e:	cb 01       	movw	r24, r22
    4510:	9a a3       	std	Y+34, r25	; 0x22
    4512:	89 a3       	std	Y+33, r24	; 0x21
    4514:	89 a1       	ldd	r24, Y+33	; 0x21
    4516:	9a a1       	ldd	r25, Y+34	; 0x22
    4518:	9e 8f       	std	Y+30, r25	; 0x1e
    451a:	8d 8f       	std	Y+29, r24	; 0x1d
    451c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    451e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4520:	01 97       	sbiw	r24, 0x01	; 1
    4522:	f1 f7       	brne	.-4      	; 0x4520 <LCD_SecToMin+0x2a2>
    4524:	9e 8f       	std	Y+30, r25	; 0x1e
    4526:	8d 8f       	std	Y+29, r24	; 0x1d

		while(u8minute!=0)
		{

			u8sec=60;
			while(u8sec!=0)
    4528:	80 91 cb 00 	lds	r24, 0x00CB
    452c:	88 23       	and	r24, r24
    452e:	09 f0       	breq	.+2      	; 0x4532 <LCD_SecToMin+0x2b4>
    4530:	c8 ce       	rjmp	.-624    	; 0x42c2 <LCD_SecToMin+0x44>
				LCD_voidSendNumber(0,u8sec);
				_delay_ms(100);

			}
			}
			if(u8minute<=10)
    4532:	80 91 ca 00 	lds	r24, 0x00CA
    4536:	8b 30       	cpi	r24, 0x0B	; 11
    4538:	08 f0       	brcs	.+2      	; 0x453c <LCD_SecToMin+0x2be>
    453a:	8e c0       	rjmp	.+284    	; 0x4658 <LCD_SecToMin+0x3da>
			{
				LCD_voidMoveCourser(0,0,3);
    453c:	80 e0       	ldi	r24, 0x00	; 0
    453e:	60 e0       	ldi	r22, 0x00	; 0
    4540:	43 e0       	ldi	r20, 0x03	; 3
    4542:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				LCD_voidSendChar(0,'0');
    4546:	80 e0       	ldi	r24, 0x00	; 0
    4548:	60 e3       	ldi	r22, 0x30	; 48
    454a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
				u8minute--;
    454e:	80 91 ca 00 	lds	r24, 0x00CA
    4552:	81 50       	subi	r24, 0x01	; 1
    4554:	80 93 ca 00 	sts	0x00CA, r24
				LCD_voidMoveCourser(0,0,4);
    4558:	80 e0       	ldi	r24, 0x00	; 0
    455a:	60 e0       	ldi	r22, 0x00	; 0
    455c:	44 e0       	ldi	r20, 0x04	; 4
    455e:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				LCD_voidSendChar(0,u8minute+48);
    4562:	80 91 ca 00 	lds	r24, 0x00CA
    4566:	98 2f       	mov	r25, r24
    4568:	90 5d       	subi	r25, 0xD0	; 208
    456a:	80 e0       	ldi	r24, 0x00	; 0
    456c:	69 2f       	mov	r22, r25
    456e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendChar>
    4572:	80 e0       	ldi	r24, 0x00	; 0
    4574:	90 e0       	ldi	r25, 0x00	; 0
    4576:	a8 ec       	ldi	r26, 0xC8	; 200
    4578:	b2 e4       	ldi	r27, 0x42	; 66
    457a:	89 8f       	std	Y+25, r24	; 0x19
    457c:	9a 8f       	std	Y+26, r25	; 0x1a
    457e:	ab 8f       	std	Y+27, r26	; 0x1b
    4580:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4582:	69 8d       	ldd	r22, Y+25	; 0x19
    4584:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4586:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4588:	9c 8d       	ldd	r25, Y+28	; 0x1c
    458a:	20 e0       	ldi	r18, 0x00	; 0
    458c:	30 e0       	ldi	r19, 0x00	; 0
    458e:	4a ef       	ldi	r20, 0xFA	; 250
    4590:	54 e4       	ldi	r21, 0x44	; 68
    4592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4596:	dc 01       	movw	r26, r24
    4598:	cb 01       	movw	r24, r22
    459a:	8d 8b       	std	Y+21, r24	; 0x15
    459c:	9e 8b       	std	Y+22, r25	; 0x16
    459e:	af 8b       	std	Y+23, r26	; 0x17
    45a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45a2:	6d 89       	ldd	r22, Y+21	; 0x15
    45a4:	7e 89       	ldd	r23, Y+22	; 0x16
    45a6:	8f 89       	ldd	r24, Y+23	; 0x17
    45a8:	98 8d       	ldd	r25, Y+24	; 0x18
    45aa:	20 e0       	ldi	r18, 0x00	; 0
    45ac:	30 e0       	ldi	r19, 0x00	; 0
    45ae:	40 e8       	ldi	r20, 0x80	; 128
    45b0:	5f e3       	ldi	r21, 0x3F	; 63
    45b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45b6:	88 23       	and	r24, r24
    45b8:	2c f4       	brge	.+10     	; 0x45c4 <LCD_SecToMin+0x346>
		__ticks = 1;
    45ba:	81 e0       	ldi	r24, 0x01	; 1
    45bc:	90 e0       	ldi	r25, 0x00	; 0
    45be:	9c 8b       	std	Y+20, r25	; 0x14
    45c0:	8b 8b       	std	Y+19, r24	; 0x13
    45c2:	3f c0       	rjmp	.+126    	; 0x4642 <LCD_SecToMin+0x3c4>
	else if (__tmp > 65535)
    45c4:	6d 89       	ldd	r22, Y+21	; 0x15
    45c6:	7e 89       	ldd	r23, Y+22	; 0x16
    45c8:	8f 89       	ldd	r24, Y+23	; 0x17
    45ca:	98 8d       	ldd	r25, Y+24	; 0x18
    45cc:	20 e0       	ldi	r18, 0x00	; 0
    45ce:	3f ef       	ldi	r19, 0xFF	; 255
    45d0:	4f e7       	ldi	r20, 0x7F	; 127
    45d2:	57 e4       	ldi	r21, 0x47	; 71
    45d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45d8:	18 16       	cp	r1, r24
    45da:	4c f5       	brge	.+82     	; 0x462e <LCD_SecToMin+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45dc:	69 8d       	ldd	r22, Y+25	; 0x19
    45de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45e4:	20 e0       	ldi	r18, 0x00	; 0
    45e6:	30 e0       	ldi	r19, 0x00	; 0
    45e8:	40 e2       	ldi	r20, 0x20	; 32
    45ea:	51 e4       	ldi	r21, 0x41	; 65
    45ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45f0:	dc 01       	movw	r26, r24
    45f2:	cb 01       	movw	r24, r22
    45f4:	bc 01       	movw	r22, r24
    45f6:	cd 01       	movw	r24, r26
    45f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45fc:	dc 01       	movw	r26, r24
    45fe:	cb 01       	movw	r24, r22
    4600:	9c 8b       	std	Y+20, r25	; 0x14
    4602:	8b 8b       	std	Y+19, r24	; 0x13
    4604:	0f c0       	rjmp	.+30     	; 0x4624 <LCD_SecToMin+0x3a6>
    4606:	88 ec       	ldi	r24, 0xC8	; 200
    4608:	90 e0       	ldi	r25, 0x00	; 0
    460a:	9a 8b       	std	Y+18, r25	; 0x12
    460c:	89 8b       	std	Y+17, r24	; 0x11
    460e:	89 89       	ldd	r24, Y+17	; 0x11
    4610:	9a 89       	ldd	r25, Y+18	; 0x12
    4612:	01 97       	sbiw	r24, 0x01	; 1
    4614:	f1 f7       	brne	.-4      	; 0x4612 <LCD_SecToMin+0x394>
    4616:	9a 8b       	std	Y+18, r25	; 0x12
    4618:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    461a:	8b 89       	ldd	r24, Y+19	; 0x13
    461c:	9c 89       	ldd	r25, Y+20	; 0x14
    461e:	01 97       	sbiw	r24, 0x01	; 1
    4620:	9c 8b       	std	Y+20, r25	; 0x14
    4622:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4624:	8b 89       	ldd	r24, Y+19	; 0x13
    4626:	9c 89       	ldd	r25, Y+20	; 0x14
    4628:	00 97       	sbiw	r24, 0x00	; 0
    462a:	69 f7       	brne	.-38     	; 0x4606 <LCD_SecToMin+0x388>
    462c:	9e c0       	rjmp	.+316    	; 0x476a <LCD_SecToMin+0x4ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    462e:	6d 89       	ldd	r22, Y+21	; 0x15
    4630:	7e 89       	ldd	r23, Y+22	; 0x16
    4632:	8f 89       	ldd	r24, Y+23	; 0x17
    4634:	98 8d       	ldd	r25, Y+24	; 0x18
    4636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    463a:	dc 01       	movw	r26, r24
    463c:	cb 01       	movw	r24, r22
    463e:	9c 8b       	std	Y+20, r25	; 0x14
    4640:	8b 8b       	std	Y+19, r24	; 0x13
    4642:	8b 89       	ldd	r24, Y+19	; 0x13
    4644:	9c 89       	ldd	r25, Y+20	; 0x14
    4646:	98 8b       	std	Y+16, r25	; 0x10
    4648:	8f 87       	std	Y+15, r24	; 0x0f
    464a:	8f 85       	ldd	r24, Y+15	; 0x0f
    464c:	98 89       	ldd	r25, Y+16	; 0x10
    464e:	01 97       	sbiw	r24, 0x01	; 1
    4650:	f1 f7       	brne	.-4      	; 0x464e <LCD_SecToMin+0x3d0>
    4652:	98 8b       	std	Y+16, r25	; 0x10
    4654:	8f 87       	std	Y+15, r24	; 0x0f
    4656:	89 c0       	rjmp	.+274    	; 0x476a <LCD_SecToMin+0x4ec>
				_delay_ms(100);
			}

			else if(u8minute>10)
    4658:	80 91 ca 00 	lds	r24, 0x00CA
    465c:	8b 30       	cpi	r24, 0x0B	; 11
    465e:	08 f4       	brcc	.+2      	; 0x4662 <LCD_SecToMin+0x3e4>
    4660:	84 c0       	rjmp	.+264    	; 0x476a <LCD_SecToMin+0x4ec>
			{
				u8minute--;
    4662:	80 91 ca 00 	lds	r24, 0x00CA
    4666:	81 50       	subi	r24, 0x01	; 1
    4668:	80 93 ca 00 	sts	0x00CA, r24
				LCD_voidMoveCourser(0,0,3);
    466c:	80 e0       	ldi	r24, 0x00	; 0
    466e:	60 e0       	ldi	r22, 0x00	; 0
    4670:	43 e0       	ldi	r20, 0x03	; 3
    4672:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidMoveCourser>
				LCD_voidSendNumber(0,u8minute);
    4676:	80 91 ca 00 	lds	r24, 0x00CA
    467a:	28 2f       	mov	r18, r24
    467c:	30 e0       	ldi	r19, 0x00	; 0
    467e:	80 e0       	ldi	r24, 0x00	; 0
    4680:	b9 01       	movw	r22, r18
    4682:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_voidSendNumber>
    4686:	80 e0       	ldi	r24, 0x00	; 0
    4688:	90 e0       	ldi	r25, 0x00	; 0
    468a:	a8 ec       	ldi	r26, 0xC8	; 200
    468c:	b2 e4       	ldi	r27, 0x42	; 66
    468e:	8b 87       	std	Y+11, r24	; 0x0b
    4690:	9c 87       	std	Y+12, r25	; 0x0c
    4692:	ad 87       	std	Y+13, r26	; 0x0d
    4694:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4696:	6b 85       	ldd	r22, Y+11	; 0x0b
    4698:	7c 85       	ldd	r23, Y+12	; 0x0c
    469a:	8d 85       	ldd	r24, Y+13	; 0x0d
    469c:	9e 85       	ldd	r25, Y+14	; 0x0e
    469e:	20 e0       	ldi	r18, 0x00	; 0
    46a0:	30 e0       	ldi	r19, 0x00	; 0
    46a2:	4a ef       	ldi	r20, 0xFA	; 250
    46a4:	54 e4       	ldi	r21, 0x44	; 68
    46a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46aa:	dc 01       	movw	r26, r24
    46ac:	cb 01       	movw	r24, r22
    46ae:	8f 83       	std	Y+7, r24	; 0x07
    46b0:	98 87       	std	Y+8, r25	; 0x08
    46b2:	a9 87       	std	Y+9, r26	; 0x09
    46b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46b6:	6f 81       	ldd	r22, Y+7	; 0x07
    46b8:	78 85       	ldd	r23, Y+8	; 0x08
    46ba:	89 85       	ldd	r24, Y+9	; 0x09
    46bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    46be:	20 e0       	ldi	r18, 0x00	; 0
    46c0:	30 e0       	ldi	r19, 0x00	; 0
    46c2:	40 e8       	ldi	r20, 0x80	; 128
    46c4:	5f e3       	ldi	r21, 0x3F	; 63
    46c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46ca:	88 23       	and	r24, r24
    46cc:	2c f4       	brge	.+10     	; 0x46d8 <LCD_SecToMin+0x45a>
		__ticks = 1;
    46ce:	81 e0       	ldi	r24, 0x01	; 1
    46d0:	90 e0       	ldi	r25, 0x00	; 0
    46d2:	9e 83       	std	Y+6, r25	; 0x06
    46d4:	8d 83       	std	Y+5, r24	; 0x05
    46d6:	3f c0       	rjmp	.+126    	; 0x4756 <LCD_SecToMin+0x4d8>
	else if (__tmp > 65535)
    46d8:	6f 81       	ldd	r22, Y+7	; 0x07
    46da:	78 85       	ldd	r23, Y+8	; 0x08
    46dc:	89 85       	ldd	r24, Y+9	; 0x09
    46de:	9a 85       	ldd	r25, Y+10	; 0x0a
    46e0:	20 e0       	ldi	r18, 0x00	; 0
    46e2:	3f ef       	ldi	r19, 0xFF	; 255
    46e4:	4f e7       	ldi	r20, 0x7F	; 127
    46e6:	57 e4       	ldi	r21, 0x47	; 71
    46e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    46ec:	18 16       	cp	r1, r24
    46ee:	4c f5       	brge	.+82     	; 0x4742 <LCD_SecToMin+0x4c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    46f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    46f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    46f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    46f8:	20 e0       	ldi	r18, 0x00	; 0
    46fa:	30 e0       	ldi	r19, 0x00	; 0
    46fc:	40 e2       	ldi	r20, 0x20	; 32
    46fe:	51 e4       	ldi	r21, 0x41	; 65
    4700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4704:	dc 01       	movw	r26, r24
    4706:	cb 01       	movw	r24, r22
    4708:	bc 01       	movw	r22, r24
    470a:	cd 01       	movw	r24, r26
    470c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4710:	dc 01       	movw	r26, r24
    4712:	cb 01       	movw	r24, r22
    4714:	9e 83       	std	Y+6, r25	; 0x06
    4716:	8d 83       	std	Y+5, r24	; 0x05
    4718:	0f c0       	rjmp	.+30     	; 0x4738 <LCD_SecToMin+0x4ba>
    471a:	88 ec       	ldi	r24, 0xC8	; 200
    471c:	90 e0       	ldi	r25, 0x00	; 0
    471e:	9c 83       	std	Y+4, r25	; 0x04
    4720:	8b 83       	std	Y+3, r24	; 0x03
    4722:	8b 81       	ldd	r24, Y+3	; 0x03
    4724:	9c 81       	ldd	r25, Y+4	; 0x04
    4726:	01 97       	sbiw	r24, 0x01	; 1
    4728:	f1 f7       	brne	.-4      	; 0x4726 <LCD_SecToMin+0x4a8>
    472a:	9c 83       	std	Y+4, r25	; 0x04
    472c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    472e:	8d 81       	ldd	r24, Y+5	; 0x05
    4730:	9e 81       	ldd	r25, Y+6	; 0x06
    4732:	01 97       	sbiw	r24, 0x01	; 1
    4734:	9e 83       	std	Y+6, r25	; 0x06
    4736:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4738:	8d 81       	ldd	r24, Y+5	; 0x05
    473a:	9e 81       	ldd	r25, Y+6	; 0x06
    473c:	00 97       	sbiw	r24, 0x00	; 0
    473e:	69 f7       	brne	.-38     	; 0x471a <LCD_SecToMin+0x49c>
    4740:	14 c0       	rjmp	.+40     	; 0x476a <LCD_SecToMin+0x4ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4742:	6f 81       	ldd	r22, Y+7	; 0x07
    4744:	78 85       	ldd	r23, Y+8	; 0x08
    4746:	89 85       	ldd	r24, Y+9	; 0x09
    4748:	9a 85       	ldd	r25, Y+10	; 0x0a
    474a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    474e:	dc 01       	movw	r26, r24
    4750:	cb 01       	movw	r24, r22
    4752:	9e 83       	std	Y+6, r25	; 0x06
    4754:	8d 83       	std	Y+5, r24	; 0x05
    4756:	8d 81       	ldd	r24, Y+5	; 0x05
    4758:	9e 81       	ldd	r25, Y+6	; 0x06
    475a:	9a 83       	std	Y+2, r25	; 0x02
    475c:	89 83       	std	Y+1, r24	; 0x01
    475e:	89 81       	ldd	r24, Y+1	; 0x01
    4760:	9a 81       	ldd	r25, Y+2	; 0x02
    4762:	01 97       	sbiw	r24, 0x01	; 1
    4764:	f1 f7       	brne	.-4      	; 0x4762 <LCD_SecToMin+0x4e4>
    4766:	9a 83       	std	Y+2, r25	; 0x02
    4768:	89 83       	std	Y+1, r24	; 0x01
	u8sec=59;
		u8minute=59;
		LCD_voidMoveCourser(0,0,3);
		LCD_voidSendNumber(0,u8minute);

		while(u8minute!=0)
    476a:	80 91 ca 00 	lds	r24, 0x00CA
    476e:	88 23       	and	r24, r24
    4770:	09 f0       	breq	.+2      	; 0x4774 <LCD_SecToMin+0x4f6>
    4772:	a3 cd       	rjmp	.-1210   	; 0x42ba <LCD_SecToMin+0x3c>

			}
		}


}
    4774:	e8 96       	adiw	r28, 0x38	; 56
    4776:	0f b6       	in	r0, 0x3f	; 63
    4778:	f8 94       	cli
    477a:	de bf       	out	0x3e, r29	; 62
    477c:	0f be       	out	0x3f, r0	; 63
    477e:	cd bf       	out	0x3d, r28	; 61
    4780:	cf 91       	pop	r28
    4782:	df 91       	pop	r29
    4784:	08 95       	ret

00004786 <main>:
#include"../HAL/LCD/LCD.h"
#include"Stopwatch.h"
#include"avr/delay.h"

int main(void)
{
    4786:	df 93       	push	r29
    4788:	cf 93       	push	r28
    478a:	00 d0       	rcall	.+0      	; 0x478c <main+0x6>
    478c:	0f 92       	push	r0
    478e:	cd b7       	in	r28, 0x3d	; 61
    4790:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInit();
    4792:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidInit>
	LCD_voidInit();
    4796:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_voidInit>
	KPD_voidInit();
    479a:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <KPD_voidInit>

	uint8 u8KeypadPressedKey=0xFF;
    479e:	8f ef       	ldi	r24, 0xFF	; 255
    47a0:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendString(0,"00:00:00");
    47a2:	24 e8       	ldi	r18, 0x84	; 132
    47a4:	30 e0       	ldi	r19, 0x00	; 0
    47a6:	80 e0       	ldi	r24, 0x00	; 0
    47a8:	b9 01       	movw	r22, r18
    47aa:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_voidSendString>

	while(1)
	{
		u8KeypadPressedKey=KPD_u8GetPressedKey();
    47ae:	0e 94 91 16 	call	0x2d22	; 0x2d22 <KPD_u8GetPressedKey>
    47b2:	89 83       	std	Y+1, r24	; 0x01
    47b4:	03 c0       	rjmp	.+6      	; 0x47bc <main+0x36>
		while(u8KeypadPressedKey != '7' &&  u8KeypadPressedKey!= '9'
				&& u8KeypadPressedKey!= '+' && u8KeypadPressedKey!= '-' && u8KeypadPressedKey!= '=')
		{
			u8KeypadPressedKey=KPD_u8GetPressedKey();
    47b6:	0e 94 91 16 	call	0x2d22	; 0x2d22 <KPD_u8GetPressedKey>
    47ba:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendString(0,"00:00:00");

	while(1)
	{
		u8KeypadPressedKey=KPD_u8GetPressedKey();
		while(u8KeypadPressedKey != '7' &&  u8KeypadPressedKey!= '9'
    47bc:	89 81       	ldd	r24, Y+1	; 0x01
    47be:	87 33       	cpi	r24, 0x37	; 55
    47c0:	61 f0       	breq	.+24     	; 0x47da <main+0x54>
    47c2:	89 81       	ldd	r24, Y+1	; 0x01
    47c4:	89 33       	cpi	r24, 0x39	; 57
    47c6:	49 f0       	breq	.+18     	; 0x47da <main+0x54>
    47c8:	89 81       	ldd	r24, Y+1	; 0x01
    47ca:	8b 32       	cpi	r24, 0x2B	; 43
    47cc:	31 f0       	breq	.+12     	; 0x47da <main+0x54>
    47ce:	89 81       	ldd	r24, Y+1	; 0x01
    47d0:	8d 32       	cpi	r24, 0x2D	; 45
    47d2:	19 f0       	breq	.+6      	; 0x47da <main+0x54>
    47d4:	89 81       	ldd	r24, Y+1	; 0x01
    47d6:	8d 33       	cpi	r24, 0x3D	; 61
    47d8:	71 f7       	brne	.-36     	; 0x47b6 <main+0x30>
				&& u8KeypadPressedKey!= '+' && u8KeypadPressedKey!= '-' && u8KeypadPressedKey!= '=')
		{
			u8KeypadPressedKey=KPD_u8GetPressedKey();
		}

		switch(u8KeypadPressedKey)
    47da:	89 81       	ldd	r24, Y+1	; 0x01
    47dc:	28 2f       	mov	r18, r24
    47de:	30 e0       	ldi	r19, 0x00	; 0
    47e0:	3b 83       	std	Y+3, r19	; 0x03
    47e2:	2a 83       	std	Y+2, r18	; 0x02
    47e4:	8a 81       	ldd	r24, Y+2	; 0x02
    47e6:	9b 81       	ldd	r25, Y+3	; 0x03
    47e8:	87 33       	cpi	r24, 0x37	; 55
    47ea:	91 05       	cpc	r25, r1
    47ec:	d9 f0       	breq	.+54     	; 0x4824 <main+0x9e>
    47ee:	2a 81       	ldd	r18, Y+2	; 0x02
    47f0:	3b 81       	ldd	r19, Y+3	; 0x03
    47f2:	28 33       	cpi	r18, 0x38	; 56
    47f4:	31 05       	cpc	r19, r1
    47f6:	5c f4       	brge	.+22     	; 0x480e <main+0x88>
    47f8:	8a 81       	ldd	r24, Y+2	; 0x02
    47fa:	9b 81       	ldd	r25, Y+3	; 0x03
    47fc:	8b 32       	cpi	r24, 0x2B	; 43
    47fe:	91 05       	cpc	r25, r1
    4800:	b9 f0       	breq	.+46     	; 0x4830 <main+0xaa>
    4802:	2a 81       	ldd	r18, Y+2	; 0x02
    4804:	3b 81       	ldd	r19, Y+3	; 0x03
    4806:	2d 32       	cpi	r18, 0x2D	; 45
    4808:	31 05       	cpc	r19, r1
    480a:	a9 f0       	breq	.+42     	; 0x4836 <main+0xb0>
    480c:	d0 cf       	rjmp	.-96     	; 0x47ae <main+0x28>
    480e:	8a 81       	ldd	r24, Y+2	; 0x02
    4810:	9b 81       	ldd	r25, Y+3	; 0x03
    4812:	89 33       	cpi	r24, 0x39	; 57
    4814:	91 05       	cpc	r25, r1
    4816:	49 f0       	breq	.+18     	; 0x482a <main+0xa4>
    4818:	2a 81       	ldd	r18, Y+2	; 0x02
    481a:	3b 81       	ldd	r19, Y+3	; 0x03
    481c:	2d 33       	cpi	r18, 0x3D	; 61
    481e:	31 05       	cpc	r19, r1
    4820:	69 f0       	breq	.+26     	; 0x483c <main+0xb6>
    4822:	c5 cf       	rjmp	.-118    	; 0x47ae <main+0x28>
		{
		case '7':
			LCD_voidMoveRight();
    4824:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_voidMoveRight>
    4828:	c2 cf       	rjmp	.-124    	; 0x47ae <main+0x28>
			break;
		case '9':
			LCD_voidMoveLeft();
    482a:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <LCD_voidMoveLeft>
    482e:	bf cf       	rjmp	.-130    	; 0x47ae <main+0x28>
			break;
		case'+':
			LCD_voidIncrement();
    4830:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <LCD_voidIncrement>
    4834:	bc cf       	rjmp	.-136    	; 0x47ae <main+0x28>
			break;
		case'-':
			LCD_voidDecrement();
    4836:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LCD_voidDecrement>
    483a:	b9 cf       	rjmp	.-142    	; 0x47ae <main+0x28>
			break;
		case '=':
			LCD_voidTime();
    483c:	0e 94 72 19 	call	0x32e4	; 0x32e4 <LCD_voidTime>
    4840:	b6 cf       	rjmp	.-148    	; 0x47ae <main+0x28>

00004842 <__udivmodhi4>:
    4842:	aa 1b       	sub	r26, r26
    4844:	bb 1b       	sub	r27, r27
    4846:	51 e1       	ldi	r21, 0x11	; 17
    4848:	07 c0       	rjmp	.+14     	; 0x4858 <__udivmodhi4_ep>

0000484a <__udivmodhi4_loop>:
    484a:	aa 1f       	adc	r26, r26
    484c:	bb 1f       	adc	r27, r27
    484e:	a6 17       	cp	r26, r22
    4850:	b7 07       	cpc	r27, r23
    4852:	10 f0       	brcs	.+4      	; 0x4858 <__udivmodhi4_ep>
    4854:	a6 1b       	sub	r26, r22
    4856:	b7 0b       	sbc	r27, r23

00004858 <__udivmodhi4_ep>:
    4858:	88 1f       	adc	r24, r24
    485a:	99 1f       	adc	r25, r25
    485c:	5a 95       	dec	r21
    485e:	a9 f7       	brne	.-22     	; 0x484a <__udivmodhi4_loop>
    4860:	80 95       	com	r24
    4862:	90 95       	com	r25
    4864:	bc 01       	movw	r22, r24
    4866:	cd 01       	movw	r24, r26
    4868:	08 95       	ret

0000486a <__divmodhi4>:
    486a:	97 fb       	bst	r25, 7
    486c:	09 2e       	mov	r0, r25
    486e:	07 26       	eor	r0, r23
    4870:	0a d0       	rcall	.+20     	; 0x4886 <__divmodhi4_neg1>
    4872:	77 fd       	sbrc	r23, 7
    4874:	04 d0       	rcall	.+8      	; 0x487e <__divmodhi4_neg2>
    4876:	e5 df       	rcall	.-54     	; 0x4842 <__udivmodhi4>
    4878:	06 d0       	rcall	.+12     	; 0x4886 <__divmodhi4_neg1>
    487a:	00 20       	and	r0, r0
    487c:	1a f4       	brpl	.+6      	; 0x4884 <__divmodhi4_exit>

0000487e <__divmodhi4_neg2>:
    487e:	70 95       	com	r23
    4880:	61 95       	neg	r22
    4882:	7f 4f       	sbci	r23, 0xFF	; 255

00004884 <__divmodhi4_exit>:
    4884:	08 95       	ret

00004886 <__divmodhi4_neg1>:
    4886:	f6 f7       	brtc	.-4      	; 0x4884 <__divmodhi4_exit>
    4888:	90 95       	com	r25
    488a:	81 95       	neg	r24
    488c:	9f 4f       	sbci	r25, 0xFF	; 255
    488e:	08 95       	ret

00004890 <__prologue_saves__>:
    4890:	2f 92       	push	r2
    4892:	3f 92       	push	r3
    4894:	4f 92       	push	r4
    4896:	5f 92       	push	r5
    4898:	6f 92       	push	r6
    489a:	7f 92       	push	r7
    489c:	8f 92       	push	r8
    489e:	9f 92       	push	r9
    48a0:	af 92       	push	r10
    48a2:	bf 92       	push	r11
    48a4:	cf 92       	push	r12
    48a6:	df 92       	push	r13
    48a8:	ef 92       	push	r14
    48aa:	ff 92       	push	r15
    48ac:	0f 93       	push	r16
    48ae:	1f 93       	push	r17
    48b0:	cf 93       	push	r28
    48b2:	df 93       	push	r29
    48b4:	cd b7       	in	r28, 0x3d	; 61
    48b6:	de b7       	in	r29, 0x3e	; 62
    48b8:	ca 1b       	sub	r28, r26
    48ba:	db 0b       	sbc	r29, r27
    48bc:	0f b6       	in	r0, 0x3f	; 63
    48be:	f8 94       	cli
    48c0:	de bf       	out	0x3e, r29	; 62
    48c2:	0f be       	out	0x3f, r0	; 63
    48c4:	cd bf       	out	0x3d, r28	; 61
    48c6:	09 94       	ijmp

000048c8 <__epilogue_restores__>:
    48c8:	2a 88       	ldd	r2, Y+18	; 0x12
    48ca:	39 88       	ldd	r3, Y+17	; 0x11
    48cc:	48 88       	ldd	r4, Y+16	; 0x10
    48ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    48d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    48d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    48d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    48d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    48d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    48da:	b9 84       	ldd	r11, Y+9	; 0x09
    48dc:	c8 84       	ldd	r12, Y+8	; 0x08
    48de:	df 80       	ldd	r13, Y+7	; 0x07
    48e0:	ee 80       	ldd	r14, Y+6	; 0x06
    48e2:	fd 80       	ldd	r15, Y+5	; 0x05
    48e4:	0c 81       	ldd	r16, Y+4	; 0x04
    48e6:	1b 81       	ldd	r17, Y+3	; 0x03
    48e8:	aa 81       	ldd	r26, Y+2	; 0x02
    48ea:	b9 81       	ldd	r27, Y+1	; 0x01
    48ec:	ce 0f       	add	r28, r30
    48ee:	d1 1d       	adc	r29, r1
    48f0:	0f b6       	in	r0, 0x3f	; 63
    48f2:	f8 94       	cli
    48f4:	de bf       	out	0x3e, r29	; 62
    48f6:	0f be       	out	0x3f, r0	; 63
    48f8:	cd bf       	out	0x3d, r28	; 61
    48fa:	ed 01       	movw	r28, r26
    48fc:	08 95       	ret

000048fe <_exit>:
    48fe:	f8 94       	cli

00004900 <__stop_program>:
    4900:	ff cf       	rjmp	.-2      	; 0x4900 <__stop_program>
